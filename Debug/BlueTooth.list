
BlueTooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d00  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08007ea0  08007ea0  00008ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fd8  08007fd8  00009080  2**0
                  CONTENTS
  4 .ARM          00000008  08007fd8  08007fd8  00008fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fe0  08007fe0  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fe0  08007fe0  00008fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007fe4  08007fe4  00008fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08007fe8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c8  20000080  08008068  00009080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000748  08008068  00009748  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001419e  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034de  00000000  00000000  0001d24e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00020730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd7  00000000  00000000  00021800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001be5e  00000000  00000000  000224d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ec4  00000000  00000000  0003e335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a180  00000000  00000000  000551f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef379  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f58  00000000  00000000  000ef3bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000f4314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007e88 	.word	0x08007e88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08007e88 	.word	0x08007e88

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_d2f>:
 8000608:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800060c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000610:	bf24      	itt	cs
 8000612:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000616:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800061a:	d90d      	bls.n	8000638 <__aeabi_d2f+0x30>
 800061c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000620:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000624:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000628:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800062c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000630:	bf08      	it	eq
 8000632:	f020 0001 	biceq.w	r0, r0, #1
 8000636:	4770      	bx	lr
 8000638:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800063c:	d121      	bne.n	8000682 <__aeabi_d2f+0x7a>
 800063e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000642:	bfbc      	itt	lt
 8000644:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000648:	4770      	bxlt	lr
 800064a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800064e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000652:	f1c2 0218 	rsb	r2, r2, #24
 8000656:	f1c2 0c20 	rsb	ip, r2, #32
 800065a:	fa10 f30c 	lsls.w	r3, r0, ip
 800065e:	fa20 f002 	lsr.w	r0, r0, r2
 8000662:	bf18      	it	ne
 8000664:	f040 0001 	orrne.w	r0, r0, #1
 8000668:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800066c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000670:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000674:	ea40 000c 	orr.w	r0, r0, ip
 8000678:	fa23 f302 	lsr.w	r3, r3, r2
 800067c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000680:	e7cc      	b.n	800061c <__aeabi_d2f+0x14>
 8000682:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000686:	d107      	bne.n	8000698 <__aeabi_d2f+0x90>
 8000688:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800068c:	bf1e      	ittt	ne
 800068e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000692:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000696:	4770      	bxne	lr
 8000698:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800069c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80006a0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__aeabi_uldivmod>:
 80006a8:	b953      	cbnz	r3, 80006c0 <__aeabi_uldivmod+0x18>
 80006aa:	b94a      	cbnz	r2, 80006c0 <__aeabi_uldivmod+0x18>
 80006ac:	2900      	cmp	r1, #0
 80006ae:	bf08      	it	eq
 80006b0:	2800      	cmpeq	r0, #0
 80006b2:	bf1c      	itt	ne
 80006b4:	f04f 31ff 	movne.w	r1, #4294967295
 80006b8:	f04f 30ff 	movne.w	r0, #4294967295
 80006bc:	f000 b96a 	b.w	8000994 <__aeabi_idiv0>
 80006c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006c8:	f000 f806 	bl	80006d8 <__udivmoddi4>
 80006cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006d4:	b004      	add	sp, #16
 80006d6:	4770      	bx	lr

080006d8 <__udivmoddi4>:
 80006d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006dc:	9d08      	ldr	r5, [sp, #32]
 80006de:	460c      	mov	r4, r1
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d14e      	bne.n	8000782 <__udivmoddi4+0xaa>
 80006e4:	4694      	mov	ip, r2
 80006e6:	458c      	cmp	ip, r1
 80006e8:	4686      	mov	lr, r0
 80006ea:	fab2 f282 	clz	r2, r2
 80006ee:	d962      	bls.n	80007b6 <__udivmoddi4+0xde>
 80006f0:	b14a      	cbz	r2, 8000706 <__udivmoddi4+0x2e>
 80006f2:	f1c2 0320 	rsb	r3, r2, #32
 80006f6:	4091      	lsls	r1, r2
 80006f8:	fa20 f303 	lsr.w	r3, r0, r3
 80006fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000700:	4319      	orrs	r1, r3
 8000702:	fa00 fe02 	lsl.w	lr, r0, r2
 8000706:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800070a:	fa1f f68c 	uxth.w	r6, ip
 800070e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000712:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000716:	fb07 1114 	mls	r1, r7, r4, r1
 800071a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800071e:	fb04 f106 	mul.w	r1, r4, r6
 8000722:	4299      	cmp	r1, r3
 8000724:	d90a      	bls.n	800073c <__udivmoddi4+0x64>
 8000726:	eb1c 0303 	adds.w	r3, ip, r3
 800072a:	f104 30ff 	add.w	r0, r4, #4294967295
 800072e:	f080 8112 	bcs.w	8000956 <__udivmoddi4+0x27e>
 8000732:	4299      	cmp	r1, r3
 8000734:	f240 810f 	bls.w	8000956 <__udivmoddi4+0x27e>
 8000738:	3c02      	subs	r4, #2
 800073a:	4463      	add	r3, ip
 800073c:	1a59      	subs	r1, r3, r1
 800073e:	fa1f f38e 	uxth.w	r3, lr
 8000742:	fbb1 f0f7 	udiv	r0, r1, r7
 8000746:	fb07 1110 	mls	r1, r7, r0, r1
 800074a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074e:	fb00 f606 	mul.w	r6, r0, r6
 8000752:	429e      	cmp	r6, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x94>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f100 31ff 	add.w	r1, r0, #4294967295
 800075e:	f080 80fc 	bcs.w	800095a <__udivmoddi4+0x282>
 8000762:	429e      	cmp	r6, r3
 8000764:	f240 80f9 	bls.w	800095a <__udivmoddi4+0x282>
 8000768:	4463      	add	r3, ip
 800076a:	3802      	subs	r0, #2
 800076c:	1b9b      	subs	r3, r3, r6
 800076e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000772:	2100      	movs	r1, #0
 8000774:	b11d      	cbz	r5, 800077e <__udivmoddi4+0xa6>
 8000776:	40d3      	lsrs	r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	e9c5 3200 	strd	r3, r2, [r5]
 800077e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000782:	428b      	cmp	r3, r1
 8000784:	d905      	bls.n	8000792 <__udivmoddi4+0xba>
 8000786:	b10d      	cbz	r5, 800078c <__udivmoddi4+0xb4>
 8000788:	e9c5 0100 	strd	r0, r1, [r5]
 800078c:	2100      	movs	r1, #0
 800078e:	4608      	mov	r0, r1
 8000790:	e7f5      	b.n	800077e <__udivmoddi4+0xa6>
 8000792:	fab3 f183 	clz	r1, r3
 8000796:	2900      	cmp	r1, #0
 8000798:	d146      	bne.n	8000828 <__udivmoddi4+0x150>
 800079a:	42a3      	cmp	r3, r4
 800079c:	d302      	bcc.n	80007a4 <__udivmoddi4+0xcc>
 800079e:	4290      	cmp	r0, r2
 80007a0:	f0c0 80f0 	bcc.w	8000984 <__udivmoddi4+0x2ac>
 80007a4:	1a86      	subs	r6, r0, r2
 80007a6:	eb64 0303 	sbc.w	r3, r4, r3
 80007aa:	2001      	movs	r0, #1
 80007ac:	2d00      	cmp	r5, #0
 80007ae:	d0e6      	beq.n	800077e <__udivmoddi4+0xa6>
 80007b0:	e9c5 6300 	strd	r6, r3, [r5]
 80007b4:	e7e3      	b.n	800077e <__udivmoddi4+0xa6>
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	f040 8090 	bne.w	80008dc <__udivmoddi4+0x204>
 80007bc:	eba1 040c 	sub.w	r4, r1, ip
 80007c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007c4:	fa1f f78c 	uxth.w	r7, ip
 80007c8:	2101      	movs	r1, #1
 80007ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80007ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007d2:	fb08 4416 	mls	r4, r8, r6, r4
 80007d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007da:	fb07 f006 	mul.w	r0, r7, r6
 80007de:	4298      	cmp	r0, r3
 80007e0:	d908      	bls.n	80007f4 <__udivmoddi4+0x11c>
 80007e2:	eb1c 0303 	adds.w	r3, ip, r3
 80007e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80007ea:	d202      	bcs.n	80007f2 <__udivmoddi4+0x11a>
 80007ec:	4298      	cmp	r0, r3
 80007ee:	f200 80cd 	bhi.w	800098c <__udivmoddi4+0x2b4>
 80007f2:	4626      	mov	r6, r4
 80007f4:	1a1c      	subs	r4, r3, r0
 80007f6:	fa1f f38e 	uxth.w	r3, lr
 80007fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80007fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000802:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000806:	fb00 f707 	mul.w	r7, r0, r7
 800080a:	429f      	cmp	r7, r3
 800080c:	d908      	bls.n	8000820 <__udivmoddi4+0x148>
 800080e:	eb1c 0303 	adds.w	r3, ip, r3
 8000812:	f100 34ff 	add.w	r4, r0, #4294967295
 8000816:	d202      	bcs.n	800081e <__udivmoddi4+0x146>
 8000818:	429f      	cmp	r7, r3
 800081a:	f200 80b0 	bhi.w	800097e <__udivmoddi4+0x2a6>
 800081e:	4620      	mov	r0, r4
 8000820:	1bdb      	subs	r3, r3, r7
 8000822:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000826:	e7a5      	b.n	8000774 <__udivmoddi4+0x9c>
 8000828:	f1c1 0620 	rsb	r6, r1, #32
 800082c:	408b      	lsls	r3, r1
 800082e:	fa22 f706 	lsr.w	r7, r2, r6
 8000832:	431f      	orrs	r7, r3
 8000834:	fa20 fc06 	lsr.w	ip, r0, r6
 8000838:	fa04 f301 	lsl.w	r3, r4, r1
 800083c:	ea43 030c 	orr.w	r3, r3, ip
 8000840:	40f4      	lsrs	r4, r6
 8000842:	fa00 f801 	lsl.w	r8, r0, r1
 8000846:	0c38      	lsrs	r0, r7, #16
 8000848:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800084c:	fbb4 fef0 	udiv	lr, r4, r0
 8000850:	fa1f fc87 	uxth.w	ip, r7
 8000854:	fb00 441e 	mls	r4, r0, lr, r4
 8000858:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800085c:	fb0e f90c 	mul.w	r9, lr, ip
 8000860:	45a1      	cmp	r9, r4
 8000862:	fa02 f201 	lsl.w	r2, r2, r1
 8000866:	d90a      	bls.n	800087e <__udivmoddi4+0x1a6>
 8000868:	193c      	adds	r4, r7, r4
 800086a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800086e:	f080 8084 	bcs.w	800097a <__udivmoddi4+0x2a2>
 8000872:	45a1      	cmp	r9, r4
 8000874:	f240 8081 	bls.w	800097a <__udivmoddi4+0x2a2>
 8000878:	f1ae 0e02 	sub.w	lr, lr, #2
 800087c:	443c      	add	r4, r7
 800087e:	eba4 0409 	sub.w	r4, r4, r9
 8000882:	fa1f f983 	uxth.w	r9, r3
 8000886:	fbb4 f3f0 	udiv	r3, r4, r0
 800088a:	fb00 4413 	mls	r4, r0, r3, r4
 800088e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000892:	fb03 fc0c 	mul.w	ip, r3, ip
 8000896:	45a4      	cmp	ip, r4
 8000898:	d907      	bls.n	80008aa <__udivmoddi4+0x1d2>
 800089a:	193c      	adds	r4, r7, r4
 800089c:	f103 30ff 	add.w	r0, r3, #4294967295
 80008a0:	d267      	bcs.n	8000972 <__udivmoddi4+0x29a>
 80008a2:	45a4      	cmp	ip, r4
 80008a4:	d965      	bls.n	8000972 <__udivmoddi4+0x29a>
 80008a6:	3b02      	subs	r3, #2
 80008a8:	443c      	add	r4, r7
 80008aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008ae:	fba0 9302 	umull	r9, r3, r0, r2
 80008b2:	eba4 040c 	sub.w	r4, r4, ip
 80008b6:	429c      	cmp	r4, r3
 80008b8:	46ce      	mov	lr, r9
 80008ba:	469c      	mov	ip, r3
 80008bc:	d351      	bcc.n	8000962 <__udivmoddi4+0x28a>
 80008be:	d04e      	beq.n	800095e <__udivmoddi4+0x286>
 80008c0:	b155      	cbz	r5, 80008d8 <__udivmoddi4+0x200>
 80008c2:	ebb8 030e 	subs.w	r3, r8, lr
 80008c6:	eb64 040c 	sbc.w	r4, r4, ip
 80008ca:	fa04 f606 	lsl.w	r6, r4, r6
 80008ce:	40cb      	lsrs	r3, r1
 80008d0:	431e      	orrs	r6, r3
 80008d2:	40cc      	lsrs	r4, r1
 80008d4:	e9c5 6400 	strd	r6, r4, [r5]
 80008d8:	2100      	movs	r1, #0
 80008da:	e750      	b.n	800077e <__udivmoddi4+0xa6>
 80008dc:	f1c2 0320 	rsb	r3, r2, #32
 80008e0:	fa20 f103 	lsr.w	r1, r0, r3
 80008e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e8:	fa24 f303 	lsr.w	r3, r4, r3
 80008ec:	4094      	lsls	r4, r2
 80008ee:	430c      	orrs	r4, r1
 80008f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80008f8:	fa1f f78c 	uxth.w	r7, ip
 80008fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000900:	fb08 3110 	mls	r1, r8, r0, r3
 8000904:	0c23      	lsrs	r3, r4, #16
 8000906:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800090a:	fb00 f107 	mul.w	r1, r0, r7
 800090e:	4299      	cmp	r1, r3
 8000910:	d908      	bls.n	8000924 <__udivmoddi4+0x24c>
 8000912:	eb1c 0303 	adds.w	r3, ip, r3
 8000916:	f100 36ff 	add.w	r6, r0, #4294967295
 800091a:	d22c      	bcs.n	8000976 <__udivmoddi4+0x29e>
 800091c:	4299      	cmp	r1, r3
 800091e:	d92a      	bls.n	8000976 <__udivmoddi4+0x29e>
 8000920:	3802      	subs	r0, #2
 8000922:	4463      	add	r3, ip
 8000924:	1a5b      	subs	r3, r3, r1
 8000926:	b2a4      	uxth	r4, r4
 8000928:	fbb3 f1f8 	udiv	r1, r3, r8
 800092c:	fb08 3311 	mls	r3, r8, r1, r3
 8000930:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000934:	fb01 f307 	mul.w	r3, r1, r7
 8000938:	42a3      	cmp	r3, r4
 800093a:	d908      	bls.n	800094e <__udivmoddi4+0x276>
 800093c:	eb1c 0404 	adds.w	r4, ip, r4
 8000940:	f101 36ff 	add.w	r6, r1, #4294967295
 8000944:	d213      	bcs.n	800096e <__udivmoddi4+0x296>
 8000946:	42a3      	cmp	r3, r4
 8000948:	d911      	bls.n	800096e <__udivmoddi4+0x296>
 800094a:	3902      	subs	r1, #2
 800094c:	4464      	add	r4, ip
 800094e:	1ae4      	subs	r4, r4, r3
 8000950:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000954:	e739      	b.n	80007ca <__udivmoddi4+0xf2>
 8000956:	4604      	mov	r4, r0
 8000958:	e6f0      	b.n	800073c <__udivmoddi4+0x64>
 800095a:	4608      	mov	r0, r1
 800095c:	e706      	b.n	800076c <__udivmoddi4+0x94>
 800095e:	45c8      	cmp	r8, r9
 8000960:	d2ae      	bcs.n	80008c0 <__udivmoddi4+0x1e8>
 8000962:	ebb9 0e02 	subs.w	lr, r9, r2
 8000966:	eb63 0c07 	sbc.w	ip, r3, r7
 800096a:	3801      	subs	r0, #1
 800096c:	e7a8      	b.n	80008c0 <__udivmoddi4+0x1e8>
 800096e:	4631      	mov	r1, r6
 8000970:	e7ed      	b.n	800094e <__udivmoddi4+0x276>
 8000972:	4603      	mov	r3, r0
 8000974:	e799      	b.n	80008aa <__udivmoddi4+0x1d2>
 8000976:	4630      	mov	r0, r6
 8000978:	e7d4      	b.n	8000924 <__udivmoddi4+0x24c>
 800097a:	46d6      	mov	lr, sl
 800097c:	e77f      	b.n	800087e <__udivmoddi4+0x1a6>
 800097e:	4463      	add	r3, ip
 8000980:	3802      	subs	r0, #2
 8000982:	e74d      	b.n	8000820 <__udivmoddi4+0x148>
 8000984:	4606      	mov	r6, r0
 8000986:	4623      	mov	r3, r4
 8000988:	4608      	mov	r0, r1
 800098a:	e70f      	b.n	80007ac <__udivmoddi4+0xd4>
 800098c:	3e02      	subs	r6, #2
 800098e:	4463      	add	r3, ip
 8000990:	e730      	b.n	80007f4 <__udivmoddi4+0x11c>
 8000992:	bf00      	nop

08000994 <__aeabi_idiv0>:
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000998:	b5b0      	push	{r4, r5, r7, lr}
 800099a:	b08a      	sub	sp, #40	@ 0x28
 800099c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";
 800099e:	4b4e      	ldr	r3, [pc, #312]	@ (8000ad8 <MX_BlueNRG_MS_Init+0x140>)
 80009a0:	617b      	str	r3, [r7, #20]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 80009a2:	f000 f8ad 	bl	8000b00 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f002 fd64 	bl	8003474 <BSP_PB_GetState>
 80009ac:	4603      	mov	r3, r0
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	4b4a      	ldr	r3, [pc, #296]	@ (8000adc <MX_BlueNRG_MS_Init+0x144>)
 80009b2:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 80009b4:	2100      	movs	r1, #0
 80009b6:	484a      	ldr	r0, [pc, #296]	@ (8000ae0 <MX_BlueNRG_MS_Init+0x148>)
 80009b8:	f005 fd7a 	bl	80064b0 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 80009bc:	1dba      	adds	r2, r7, #6
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	4611      	mov	r1, r2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f005 fbe7 	bl	8006198 <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 80009ca:	f005 fc29 	bl	8006220 <hci_reset>
  HAL_Delay(100);
 80009ce:	2064      	movs	r0, #100	@ 0x64
 80009d0:	f002 fef6 	bl	80037c0 <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 80009d4:	7a3b      	ldrb	r3, [r7, #8]
 80009d6:	2b30      	cmp	r3, #48	@ 0x30
 80009d8:	d902      	bls.n	80009e0 <MX_BlueNRG_MS_Init+0x48>
    bnrg_expansion_board = IDB05A1;
 80009da:	4b42      	ldr	r3, [pc, #264]	@ (8000ae4 <MX_BlueNRG_MS_Init+0x14c>)
 80009dc:	2201      	movs	r2, #1
 80009de:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 80009e0:	f107 0209 	add.w	r2, r7, #9
 80009e4:	4b40      	ldr	r3, [pc, #256]	@ (8000ae8 <MX_BlueNRG_MS_Init+0x150>)
 80009e6:	2106      	movs	r1, #6
 80009e8:	2080      	movs	r0, #128	@ 0x80
 80009ea:	f005 fb4f 	bl	800608c <aci_hal_read_config_data>
 80009ee:	4603      	mov	r3, r0
 80009f0:	613b      	str	r3, [r7, #16]

  if (ret) {
    PRINTF("Read Static Random address failed.\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 80009f2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ae8 <MX_BlueNRG_MS_Init+0x150>)
 80009f4:	795b      	ldrb	r3, [r3, #5]
 80009f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80009fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80009fc:	d001      	beq.n	8000a02 <MX_BlueNRG_MS_Init+0x6a>
    PRINTF("Static Random address not well formed.\n");
    while(1);
 80009fe:	bf00      	nop
 8000a00:	e7fd      	b.n	80009fe <MX_BlueNRG_MS_Init+0x66>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 8000a02:	f005 f90f 	bl	8005c24 <aci_gatt_init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	613b      	str	r3, [r7, #16]
  if(ret){
    PRINTF("GATT_Init failed.\n");
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8000a0a:	4b36      	ldr	r3, [pc, #216]	@ (8000ae4 <MX_BlueNRG_MS_Init+0x14c>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d110      	bne.n	8000a34 <MX_BlueNRG_MS_Init+0x9c>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000a12:	f107 020e 	add.w	r2, r7, #14
 8000a16:	f107 030a 	add.w	r3, r7, #10
 8000a1a:	9301      	str	r3, [sp, #4]
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	4613      	mov	r3, r2
 8000a24:	2207      	movs	r2, #7
 8000a26:	2100      	movs	r1, #0
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f004 fecf 	bl	80057cc <aci_gap_init_IDB05A1>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	e00a      	b.n	8000a4a <MX_BlueNRG_MS_Init+0xb2>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000a34:	f107 030a 	add.w	r3, r7, #10
 8000a38:	f107 020c 	add.w	r2, r7, #12
 8000a3c:	f107 010e 	add.w	r1, r7, #14
 8000a40:	2001      	movs	r0, #1
 8000a42:	f004 ff13 	bl	800586c <aci_gap_init_IDB04A1>
 8000a46:	4603      	mov	r3, r0
 8000a48:	613b      	str	r3, [r7, #16]
  if (ret != BLE_STATUS_SUCCESS) {
    PRINTF("GAP_Init failed.\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000a4a:	89fc      	ldrh	r4, [r7, #14]
 8000a4c:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 8000a4e:	6978      	ldr	r0, [r7, #20]
 8000a50:	f7ff fbc6 	bl	80001e0 <strlen>
 8000a54:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	2200      	movs	r2, #0
 8000a60:	4629      	mov	r1, r5
 8000a62:	4620      	mov	r0, r4
 8000a64:	f005 fa55 	bl	8005f12 <aci_gatt_update_char_value>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	613b      	str	r3, [r7, #16]
  if (ret) {
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_BlueNRG_MS_Init+0xde>
    PRINTF("aci_gatt_update_char_value failed.\n");
    while(1);
 8000a72:	bf00      	nop
 8000a74:	e7fd      	b.n	8000a72 <MX_BlueNRG_MS_Init+0xda>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8000a76:	2301      	movs	r3, #1
 8000a78:	9303      	str	r3, [sp, #12]
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aec <MX_BlueNRG_MS_Init+0x154>)
 8000a7c:	9302      	str	r3, [sp, #8]
 8000a7e:	2300      	movs	r3, #0
 8000a80:	9301      	str	r3, [sp, #4]
 8000a82:	2310      	movs	r3, #16
 8000a84:	9300      	str	r3, [sp, #0]
 8000a86:	2307      	movs	r3, #7
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f005 f821 	bl	8005ad4 <aci_gap_set_auth_requirement>
 8000a92:	4603      	mov	r3, r0
 8000a94:	613b      	str	r3, [r7, #16]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_BlueNRG_MS_Init+0x108>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
    while(1);
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <MX_BlueNRG_MS_Init+0x104>
  }

  PRINTF("BLE Stack Initialized\n");

  ret = Add_HWServW2ST_Service();
 8000aa0:	f001 fa90 	bl	8001fc4 <Add_HWServW2ST_Service>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_BlueNRG_MS_Init+0x11a>
    PRINTF("BlueMS HW service added successfully.\n");
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
 8000aae:	bf00      	nop
 8000ab0:	e7fd      	b.n	8000aae <MX_BlueNRG_MS_Init+0x116>
  }

  ret = Add_SWServW2ST_Service();
 8000ab2:	f001 fb59 	bl	8002168 <Add_SWServW2ST_Service>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_BlueNRG_MS_Init+0x12c>
     PRINTF("BlueMS SW service added successfully.\n");
  } else {
     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
     while(1);
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <MX_BlueNRG_MS_Init+0x128>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 8000ac4:	2104      	movs	r1, #4
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f005 fb35 	bl	8006136 <aci_hal_set_tx_power_level>
 8000acc:	4603      	mov	r3, r0
 8000ace:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8000ad0:	bf00      	nop
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ad8:	08007ea0 	.word	0x08007ea0
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	0800272d 	.word	0x0800272d
 8000ae4:	2000009c 	.word	0x2000009c
 8000ae8:	200000a0 	.word	0x200000a0
 8000aec:	0001e240 	.word	0x0001e240

08000af0 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 8000af4:	f000 f812 	bl	8000b1c <User_Process>
  hci_user_evt_proc();
 8000af8:	f005 fe54 	bl	80067a4 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000b04:	2101      	movs	r1, #1
 8000b06:	2000      	movs	r0, #0
 8000b08:	f002 fc60 	bl	80033cc <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f002 fbf3 	bl	80032f8 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 8000b12:	2000      	movs	r0, #0
 8000b14:	f002 fd10 	bl	8003538 <BSP_COM_Init>
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  if (set_connectable)
 8000b22:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd4 <User_Process+0xb8>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d004      	beq.n	8000b36 <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 8000b2c:	f001 fd8a 	bl	8002644 <Set_DeviceConnectable>
    set_connectable = FALSE;
 8000b30:	4b28      	ldr	r3, [pc, #160]	@ (8000bd4 <User_Process+0xb8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);

    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 8000b36:	2000      	movs	r0, #0
 8000b38:	f002 fbf0 	bl	800331c <BSP_LED_Toggle>

    if (connected)
 8000b3c:	4b26      	ldr	r3, [pc, #152]	@ (8000bd8 <User_Process+0xbc>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d042      	beq.n	8000bca <User_Process+0xae>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 8000b44:	f002 fe30 	bl	80037a8 <HAL_GetTick>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f005 ffba 	bl	8006ac4 <srand>

      /* Update emulated Environmental data */
      Set_Random_Environmental_Values(&data_t, &data_p);
 8000b50:	463a      	mov	r2, r7
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	4611      	mov	r1, r2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 f84c 	bl	8000bf4 <Set_Random_Environmental_Values>
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8000b5c:	edd7 7a00 	vldr	s15, [r7]
 8000b60:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000bdc <User_Process+0xc0>
 8000b64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b68:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8000b6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b70:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b7c:	ee17 3a90 	vmov	r3, s15
 8000b80:	b21b      	sxth	r3, r3
 8000b82:	4619      	mov	r1, r3
 8000b84:	ee16 0a90 	vmov	r0, s13
 8000b88:	f001 fd16 	bl	80025b8 <BlueMS_Environmental_Update>

      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
      Set_Random_Motion_Values(counter);
 8000b8c:	4b14      	ldr	r3, [pc, #80]	@ (8000be0 <User_Process+0xc4>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f000 f8af 	bl	8000cf4 <Set_Random_Motion_Values>
      Acc_Update(&x_axes, &g_axes, &m_axes);
 8000b96:	4a13      	ldr	r2, [pc, #76]	@ (8000be4 <User_Process+0xc8>)
 8000b98:	4913      	ldr	r1, [pc, #76]	@ (8000be8 <User_Process+0xcc>)
 8000b9a:	4814      	ldr	r0, [pc, #80]	@ (8000bec <User_Process+0xd0>)
 8000b9c:	f001 fb74 	bl	8002288 <Acc_Update>
      Quat_Update(&q_axes);
 8000ba0:	4813      	ldr	r0, [pc, #76]	@ (8000bf0 <User_Process+0xd4>)
 8000ba2:	f001 fbfb 	bl	800239c <Quat_Update>

      counter ++;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8000be0 <User_Process+0xc4>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	3301      	adds	r3, #1
 8000bac:	4a0c      	ldr	r2, [pc, #48]	@ (8000be0 <User_Process+0xc4>)
 8000bae:	6013      	str	r3, [r2, #0]
      if (counter == 40) {
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <User_Process+0xc4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b28      	cmp	r3, #40	@ 0x28
 8000bb6:	d104      	bne.n	8000bc2 <User_Process+0xa6>
        counter = 0;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <User_Process+0xc4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
        Reset_Motion_Values();
 8000bbe:	f001 f907 	bl	8001dd0 <Reset_Motion_Values>
      }
#if !USE_BUTTON
      HAL_Delay(1000); /* wait 1 sec before sending new data */
 8000bc2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bc6:	f002 fdfb 	bl	80037c0 <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000001 	.word	0x20000001
 8000bd8:	200000dc 	.word	0x200000dc
 8000bdc:	42c80000 	.word	0x42c80000
 8000be0:	200000a8 	.word	0x200000a8
 8000be4:	200000f8 	.word	0x200000f8
 8000be8:	200000ec 	.word	0x200000ec
 8000bec:	200000e0 	.word	0x200000e0
 8000bf0:	20000104 	.word	0x20000104

08000bf4 <Set_Random_Environmental_Values>:
 * @param  float pointer to temperature data
 * @param  float pointer to pressure data
 * @retval None
 */
static void Set_Random_Environmental_Values(float *data_t, float *data_p)
{
 8000bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000bf8:	b084      	sub	sp, #16
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	60f8      	str	r0, [r7, #12]
 8000bfe:	60b9      	str	r1, [r7, #8]
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 8000c00:	f005 ff8e 	bl	8006b20 <rand>
 8000c04:	4603      	mov	r3, r0
 8000c06:	17da      	asrs	r2, r3, #31
 8000c08:	469a      	mov	sl, r3
 8000c0a:	4693      	mov	fp, r2
 8000c0c:	4652      	mov	r2, sl
 8000c0e:	465b      	mov	r3, fp
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	f04f 0100 	mov.w	r1, #0
 8000c18:	0099      	lsls	r1, r3, #2
 8000c1a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000c1e:	0090      	lsls	r0, r2, #2
 8000c20:	4602      	mov	r2, r0
 8000c22:	460b      	mov	r3, r1
 8000c24:	eb12 010a 	adds.w	r1, r2, sl
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	eb43 030b 	adc.w	r3, r3, fp
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c3c:	f7ff fd34 	bl	80006a8 <__aeabi_uldivmod>
 8000c40:	4602      	mov	r2, r0
 8000c42:	460b      	mov	r3, r1
 8000c44:	4610      	mov	r0, r2
 8000c46:	4619      	mov	r1, r3
 8000c48:	f7ff fca8 	bl	800059c <__aeabi_ul2d>
 8000c4c:	f04f 0200 	mov.w	r2, #0
 8000c50:	4b26      	ldr	r3, [pc, #152]	@ (8000cec <Set_Random_Environmental_Values+0xf8>)
 8000c52:	f7ff fb23 	bl	800029c <__adddf3>
 8000c56:	4602      	mov	r2, r0
 8000c58:	460b      	mov	r3, r1
 8000c5a:	4610      	mov	r0, r2
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f7ff fcd3 	bl	8000608 <__aeabi_d2f>
 8000c62:	4602      	mov	r2, r0
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	601a      	str	r2, [r3, #0]
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 8000c68:	f005 ff5a 	bl	8006b20 <rand>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	17da      	asrs	r2, r3, #31
 8000c70:	4698      	mov	r8, r3
 8000c72:	4691      	mov	r9, r2
 8000c74:	4642      	mov	r2, r8
 8000c76:	464b      	mov	r3, r9
 8000c78:	f04f 0000 	mov.w	r0, #0
 8000c7c:	f04f 0100 	mov.w	r1, #0
 8000c80:	0099      	lsls	r1, r3, #2
 8000c82:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000c86:	0090      	lsls	r0, r2, #2
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	eb12 0408 	adds.w	r4, r2, r8
 8000c90:	eb43 0509 	adc.w	r5, r3, r9
 8000c94:	f04f 0200 	mov.w	r2, #0
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	012b      	lsls	r3, r5, #4
 8000c9e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000ca2:	0122      	lsls	r2, r4, #4
 8000ca4:	4614      	mov	r4, r2
 8000ca6:	461d      	mov	r5, r3
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	f7ff fcf8 	bl	80006a8 <__aeabi_uldivmod>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	f7ff fc6c 	bl	800059c <__aeabi_ul2d>
 8000cc4:	f04f 0200 	mov.w	r2, #0
 8000cc8:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <Set_Random_Environmental_Values+0xfc>)
 8000cca:	f7ff fae7 	bl	800029c <__adddf3>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f7ff fc97 	bl	8000608 <__aeabi_d2f>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	601a      	str	r2, [r3, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000cea:	bf00      	nop
 8000cec:	403b0000 	.word	0x403b0000
 8000cf0:	408f4000 	.word	0x408f4000

08000cf4 <Set_Random_Motion_Values>:
 * @brief  Set random values for all motion sensor data
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{
 8000cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000cf8:	f5ad 7d7a 	sub.w	sp, sp, #1000	@ 0x3e8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	f8c7 03e4 	str.w	r0, [r7, #996]	@ 0x3e4
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
  if (cnt < 20) {
 8000d02:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8000d06:	2b13      	cmp	r3, #19
 8000d08:	f200 8426 	bhi.w	8001558 <Set_Random_Motion_Values+0x864>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8000d0c:	f005 ff08 	bl	8006b20 <rand>
 8000d10:	4603      	mov	r3, r0
 8000d12:	17da      	asrs	r2, r3, #31
 8000d14:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 8000d18:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
 8000d1c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8000d20:	2200      	movs	r2, #0
 8000d22:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
 8000d26:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
 8000d2a:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	@ 0x328
 8000d2e:	462b      	mov	r3, r5
 8000d30:	e9d7 abc8 	ldrd	sl, fp, [r7, #800]	@ 0x320
 8000d34:	4652      	mov	r2, sl
 8000d36:	fb02 f203 	mul.w	r2, r2, r3
 8000d3a:	465b      	mov	r3, fp
 8000d3c:	4621      	mov	r1, r4
 8000d3e:	fb01 f303 	mul.w	r3, r1, r3
 8000d42:	4413      	add	r3, r2
 8000d44:	4622      	mov	r2, r4
 8000d46:	4651      	mov	r1, sl
 8000d48:	fba2 8901 	umull	r8, r9, r2, r1
 8000d4c:	444b      	add	r3, r9
 8000d4e:	4699      	mov	r9, r3
 8000d50:	4642      	mov	r2, r8
 8000d52:	464b      	mov	r3, r9
 8000d54:	1891      	adds	r1, r2, r2
 8000d56:	66b9      	str	r1, [r7, #104]	@ 0x68
 8000d58:	415b      	adcs	r3, r3
 8000d5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000d5c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000d60:	eb12 0108 	adds.w	r1, r2, r8
 8000d64:	f8c7 1318 	str.w	r1, [r7, #792]	@ 0x318
 8000d68:	eb43 0309 	adc.w	r3, r3, r9
 8000d6c:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 8000d70:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000d74:	f04f 0300 	mov.w	r3, #0
 8000d78:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	@ 0x318
 8000d7c:	f7ff fc94 	bl	80006a8 <__aeabi_uldivmod>
 8000d80:	4602      	mov	r2, r0
 8000d82:	460b      	mov	r3, r1
 8000d84:	f112 010a 	adds.w	r1, r2, #10
 8000d88:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8000d8c:	f143 0300 	adc.w	r3, r3, #0
 8000d90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000d94:	4bec      	ldr	r3, [pc, #944]	@ (8001148 <Set_Random_Motion_Values+0x454>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000d9e:	4413      	add	r3, r2
 8000da0:	461a      	mov	r2, r3
 8000da2:	4be9      	ldr	r3, [pc, #932]	@ (8001148 <Set_Random_Motion_Values+0x454>)
 8000da4:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8000da6:	f005 febb 	bl	8006b20 <rand>
 8000daa:	4603      	mov	r3, r0
 8000dac:	17da      	asrs	r2, r3, #31
 8000dae:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 8000db2:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 8000db6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 8000dc0:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 8000dc4:	e9d7 45c4 	ldrd	r4, r5, [r7, #784]	@ 0x310
 8000dc8:	462b      	mov	r3, r5
 8000dca:	e9d7 89c2 	ldrd	r8, r9, [r7, #776]	@ 0x308
 8000dce:	4642      	mov	r2, r8
 8000dd0:	fb02 f203 	mul.w	r2, r2, r3
 8000dd4:	464b      	mov	r3, r9
 8000dd6:	4621      	mov	r1, r4
 8000dd8:	fb01 f303 	mul.w	r3, r1, r3
 8000ddc:	4413      	add	r3, r2
 8000dde:	4622      	mov	r2, r4
 8000de0:	4641      	mov	r1, r8
 8000de2:	fba2 1201 	umull	r1, r2, r2, r1
 8000de6:	f8c7 23dc 	str.w	r2, [r7, #988]	@ 0x3dc
 8000dea:	460a      	mov	r2, r1
 8000dec:	f8c7 23d8 	str.w	r2, [r7, #984]	@ 0x3d8
 8000df0:	f8d7 23dc 	ldr.w	r2, [r7, #988]	@ 0x3dc
 8000df4:	4413      	add	r3, r2
 8000df6:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
 8000dfa:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	@ 0x3d8
 8000dfe:	4622      	mov	r2, r4
 8000e00:	462b      	mov	r3, r5
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	f04f 0100 	mov.w	r1, #0
 8000e0a:	0099      	lsls	r1, r3, #2
 8000e0c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000e10:	0090      	lsls	r0, r2, #2
 8000e12:	4602      	mov	r2, r0
 8000e14:	460b      	mov	r3, r1
 8000e16:	4621      	mov	r1, r4
 8000e18:	1851      	adds	r1, r2, r1
 8000e1a:	f8c7 1300 	str.w	r1, [r7, #768]	@ 0x300
 8000e1e:	4629      	mov	r1, r5
 8000e20:	eb43 0101 	adc.w	r1, r3, r1
 8000e24:	f8c7 1304 	str.w	r1, [r7, #772]	@ 0x304
 8000e28:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000e2c:	f04f 0300 	mov.w	r3, #0
 8000e30:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	@ 0x300
 8000e34:	f7ff fc38 	bl	80006a8 <__aeabi_uldivmod>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	f06f 0009 	mvn.w	r0, #9
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295
 8000e44:	1a80      	subs	r0, r0, r2
 8000e46:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000e52:	4bbd      	ldr	r3, [pc, #756]	@ (8001148 <Set_Random_Motion_Values+0x454>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	461a      	mov	r2, r3
 8000e58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000e5c:	4413      	add	r3, r2
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4bb9      	ldr	r3, [pc, #740]	@ (8001148 <Set_Random_Motion_Values+0x454>)
 8000e62:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8000e64:	f005 fe5c 	bl	8006b20 <rand>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	17da      	asrs	r2, r3, #31
 8000e6c:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 8000e70:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 8000e74:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 8000e7e:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 8000e82:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	@ 0x2f8
 8000e86:	462b      	mov	r3, r5
 8000e88:	e9d7 89bc 	ldrd	r8, r9, [r7, #752]	@ 0x2f0
 8000e8c:	4642      	mov	r2, r8
 8000e8e:	fb02 f203 	mul.w	r2, r2, r3
 8000e92:	464b      	mov	r3, r9
 8000e94:	4621      	mov	r1, r4
 8000e96:	fb01 f303 	mul.w	r3, r1, r3
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4622      	mov	r2, r4
 8000e9e:	4641      	mov	r1, r8
 8000ea0:	fba2 1201 	umull	r1, r2, r2, r1
 8000ea4:	f8c7 23d4 	str.w	r2, [r7, #980]	@ 0x3d4
 8000ea8:	460a      	mov	r2, r1
 8000eaa:	f8c7 23d0 	str.w	r2, [r7, #976]	@ 0x3d0
 8000eae:	f8d7 23d4 	ldr.w	r2, [r7, #980]	@ 0x3d4
 8000eb2:	4413      	add	r3, r2
 8000eb4:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 8000eb8:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	@ 0x3d0
 8000ebc:	4622      	mov	r2, r4
 8000ebe:	462b      	mov	r3, r5
 8000ec0:	f04f 0000 	mov.w	r0, #0
 8000ec4:	f04f 0100 	mov.w	r1, #0
 8000ec8:	00d9      	lsls	r1, r3, #3
 8000eca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000ece:	00d0      	lsls	r0, r2, #3
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	4621      	mov	r1, r4
 8000ed6:	1a51      	subs	r1, r2, r1
 8000ed8:	f8c7 12e8 	str.w	r1, [r7, #744]	@ 0x2e8
 8000edc:	4629      	mov	r1, r5
 8000ede:	eb63 0301 	sbc.w	r3, r3, r1
 8000ee2:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8000ee6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000eea:	f04f 0300 	mov.w	r3, #0
 8000eee:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 8000ef2:	f7ff fbd9 	bl	80006a8 <__aeabi_uldivmod>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	460b      	mov	r3, r1
 8000efa:	f112 010a 	adds.w	r1, r2, #10
 8000efe:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8000f02:	f143 0300 	adc.w	r3, r3, #0
 8000f06:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000f0a:	4b8f      	ldr	r3, [pc, #572]	@ (8001148 <Set_Random_Motion_Values+0x454>)
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000f14:	4413      	add	r3, r2
 8000f16:	461a      	mov	r2, r3
 8000f18:	4b8b      	ldr	r3, [pc, #556]	@ (8001148 <Set_Random_Motion_Values+0x454>)
 8000f1a:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8000f1c:	f005 fe00 	bl	8006b20 <rand>
 8000f20:	4603      	mov	r3, r0
 8000f22:	17da      	asrs	r2, r3, #31
 8000f24:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 8000f28:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 8000f2c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8000f30:	2200      	movs	r2, #0
 8000f32:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 8000f36:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 8000f3a:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	@ 0x2e0
 8000f3e:	462b      	mov	r3, r5
 8000f40:	e9d7 89b6 	ldrd	r8, r9, [r7, #728]	@ 0x2d8
 8000f44:	4642      	mov	r2, r8
 8000f46:	fb02 f203 	mul.w	r2, r2, r3
 8000f4a:	464b      	mov	r3, r9
 8000f4c:	4621      	mov	r1, r4
 8000f4e:	fb01 f303 	mul.w	r3, r1, r3
 8000f52:	4413      	add	r3, r2
 8000f54:	4622      	mov	r2, r4
 8000f56:	4641      	mov	r1, r8
 8000f58:	fba2 1201 	umull	r1, r2, r2, r1
 8000f5c:	f8c7 23cc 	str.w	r2, [r7, #972]	@ 0x3cc
 8000f60:	460a      	mov	r2, r1
 8000f62:	f8c7 23c8 	str.w	r2, [r7, #968]	@ 0x3c8
 8000f66:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 8000f6a:	4413      	add	r3, r2
 8000f6c:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 8000f70:	e9d7 12f2 	ldrd	r1, r2, [r7, #968]	@ 0x3c8
 8000f74:	460b      	mov	r3, r1
 8000f76:	18db      	adds	r3, r3, r3
 8000f78:	663b      	str	r3, [r7, #96]	@ 0x60
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	eb42 0303 	adc.w	r3, r2, r3
 8000f80:	667b      	str	r3, [r7, #100]	@ 0x64
 8000f82:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8000f86:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000f8a:	f04f 0300 	mov.w	r3, #0
 8000f8e:	f7ff fb8b 	bl	80006a8 <__aeabi_uldivmod>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8000f9a:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8000f9e:	f143 0300 	adc.w	r3, r3, #0
 8000fa2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000fa6:	4b69      	ldr	r3, [pc, #420]	@ (800114c <Set_Random_Motion_Values+0x458>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000fb0:	4413      	add	r3, r2
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b65      	ldr	r3, [pc, #404]	@ (800114c <Set_Random_Motion_Values+0x458>)
 8000fb6:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8000fb8:	f005 fdb2 	bl	8006b20 <rand>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	17da      	asrs	r2, r3, #31
 8000fc0:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 8000fc4:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 8000fc8:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 8000fd2:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 8000fd6:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	@ 0x2d0
 8000fda:	462b      	mov	r3, r5
 8000fdc:	e9d7 89b2 	ldrd	r8, r9, [r7, #712]	@ 0x2c8
 8000fe0:	4642      	mov	r2, r8
 8000fe2:	fb02 f203 	mul.w	r2, r2, r3
 8000fe6:	464b      	mov	r3, r9
 8000fe8:	4621      	mov	r1, r4
 8000fea:	fb01 f303 	mul.w	r3, r1, r3
 8000fee:	4413      	add	r3, r2
 8000ff0:	4622      	mov	r2, r4
 8000ff2:	4641      	mov	r1, r8
 8000ff4:	fba2 1201 	umull	r1, r2, r2, r1
 8000ff8:	f8c7 23c4 	str.w	r2, [r7, #964]	@ 0x3c4
 8000ffc:	460a      	mov	r2, r1
 8000ffe:	f8c7 23c0 	str.w	r2, [r7, #960]	@ 0x3c0
 8001002:	f8d7 23c4 	ldr.w	r2, [r7, #964]	@ 0x3c4
 8001006:	4413      	add	r3, r2
 8001008:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 800100c:	f04f 0000 	mov.w	r0, #0
 8001010:	f04f 0100 	mov.w	r1, #0
 8001014:	e9d7 45f0 	ldrd	r4, r5, [r7, #960]	@ 0x3c0
 8001018:	462b      	mov	r3, r5
 800101a:	0099      	lsls	r1, r3, #2
 800101c:	4623      	mov	r3, r4
 800101e:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001022:	4623      	mov	r3, r4
 8001024:	0098      	lsls	r0, r3, #2
 8001026:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800102a:	f04f 0300 	mov.w	r3, #0
 800102e:	f7ff fb3b 	bl	80006a8 <__aeabi_uldivmod>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 800103a:	f04f 31ff 	mov.w	r1, #4294967295
 800103e:	1a80      	subs	r0, r0, r2
 8001040:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
 8001044:	eb61 0303 	sbc.w	r3, r1, r3
 8001048:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800104c:	4b3f      	ldr	r3, [pc, #252]	@ (800114c <Set_Random_Motion_Values+0x458>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	461a      	mov	r2, r3
 8001052:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001056:	4413      	add	r3, r2
 8001058:	461a      	mov	r2, r3
 800105a:	4b3c      	ldr	r3, [pc, #240]	@ (800114c <Set_Random_Motion_Values+0x458>)
 800105c:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 800105e:	f005 fd5f 	bl	8006b20 <rand>
 8001062:	4603      	mov	r3, r0
 8001064:	17da      	asrs	r2, r3, #31
 8001066:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 800106a:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 800106e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001072:	2200      	movs	r2, #0
 8001074:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 8001078:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 800107c:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	@ 0x2c0
 8001080:	462b      	mov	r3, r5
 8001082:	e9d7 89ae 	ldrd	r8, r9, [r7, #696]	@ 0x2b8
 8001086:	4642      	mov	r2, r8
 8001088:	fb02 f203 	mul.w	r2, r2, r3
 800108c:	464b      	mov	r3, r9
 800108e:	4621      	mov	r1, r4
 8001090:	fb01 f303 	mul.w	r3, r1, r3
 8001094:	4413      	add	r3, r2
 8001096:	4622      	mov	r2, r4
 8001098:	4641      	mov	r1, r8
 800109a:	fba2 1201 	umull	r1, r2, r2, r1
 800109e:	f8c7 23bc 	str.w	r2, [r7, #956]	@ 0x3bc
 80010a2:	460a      	mov	r2, r1
 80010a4:	f8c7 23b8 	str.w	r2, [r7, #952]	@ 0x3b8
 80010a8:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 80010ac:	4413      	add	r3, r2
 80010ae:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 80010b2:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	@ 0x3b8
 80010b6:	4622      	mov	r2, r4
 80010b8:	462b      	mov	r3, r5
 80010ba:	1891      	adds	r1, r2, r2
 80010bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80010be:	415b      	adcs	r3, r3
 80010c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80010c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80010c6:	4621      	mov	r1, r4
 80010c8:	1851      	adds	r1, r2, r1
 80010ca:	6539      	str	r1, [r7, #80]	@ 0x50
 80010cc:	4629      	mov	r1, r5
 80010ce:	eb43 0101 	adc.w	r1, r3, r1
 80010d2:	6579      	str	r1, [r7, #84]	@ 0x54
 80010d4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80010d8:	460b      	mov	r3, r1
 80010da:	18db      	adds	r3, r3, r3
 80010dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80010de:	4613      	mov	r3, r2
 80010e0:	eb42 0303 	adc.w	r3, r2, r3
 80010e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80010e6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 80010ea:	4618      	mov	r0, r3
 80010ec:	4621      	mov	r1, r4
 80010ee:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80010f2:	f04f 0300 	mov.w	r3, #0
 80010f6:	f7ff fad7 	bl	80006a8 <__aeabi_uldivmod>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001102:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8001106:	f143 0300 	adc.w	r3, r3, #0
 800110a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800110e:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <Set_Random_Motion_Values+0x458>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	461a      	mov	r2, r3
 8001114:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001118:	4413      	add	r3, r2
 800111a:	461a      	mov	r2, r3
 800111c:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <Set_Random_Motion_Values+0x458>)
 800111e:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001120:	f005 fcfe 	bl	8006b20 <rand>
 8001124:	4603      	mov	r3, r0
 8001126:	17da      	asrs	r2, r3, #31
 8001128:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 800112c:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 8001130:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001134:	2200      	movs	r2, #0
 8001136:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 800113a:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 800113e:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	@ 0x2b0
 8001142:	462b      	mov	r3, r5
 8001144:	e004      	b.n	8001150 <Set_Random_Motion_Values+0x45c>
 8001146:	bf00      	nop
 8001148:	200000e0 	.word	0x200000e0
 800114c:	200000ec 	.word	0x200000ec
 8001150:	e9d7 89aa 	ldrd	r8, r9, [r7, #680]	@ 0x2a8
 8001154:	4642      	mov	r2, r8
 8001156:	fb02 f203 	mul.w	r2, r2, r3
 800115a:	464b      	mov	r3, r9
 800115c:	4621      	mov	r1, r4
 800115e:	fb01 f303 	mul.w	r3, r1, r3
 8001162:	4413      	add	r3, r2
 8001164:	4622      	mov	r2, r4
 8001166:	4641      	mov	r1, r8
 8001168:	fba2 1201 	umull	r1, r2, r2, r1
 800116c:	f8c7 23b4 	str.w	r2, [r7, #948]	@ 0x3b4
 8001170:	460a      	mov	r2, r1
 8001172:	f8c7 23b0 	str.w	r2, [r7, #944]	@ 0x3b0
 8001176:	f8d7 23b4 	ldr.w	r2, [r7, #948]	@ 0x3b4
 800117a:	4413      	add	r3, r2
 800117c:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8001180:	e9d7 45ec 	ldrd	r4, r5, [r7, #944]	@ 0x3b0
 8001184:	4622      	mov	r2, r4
 8001186:	462b      	mov	r3, r5
 8001188:	1891      	adds	r1, r2, r2
 800118a:	6439      	str	r1, [r7, #64]	@ 0x40
 800118c:	415b      	adcs	r3, r3
 800118e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001190:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001194:	4621      	mov	r1, r4
 8001196:	1851      	adds	r1, r2, r1
 8001198:	f8c7 12a0 	str.w	r1, [r7, #672]	@ 0x2a0
 800119c:	4629      	mov	r1, r5
 800119e:	eb43 0101 	adc.w	r1, r3, r1
 80011a2:	f8c7 12a4 	str.w	r1, [r7, #676]	@ 0x2a4
 80011a6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80011aa:	f04f 0300 	mov.w	r3, #0
 80011ae:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	@ 0x2a0
 80011b2:	f7ff fa79 	bl	80006a8 <__aeabi_uldivmod>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	1cd1      	adds	r1, r2, #3
 80011bc:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80011c0:	f143 0300 	adc.w	r3, r3, #0
 80011c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80011c8:	4be1      	ldr	r3, [pc, #900]	@ (8001550 <Set_Random_Motion_Values+0x85c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80011d2:	4413      	add	r3, r2
 80011d4:	461a      	mov	r2, r3
 80011d6:	4bde      	ldr	r3, [pc, #888]	@ (8001550 <Set_Random_Motion_Values+0x85c>)
 80011d8:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 80011da:	f005 fca1 	bl	8006b20 <rand>
 80011de:	4603      	mov	r3, r0
 80011e0:	17da      	asrs	r2, r3, #31
 80011e2:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 80011e6:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 80011ea:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80011ee:	2200      	movs	r2, #0
 80011f0:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 80011f4:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 80011f8:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	@ 0x298
 80011fc:	462b      	mov	r3, r5
 80011fe:	e9d7 89a4 	ldrd	r8, r9, [r7, #656]	@ 0x290
 8001202:	4642      	mov	r2, r8
 8001204:	fb02 f203 	mul.w	r2, r2, r3
 8001208:	464b      	mov	r3, r9
 800120a:	4621      	mov	r1, r4
 800120c:	fb01 f303 	mul.w	r3, r1, r3
 8001210:	4413      	add	r3, r2
 8001212:	4622      	mov	r2, r4
 8001214:	4641      	mov	r1, r8
 8001216:	fba2 1201 	umull	r1, r2, r2, r1
 800121a:	f8c7 23ac 	str.w	r2, [r7, #940]	@ 0x3ac
 800121e:	460a      	mov	r2, r1
 8001220:	f8c7 23a8 	str.w	r2, [r7, #936]	@ 0x3a8
 8001224:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 8001228:	4413      	add	r3, r2
 800122a:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 800122e:	f04f 0000 	mov.w	r0, #0
 8001232:	f04f 0100 	mov.w	r1, #0
 8001236:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	@ 0x3a8
 800123a:	462b      	mov	r3, r5
 800123c:	0099      	lsls	r1, r3, #2
 800123e:	4623      	mov	r3, r4
 8001240:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001244:	4623      	mov	r3, r4
 8001246:	0098      	lsls	r0, r3, #2
 8001248:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800124c:	f04f 0300 	mov.w	r3, #0
 8001250:	f7ff fa2a 	bl	80006a8 <__aeabi_uldivmod>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	f06f 0002 	mvn.w	r0, #2
 800125c:	f04f 31ff 	mov.w	r1, #4294967295
 8001260:	1a80      	subs	r0, r0, r2
 8001262:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
 8001266:	eb61 0303 	sbc.w	r3, r1, r3
 800126a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800126e:	4bb8      	ldr	r3, [pc, #736]	@ (8001550 <Set_Random_Motion_Values+0x85c>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	461a      	mov	r2, r3
 8001274:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001278:	4413      	add	r3, r2
 800127a:	461a      	mov	r2, r3
 800127c:	4bb4      	ldr	r3, [pc, #720]	@ (8001550 <Set_Random_Motion_Values+0x85c>)
 800127e:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001280:	f005 fc4e 	bl	8006b20 <rand>
 8001284:	4603      	mov	r3, r0
 8001286:	17da      	asrs	r2, r3, #31
 8001288:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 800128c:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 8001290:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001294:	2200      	movs	r2, #0
 8001296:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 800129a:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 800129e:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	@ 0x288
 80012a2:	462b      	mov	r3, r5
 80012a4:	e9d7 89a0 	ldrd	r8, r9, [r7, #640]	@ 0x280
 80012a8:	4642      	mov	r2, r8
 80012aa:	fb02 f203 	mul.w	r2, r2, r3
 80012ae:	464b      	mov	r3, r9
 80012b0:	4621      	mov	r1, r4
 80012b2:	fb01 f303 	mul.w	r3, r1, r3
 80012b6:	4413      	add	r3, r2
 80012b8:	4622      	mov	r2, r4
 80012ba:	4641      	mov	r1, r8
 80012bc:	fba2 1201 	umull	r1, r2, r2, r1
 80012c0:	f8c7 23a4 	str.w	r2, [r7, #932]	@ 0x3a4
 80012c4:	460a      	mov	r2, r1
 80012c6:	f8c7 23a0 	str.w	r2, [r7, #928]	@ 0x3a0
 80012ca:	f8d7 23a4 	ldr.w	r2, [r7, #932]	@ 0x3a4
 80012ce:	4413      	add	r3, r2
 80012d0:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 80012d4:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	@ 0x3a0
 80012d8:	4622      	mov	r2, r4
 80012da:	462b      	mov	r3, r5
 80012dc:	f04f 0000 	mov.w	r0, #0
 80012e0:	f04f 0100 	mov.w	r1, #0
 80012e4:	0099      	lsls	r1, r3, #2
 80012e6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80012ea:	0090      	lsls	r0, r2, #2
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4621      	mov	r1, r4
 80012f2:	1851      	adds	r1, r2, r1
 80012f4:	f8c7 1278 	str.w	r1, [r7, #632]	@ 0x278
 80012f8:	4629      	mov	r1, r5
 80012fa:	eb43 0101 	adc.w	r1, r3, r1
 80012fe:	f8c7 127c 	str.w	r1, [r7, #636]	@ 0x27c
 8001302:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001306:	f04f 0300 	mov.w	r3, #0
 800130a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 800130e:	f7ff f9cb 	bl	80006a8 <__aeabi_uldivmod>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	1cd1      	adds	r1, r2, #3
 8001318:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 800131c:	f143 0300 	adc.w	r3, r3, #0
 8001320:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001324:	4b8a      	ldr	r3, [pc, #552]	@ (8001550 <Set_Random_Motion_Values+0x85c>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	461a      	mov	r2, r3
 800132a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800132e:	4413      	add	r3, r2
 8001330:	461a      	mov	r2, r3
 8001332:	4b87      	ldr	r3, [pc, #540]	@ (8001550 <Set_Random_Motion_Values+0x85c>)
 8001334:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001336:	f005 fbf3 	bl	8006b20 <rand>
 800133a:	4603      	mov	r3, r0
 800133c:	17da      	asrs	r2, r3, #31
 800133e:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 8001342:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 8001346:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800134a:	2200      	movs	r2, #0
 800134c:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8001350:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 8001354:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	@ 0x270
 8001358:	462b      	mov	r3, r5
 800135a:	e9d7 899a 	ldrd	r8, r9, [r7, #616]	@ 0x268
 800135e:	4642      	mov	r2, r8
 8001360:	fb02 f203 	mul.w	r2, r2, r3
 8001364:	464b      	mov	r3, r9
 8001366:	4621      	mov	r1, r4
 8001368:	fb01 f303 	mul.w	r3, r1, r3
 800136c:	4413      	add	r3, r2
 800136e:	4622      	mov	r2, r4
 8001370:	4641      	mov	r1, r8
 8001372:	fba2 1201 	umull	r1, r2, r2, r1
 8001376:	f8c7 239c 	str.w	r2, [r7, #924]	@ 0x39c
 800137a:	460a      	mov	r2, r1
 800137c:	f8c7 2398 	str.w	r2, [r7, #920]	@ 0x398
 8001380:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 8001384:	4413      	add	r3, r2
 8001386:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 800138a:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	@ 0x398
 800138e:	4622      	mov	r2, r4
 8001390:	462b      	mov	r3, r5
 8001392:	1891      	adds	r1, r2, r2
 8001394:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001396:	415b      	adcs	r3, r3
 8001398:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800139a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800139e:	4621      	mov	r1, r4
 80013a0:	1851      	adds	r1, r2, r1
 80013a2:	f8c7 1260 	str.w	r1, [r7, #608]	@ 0x260
 80013a6:	4629      	mov	r1, r5
 80013a8:	eb43 0101 	adc.w	r1, r3, r1
 80013ac:	f8c7 1264 	str.w	r1, [r7, #612]	@ 0x264
 80013b0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80013b4:	f04f 0300 	mov.w	r3, #0
 80013b8:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
 80013bc:	f7ff f974 	bl	80006a8 <__aeabi_uldivmod>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 80013c8:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80013cc:	f143 0300 	adc.w	r3, r3, #0
 80013d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80013d4:	4b5f      	ldr	r3, [pc, #380]	@ (8001554 <Set_Random_Motion_Values+0x860>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001554 <Set_Random_Motion_Values+0x860>)
 80013e4:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80013e6:	f005 fb9b 	bl	8006b20 <rand>
 80013ea:	4603      	mov	r3, r0
 80013ec:	17da      	asrs	r2, r3, #31
 80013ee:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 80013f2:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 80013f6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80013fa:	2200      	movs	r2, #0
 80013fc:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8001400:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 8001404:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	@ 0x258
 8001408:	462b      	mov	r3, r5
 800140a:	e9d7 8994 	ldrd	r8, r9, [r7, #592]	@ 0x250
 800140e:	4642      	mov	r2, r8
 8001410:	fb02 f203 	mul.w	r2, r2, r3
 8001414:	464b      	mov	r3, r9
 8001416:	4621      	mov	r1, r4
 8001418:	fb01 f303 	mul.w	r3, r1, r3
 800141c:	4413      	add	r3, r2
 800141e:	4622      	mov	r2, r4
 8001420:	4641      	mov	r1, r8
 8001422:	fba2 1201 	umull	r1, r2, r2, r1
 8001426:	f8c7 2394 	str.w	r2, [r7, #916]	@ 0x394
 800142a:	460a      	mov	r2, r1
 800142c:	f8c7 2390 	str.w	r2, [r7, #912]	@ 0x390
 8001430:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 8001434:	4413      	add	r3, r2
 8001436:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 800143a:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	@ 0x390
 800143e:	4622      	mov	r2, r4
 8001440:	462b      	mov	r3, r5
 8001442:	f04f 0000 	mov.w	r0, #0
 8001446:	f04f 0100 	mov.w	r1, #0
 800144a:	0099      	lsls	r1, r3, #2
 800144c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001450:	0090      	lsls	r0, r2, #2
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4621      	mov	r1, r4
 8001458:	1851      	adds	r1, r2, r1
 800145a:	f8c7 1248 	str.w	r1, [r7, #584]	@ 0x248
 800145e:	4629      	mov	r1, r5
 8001460:	eb43 0101 	adc.w	r1, r3, r1
 8001464:	f8c7 124c 	str.w	r1, [r7, #588]	@ 0x24c
 8001468:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	@ 0x248
 8001474:	f7ff f918 	bl	80006a8 <__aeabi_uldivmod>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001480:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001482:	f143 0300 	adc.w	r3, r3, #0
 8001486:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001488:	4b32      	ldr	r3, [pc, #200]	@ (8001554 <Set_Random_Motion_Values+0x860>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	461a      	mov	r2, r3
 800148e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001490:	4413      	add	r3, r2
 8001492:	461a      	mov	r2, r3
 8001494:	4b2f      	ldr	r3, [pc, #188]	@ (8001554 <Set_Random_Motion_Values+0x860>)
 8001496:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001498:	f005 fb42 	bl	8006b20 <rand>
 800149c:	4603      	mov	r3, r0
 800149e:	17da      	asrs	r2, r3, #31
 80014a0:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 80014a4:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 80014a8:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80014ac:	2200      	movs	r2, #0
 80014ae:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 80014b2:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 80014b6:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	@ 0x240
 80014ba:	462b      	mov	r3, r5
 80014bc:	e9d7 898e 	ldrd	r8, r9, [r7, #568]	@ 0x238
 80014c0:	4642      	mov	r2, r8
 80014c2:	fb02 f203 	mul.w	r2, r2, r3
 80014c6:	464b      	mov	r3, r9
 80014c8:	4621      	mov	r1, r4
 80014ca:	fb01 f303 	mul.w	r3, r1, r3
 80014ce:	4413      	add	r3, r2
 80014d0:	4622      	mov	r2, r4
 80014d2:	4641      	mov	r1, r8
 80014d4:	fba2 1201 	umull	r1, r2, r2, r1
 80014d8:	f8c7 238c 	str.w	r2, [r7, #908]	@ 0x38c
 80014dc:	460a      	mov	r2, r1
 80014de:	f8c7 2388 	str.w	r2, [r7, #904]	@ 0x388
 80014e2:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 80014e6:	4413      	add	r3, r2
 80014e8:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 80014ec:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	@ 0x388
 80014f0:	4622      	mov	r2, r4
 80014f2:	462b      	mov	r3, r5
 80014f4:	f04f 0000 	mov.w	r0, #0
 80014f8:	f04f 0100 	mov.w	r1, #0
 80014fc:	00d9      	lsls	r1, r3, #3
 80014fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001502:	00d0      	lsls	r0, r2, #3
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4621      	mov	r1, r4
 800150a:	1a51      	subs	r1, r2, r1
 800150c:	f8c7 1230 	str.w	r1, [r7, #560]	@ 0x230
 8001510:	4629      	mov	r1, r5
 8001512:	eb63 0301 	sbc.w	r3, r3, r1
 8001516:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 800151a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800151e:	f04f 0300 	mov.w	r3, #0
 8001522:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 8001526:	f7ff f8bf 	bl	80006a8 <__aeabi_uldivmod>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001532:	6739      	str	r1, [r7, #112]	@ 0x70
 8001534:	f143 0300 	adc.w	r3, r3, #0
 8001538:	677b      	str	r3, [r7, #116]	@ 0x74
 800153a:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <Set_Random_Motion_Values+0x860>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	461a      	mov	r2, r3
 8001540:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	461a      	mov	r2, r3
 8001546:	4b03      	ldr	r3, [pc, #12]	@ (8001554 <Set_Random_Motion_Values+0x860>)
 8001548:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }

}
 800154a:	f000 bc37 	b.w	8001dbc <Set_Random_Motion_Values+0x10c8>
 800154e:	bf00      	nop
 8001550:	200000f8 	.word	0x200000f8
 8001554:	20000104 	.word	0x20000104
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001558:	f005 fae2 	bl	8006b20 <rand>
 800155c:	4603      	mov	r3, r0
 800155e:	17da      	asrs	r2, r3, #31
 8001560:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 8001564:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 8001568:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800156c:	2200      	movs	r2, #0
 800156e:	469a      	mov	sl, r3
 8001570:	4693      	mov	fp, r2
 8001572:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8001576:	460b      	mov	r3, r1
 8001578:	fb0a f203 	mul.w	r2, sl, r3
 800157c:	4603      	mov	r3, r0
 800157e:	fb03 f30b 	mul.w	r3, r3, fp
 8001582:	4413      	add	r3, r2
 8001584:	4602      	mov	r2, r0
 8001586:	fba2 450a 	umull	r4, r5, r2, sl
 800158a:	442b      	add	r3, r5
 800158c:	461d      	mov	r5, r3
 800158e:	4622      	mov	r2, r4
 8001590:	462b      	mov	r3, r5
 8001592:	1891      	adds	r1, r2, r2
 8001594:	6339      	str	r1, [r7, #48]	@ 0x30
 8001596:	415b      	adcs	r3, r3
 8001598:	637b      	str	r3, [r7, #52]	@ 0x34
 800159a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800159e:	1911      	adds	r1, r2, r4
 80015a0:	f8c7 1220 	str.w	r1, [r7, #544]	@ 0x220
 80015a4:	416b      	adcs	r3, r5
 80015a6:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 80015aa:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80015b6:	f7ff f877 	bl	80006a8 <__aeabi_uldivmod>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	f06f 0009 	mvn.w	r0, #9
 80015c2:	f04f 31ff 	mov.w	r1, #4294967295
 80015c6:	1a80      	subs	r0, r0, r2
 80015c8:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
 80015cc:	eb61 0303 	sbc.w	r3, r1, r3
 80015d0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80015d4:	4beb      	ldr	r3, [pc, #940]	@ (8001984 <Set_Random_Motion_Values+0xc90>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	461a      	mov	r2, r3
 80015da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80015de:	4413      	add	r3, r2
 80015e0:	461a      	mov	r2, r3
 80015e2:	4be8      	ldr	r3, [pc, #928]	@ (8001984 <Set_Random_Motion_Values+0xc90>)
 80015e4:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80015e6:	f005 fa9b 	bl	8006b20 <rand>
 80015ea:	4603      	mov	r3, r0
 80015ec:	17da      	asrs	r2, r3, #31
 80015ee:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 80015f2:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 80015f6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80015fa:	2200      	movs	r2, #0
 80015fc:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001600:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 8001604:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	@ 0x218
 8001608:	462b      	mov	r3, r5
 800160a:	e9d7 8984 	ldrd	r8, r9, [r7, #528]	@ 0x210
 800160e:	4642      	mov	r2, r8
 8001610:	fb02 f203 	mul.w	r2, r2, r3
 8001614:	464b      	mov	r3, r9
 8001616:	4621      	mov	r1, r4
 8001618:	fb01 f303 	mul.w	r3, r1, r3
 800161c:	4413      	add	r3, r2
 800161e:	4622      	mov	r2, r4
 8001620:	4641      	mov	r1, r8
 8001622:	fba2 1201 	umull	r1, r2, r2, r1
 8001626:	f8c7 2384 	str.w	r2, [r7, #900]	@ 0x384
 800162a:	460a      	mov	r2, r1
 800162c:	f8c7 2380 	str.w	r2, [r7, #896]	@ 0x380
 8001630:	f8d7 2384 	ldr.w	r2, [r7, #900]	@ 0x384
 8001634:	4413      	add	r3, r2
 8001636:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 800163a:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	@ 0x380
 800163e:	4622      	mov	r2, r4
 8001640:	462b      	mov	r3, r5
 8001642:	f04f 0000 	mov.w	r0, #0
 8001646:	f04f 0100 	mov.w	r1, #0
 800164a:	0099      	lsls	r1, r3, #2
 800164c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001650:	0090      	lsls	r0, r2, #2
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4621      	mov	r1, r4
 8001658:	1851      	adds	r1, r2, r1
 800165a:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
 800165e:	4629      	mov	r1, r5
 8001660:	eb43 0101 	adc.w	r1, r3, r1
 8001664:	f8c7 120c 	str.w	r1, [r7, #524]	@ 0x20c
 8001668:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 8001674:	f7ff f818 	bl	80006a8 <__aeabi_uldivmod>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	f112 010a 	adds.w	r1, r2, #10
 8001680:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 8001684:	f143 0300 	adc.w	r3, r3, #0
 8001688:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800168c:	4bbd      	ldr	r3, [pc, #756]	@ (8001984 <Set_Random_Motion_Values+0xc90>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	461a      	mov	r2, r3
 8001692:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001696:	4413      	add	r3, r2
 8001698:	461a      	mov	r2, r3
 800169a:	4bba      	ldr	r3, [pc, #744]	@ (8001984 <Set_Random_Motion_Values+0xc90>)
 800169c:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 800169e:	f005 fa3f 	bl	8006b20 <rand>
 80016a2:	4603      	mov	r3, r0
 80016a4:	17da      	asrs	r2, r3, #31
 80016a6:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 80016aa:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 80016ae:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80016b2:	2200      	movs	r2, #0
 80016b4:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 80016b8:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 80016bc:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	@ 0x200
 80016c0:	462b      	mov	r3, r5
 80016c2:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	@ 0x1f8
 80016c6:	4642      	mov	r2, r8
 80016c8:	fb02 f203 	mul.w	r2, r2, r3
 80016cc:	464b      	mov	r3, r9
 80016ce:	4621      	mov	r1, r4
 80016d0:	fb01 f303 	mul.w	r3, r1, r3
 80016d4:	4413      	add	r3, r2
 80016d6:	4622      	mov	r2, r4
 80016d8:	4641      	mov	r1, r8
 80016da:	fba2 1201 	umull	r1, r2, r2, r1
 80016de:	f8c7 237c 	str.w	r2, [r7, #892]	@ 0x37c
 80016e2:	460a      	mov	r2, r1
 80016e4:	f8c7 2378 	str.w	r2, [r7, #888]	@ 0x378
 80016e8:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 80016ec:	4413      	add	r3, r2
 80016ee:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 80016f2:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	@ 0x378
 80016f6:	4622      	mov	r2, r4
 80016f8:	462b      	mov	r3, r5
 80016fa:	f04f 0000 	mov.w	r0, #0
 80016fe:	f04f 0100 	mov.w	r1, #0
 8001702:	00d9      	lsls	r1, r3, #3
 8001704:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001708:	00d0      	lsls	r0, r2, #3
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4621      	mov	r1, r4
 8001710:	1a51      	subs	r1, r2, r1
 8001712:	f8c7 11f0 	str.w	r1, [r7, #496]	@ 0x1f0
 8001716:	4629      	mov	r1, r5
 8001718:	eb63 0301 	sbc.w	r3, r3, r1
 800171c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8001720:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 800172c:	f7fe ffbc 	bl	80006a8 <__aeabi_uldivmod>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	f06f 0009 	mvn.w	r0, #9
 8001738:	f04f 31ff 	mov.w	r1, #4294967295
 800173c:	1a80      	subs	r0, r0, r2
 800173e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
 8001742:	eb61 0303 	sbc.w	r3, r1, r3
 8001746:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800174a:	4b8e      	ldr	r3, [pc, #568]	@ (8001984 <Set_Random_Motion_Values+0xc90>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	461a      	mov	r2, r3
 8001750:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001754:	4413      	add	r3, r2
 8001756:	461a      	mov	r2, r3
 8001758:	4b8a      	ldr	r3, [pc, #552]	@ (8001984 <Set_Random_Motion_Values+0xc90>)
 800175a:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 800175c:	f005 f9e0 	bl	8006b20 <rand>
 8001760:	4603      	mov	r3, r0
 8001762:	17da      	asrs	r2, r3, #31
 8001764:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001768:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 800176c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001770:	2200      	movs	r2, #0
 8001772:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001776:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 800177a:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	@ 0x1e8
 800177e:	462b      	mov	r3, r5
 8001780:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	@ 0x1e0
 8001784:	4642      	mov	r2, r8
 8001786:	fb02 f203 	mul.w	r2, r2, r3
 800178a:	464b      	mov	r3, r9
 800178c:	4621      	mov	r1, r4
 800178e:	fb01 f303 	mul.w	r3, r1, r3
 8001792:	4413      	add	r3, r2
 8001794:	4622      	mov	r2, r4
 8001796:	4641      	mov	r1, r8
 8001798:	fba2 1201 	umull	r1, r2, r2, r1
 800179c:	f8c7 2374 	str.w	r2, [r7, #884]	@ 0x374
 80017a0:	460a      	mov	r2, r1
 80017a2:	f8c7 2370 	str.w	r2, [r7, #880]	@ 0x370
 80017a6:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 80017aa:	4413      	add	r3, r2
 80017ac:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 80017b0:	e9d7 12dc 	ldrd	r1, r2, [r7, #880]	@ 0x370
 80017b4:	460b      	mov	r3, r1
 80017b6:	18db      	adds	r3, r3, r3
 80017b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017ba:	4613      	mov	r3, r2
 80017bc:	eb42 0303 	adc.w	r3, r2, r3
 80017c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80017c6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	f7fe ff6b 	bl	80006a8 <__aeabi_uldivmod>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 80017da:	f04f 31ff 	mov.w	r1, #4294967295
 80017de:	1a80      	subs	r0, r0, r2
 80017e0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
 80017e4:	eb61 0303 	sbc.w	r3, r1, r3
 80017e8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80017ec:	4b66      	ldr	r3, [pc, #408]	@ (8001988 <Set_Random_Motion_Values+0xc94>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80017f6:	4413      	add	r3, r2
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b63      	ldr	r3, [pc, #396]	@ (8001988 <Set_Random_Motion_Values+0xc94>)
 80017fc:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 80017fe:	f005 f98f 	bl	8006b20 <rand>
 8001802:	4603      	mov	r3, r0
 8001804:	17da      	asrs	r2, r3, #31
 8001806:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 800180a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800180e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001812:	2200      	movs	r2, #0
 8001814:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001818:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 800181c:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	@ 0x1d8
 8001820:	462b      	mov	r3, r5
 8001822:	e9d7 8974 	ldrd	r8, r9, [r7, #464]	@ 0x1d0
 8001826:	4642      	mov	r2, r8
 8001828:	fb02 f203 	mul.w	r2, r2, r3
 800182c:	464b      	mov	r3, r9
 800182e:	4621      	mov	r1, r4
 8001830:	fb01 f303 	mul.w	r3, r1, r3
 8001834:	4413      	add	r3, r2
 8001836:	4622      	mov	r2, r4
 8001838:	4641      	mov	r1, r8
 800183a:	fba2 1201 	umull	r1, r2, r2, r1
 800183e:	f8c7 236c 	str.w	r2, [r7, #876]	@ 0x36c
 8001842:	460a      	mov	r2, r1
 8001844:	f8c7 2368 	str.w	r2, [r7, #872]	@ 0x368
 8001848:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 800184c:	4413      	add	r3, r2
 800184e:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
 8001852:	f04f 0000 	mov.w	r0, #0
 8001856:	f04f 0100 	mov.w	r1, #0
 800185a:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	@ 0x368
 800185e:	462b      	mov	r3, r5
 8001860:	0099      	lsls	r1, r3, #2
 8001862:	4623      	mov	r3, r4
 8001864:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001868:	4623      	mov	r3, r4
 800186a:	0098      	lsls	r0, r3, #2
 800186c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	f7fe ff18 	bl	80006a8 <__aeabi_uldivmod>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001880:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 8001884:	f143 0300 	adc.w	r3, r3, #0
 8001888:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800188c:	4b3e      	ldr	r3, [pc, #248]	@ (8001988 <Set_Random_Motion_Values+0xc94>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	461a      	mov	r2, r3
 8001892:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001896:	4413      	add	r3, r2
 8001898:	461a      	mov	r2, r3
 800189a:	4b3b      	ldr	r3, [pc, #236]	@ (8001988 <Set_Random_Motion_Values+0xc94>)
 800189c:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 800189e:	f005 f93f 	bl	8006b20 <rand>
 80018a2:	4603      	mov	r3, r0
 80018a4:	17da      	asrs	r2, r3, #31
 80018a6:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80018aa:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 80018ae:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80018b2:	2200      	movs	r2, #0
 80018b4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80018b8:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 80018bc:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	@ 0x1c8
 80018c0:	462b      	mov	r3, r5
 80018c2:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 80018c6:	4642      	mov	r2, r8
 80018c8:	fb02 f203 	mul.w	r2, r2, r3
 80018cc:	464b      	mov	r3, r9
 80018ce:	4621      	mov	r1, r4
 80018d0:	fb01 f303 	mul.w	r3, r1, r3
 80018d4:	4413      	add	r3, r2
 80018d6:	4622      	mov	r2, r4
 80018d8:	4641      	mov	r1, r8
 80018da:	fba2 1201 	umull	r1, r2, r2, r1
 80018de:	f8c7 2364 	str.w	r2, [r7, #868]	@ 0x364
 80018e2:	460a      	mov	r2, r1
 80018e4:	f8c7 2360 	str.w	r2, [r7, #864]	@ 0x360
 80018e8:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 80018ec:	4413      	add	r3, r2
 80018ee:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 80018f2:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	@ 0x360
 80018f6:	4622      	mov	r2, r4
 80018f8:	462b      	mov	r3, r5
 80018fa:	1891      	adds	r1, r2, r2
 80018fc:	6239      	str	r1, [r7, #32]
 80018fe:	415b      	adcs	r3, r3
 8001900:	627b      	str	r3, [r7, #36]	@ 0x24
 8001902:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001906:	4621      	mov	r1, r4
 8001908:	1851      	adds	r1, r2, r1
 800190a:	61b9      	str	r1, [r7, #24]
 800190c:	4629      	mov	r1, r5
 800190e:	eb43 0101 	adc.w	r1, r3, r1
 8001912:	61f9      	str	r1, [r7, #28]
 8001914:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001918:	460b      	mov	r3, r1
 800191a:	18db      	adds	r3, r3, r3
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	4613      	mov	r3, r2
 8001920:	eb42 0303 	adc.w	r3, r2, r3
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800192a:	4618      	mov	r0, r3
 800192c:	4621      	mov	r1, r4
 800192e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	f7fe feb7 	bl	80006a8 <__aeabi_uldivmod>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 8001942:	f04f 31ff 	mov.w	r1, #4294967295
 8001946:	1a80      	subs	r0, r0, r2
 8001948:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
 800194c:	eb61 0303 	sbc.w	r3, r1, r3
 8001950:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001954:	4b0c      	ldr	r3, [pc, #48]	@ (8001988 <Set_Random_Motion_Values+0xc94>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	461a      	mov	r2, r3
 800195a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800195e:	4413      	add	r3, r2
 8001960:	461a      	mov	r2, r3
 8001962:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <Set_Random_Motion_Values+0xc94>)
 8001964:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001966:	f005 f8db 	bl	8006b20 <rand>
 800196a:	4603      	mov	r3, r0
 800196c:	17da      	asrs	r2, r3, #31
 800196e:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8001972:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001976:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800197a:	2200      	movs	r2, #0
 800197c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8001980:	e004      	b.n	800198c <Set_Random_Motion_Values+0xc98>
 8001982:	bf00      	nop
 8001984:	200000e0 	.word	0x200000e0
 8001988:	200000ec 	.word	0x200000ec
 800198c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8001990:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	@ 0x1b8
 8001994:	462b      	mov	r3, r5
 8001996:	e9d7 896c 	ldrd	r8, r9, [r7, #432]	@ 0x1b0
 800199a:	4642      	mov	r2, r8
 800199c:	fb02 f203 	mul.w	r2, r2, r3
 80019a0:	464b      	mov	r3, r9
 80019a2:	4621      	mov	r1, r4
 80019a4:	fb01 f303 	mul.w	r3, r1, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	4622      	mov	r2, r4
 80019ac:	4641      	mov	r1, r8
 80019ae:	fba2 1201 	umull	r1, r2, r2, r1
 80019b2:	f8c7 235c 	str.w	r2, [r7, #860]	@ 0x35c
 80019b6:	460a      	mov	r2, r1
 80019b8:	f8c7 2358 	str.w	r2, [r7, #856]	@ 0x358
 80019bc:	f8d7 235c 	ldr.w	r2, [r7, #860]	@ 0x35c
 80019c0:	4413      	add	r3, r2
 80019c2:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 80019c6:	e9d7 45d6 	ldrd	r4, r5, [r7, #856]	@ 0x358
 80019ca:	4622      	mov	r2, r4
 80019cc:	462b      	mov	r3, r5
 80019ce:	f04f 0000 	mov.w	r0, #0
 80019d2:	f04f 0100 	mov.w	r1, #0
 80019d6:	00d9      	lsls	r1, r3, #3
 80019d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019dc:	00d0      	lsls	r0, r2, #3
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4621      	mov	r1, r4
 80019e4:	1a51      	subs	r1, r2, r1
 80019e6:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
 80019ea:	4629      	mov	r1, r5
 80019ec:	eb63 0301 	sbc.w	r3, r3, r1
 80019f0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80019f4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 8001a00:	f7fe fe52 	bl	80006a8 <__aeabi_uldivmod>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	f06f 0002 	mvn.w	r0, #2
 8001a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a10:	1a80      	subs	r0, r0, r2
 8001a12:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
 8001a16:	eb61 0303 	sbc.w	r3, r1, r3
 8001a1a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001a1e:	4bea      	ldr	r3, [pc, #936]	@ (8001dc8 <Set_Random_Motion_Values+0x10d4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001a28:	4413      	add	r3, r2
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4be6      	ldr	r3, [pc, #920]	@ (8001dc8 <Set_Random_Motion_Values+0x10d4>)
 8001a2e:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 8001a30:	f005 f876 	bl	8006b20 <rand>
 8001a34:	4603      	mov	r3, r0
 8001a36:	17da      	asrs	r2, r3, #31
 8001a38:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001a3c:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 8001a40:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001a44:	2200      	movs	r2, #0
 8001a46:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8001a4a:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001a4e:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	@ 0x1a0
 8001a52:	462b      	mov	r3, r5
 8001a54:	e9d7 8966 	ldrd	r8, r9, [r7, #408]	@ 0x198
 8001a58:	4642      	mov	r2, r8
 8001a5a:	fb02 f203 	mul.w	r2, r2, r3
 8001a5e:	464b      	mov	r3, r9
 8001a60:	4621      	mov	r1, r4
 8001a62:	fb01 f303 	mul.w	r3, r1, r3
 8001a66:	4413      	add	r3, r2
 8001a68:	4622      	mov	r2, r4
 8001a6a:	4641      	mov	r1, r8
 8001a6c:	fba2 1201 	umull	r1, r2, r2, r1
 8001a70:	f8c7 2354 	str.w	r2, [r7, #852]	@ 0x354
 8001a74:	460a      	mov	r2, r1
 8001a76:	f8c7 2350 	str.w	r2, [r7, #848]	@ 0x350
 8001a7a:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 8001a7e:	4413      	add	r3, r2
 8001a80:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8001a84:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	@ 0x350
 8001a88:	4622      	mov	r2, r4
 8001a8a:	462b      	mov	r3, r5
 8001a8c:	f04f 0000 	mov.w	r0, #0
 8001a90:	f04f 0100 	mov.w	r1, #0
 8001a94:	00d9      	lsls	r1, r3, #3
 8001a96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a9a:	00d0      	lsls	r0, r2, #3
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4621      	mov	r1, r4
 8001aa2:	1851      	adds	r1, r2, r1
 8001aa4:	f8c7 1190 	str.w	r1, [r7, #400]	@ 0x190
 8001aa8:	4629      	mov	r1, r5
 8001aaa:	eb43 0101 	adc.w	r1, r3, r1
 8001aae:	f8c7 1194 	str.w	r1, [r7, #404]	@ 0x194
 8001ab2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8001abe:	f7fe fdf3 	bl	80006a8 <__aeabi_uldivmod>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	1cd1      	adds	r1, r2, #3
 8001ac8:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 8001acc:	f143 0300 	adc.w	r3, r3, #0
 8001ad0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001ad4:	4bbc      	ldr	r3, [pc, #752]	@ (8001dc8 <Set_Random_Motion_Values+0x10d4>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001ade:	4413      	add	r3, r2
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4bb9      	ldr	r3, [pc, #740]	@ (8001dc8 <Set_Random_Motion_Values+0x10d4>)
 8001ae4:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001ae6:	f005 f81b 	bl	8006b20 <rand>
 8001aea:	4603      	mov	r3, r0
 8001aec:	17da      	asrs	r2, r3, #31
 8001aee:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001af2:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 8001af6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001afa:	2200      	movs	r2, #0
 8001afc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001b00:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8001b04:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	@ 0x188
 8001b08:	462b      	mov	r3, r5
 8001b0a:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	@ 0x180
 8001b0e:	4642      	mov	r2, r8
 8001b10:	fb02 f203 	mul.w	r2, r2, r3
 8001b14:	464b      	mov	r3, r9
 8001b16:	4621      	mov	r1, r4
 8001b18:	fb01 f303 	mul.w	r3, r1, r3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	4622      	mov	r2, r4
 8001b20:	4641      	mov	r1, r8
 8001b22:	fba2 1201 	umull	r1, r2, r2, r1
 8001b26:	f8c7 234c 	str.w	r2, [r7, #844]	@ 0x34c
 8001b2a:	460a      	mov	r2, r1
 8001b2c:	f8c7 2348 	str.w	r2, [r7, #840]	@ 0x348
 8001b30:	f8d7 234c 	ldr.w	r2, [r7, #844]	@ 0x34c
 8001b34:	4413      	add	r3, r2
 8001b36:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 8001b3a:	e9d7 45d2 	ldrd	r4, r5, [r7, #840]	@ 0x348
 8001b3e:	4622      	mov	r2, r4
 8001b40:	462b      	mov	r3, r5
 8001b42:	1891      	adds	r1, r2, r2
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	415b      	adcs	r3, r3
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b4e:	4621      	mov	r1, r4
 8001b50:	1851      	adds	r1, r2, r1
 8001b52:	f8c7 1178 	str.w	r1, [r7, #376]	@ 0x178
 8001b56:	4629      	mov	r1, r5
 8001b58:	eb43 0101 	adc.w	r1, r3, r1
 8001b5c:	f8c7 117c 	str.w	r1, [r7, #380]	@ 0x17c
 8001b60:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 8001b6c:	f7fe fd9c 	bl	80006a8 <__aeabi_uldivmod>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	f06f 0002 	mvn.w	r0, #2
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295
 8001b7c:	1a80      	subs	r0, r0, r2
 8001b7e:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
 8001b82:	eb61 0303 	sbc.w	r3, r1, r3
 8001b86:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001b8a:	4b8f      	ldr	r3, [pc, #572]	@ (8001dc8 <Set_Random_Motion_Values+0x10d4>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001b94:	4413      	add	r3, r2
 8001b96:	461a      	mov	r2, r3
 8001b98:	4b8b      	ldr	r3, [pc, #556]	@ (8001dc8 <Set_Random_Motion_Values+0x10d4>)
 8001b9a:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001b9c:	f004 ffc0 	bl	8006b20 <rand>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	17da      	asrs	r2, r3, #31
 8001ba4:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8001ba8:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8001bac:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8001bb6:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8001bba:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	@ 0x170
 8001bbe:	462b      	mov	r3, r5
 8001bc0:	e9d7 895a 	ldrd	r8, r9, [r7, #360]	@ 0x168
 8001bc4:	4642      	mov	r2, r8
 8001bc6:	fb02 f203 	mul.w	r2, r2, r3
 8001bca:	464b      	mov	r3, r9
 8001bcc:	4621      	mov	r1, r4
 8001bce:	fb01 f303 	mul.w	r3, r1, r3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4622      	mov	r2, r4
 8001bd6:	4641      	mov	r1, r8
 8001bd8:	fba2 1201 	umull	r1, r2, r2, r1
 8001bdc:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 8001be0:	460a      	mov	r2, r1
 8001be2:	f8c7 2340 	str.w	r2, [r7, #832]	@ 0x340
 8001be6:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 8001bea:	4413      	add	r3, r2
 8001bec:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 8001bf0:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	@ 0x340
 8001bf4:	4622      	mov	r2, r4
 8001bf6:	462b      	mov	r3, r5
 8001bf8:	f04f 0000 	mov.w	r0, #0
 8001bfc:	f04f 0100 	mov.w	r1, #0
 8001c00:	00d9      	lsls	r1, r3, #3
 8001c02:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c06:	00d0      	lsls	r0, r2, #3
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4621      	mov	r1, r4
 8001c0e:	1a51      	subs	r1, r2, r1
 8001c10:	f8c7 1160 	str.w	r1, [r7, #352]	@ 0x160
 8001c14:	4629      	mov	r1, r5
 8001c16:	eb63 0301 	sbc.w	r3, r3, r1
 8001c1a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001c1e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 8001c2a:	f7fe fd3d 	bl	80006a8 <__aeabi_uldivmod>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	f112 01c8 	adds.w	r1, r2, #200	@ 0xc8
 8001c36:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 8001c3a:	f143 0300 	adc.w	r3, r3, #0
 8001c3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001c42:	4b62      	ldr	r3, [pc, #392]	@ (8001dcc <Set_Random_Motion_Values+0x10d8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c4c:	4413      	add	r3, r2
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4b5e      	ldr	r3, [pc, #376]	@ (8001dcc <Set_Random_Motion_Values+0x10d8>)
 8001c52:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001c54:	f004 ff64 	bl	8006b20 <rand>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	17da      	asrs	r2, r3, #31
 8001c5c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001c60:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8001c64:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001c6e:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8001c72:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 8001c76:	462b      	mov	r3, r5
 8001c78:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	@ 0x150
 8001c7c:	4642      	mov	r2, r8
 8001c7e:	fb02 f203 	mul.w	r2, r2, r3
 8001c82:	464b      	mov	r3, r9
 8001c84:	4621      	mov	r1, r4
 8001c86:	fb01 f303 	mul.w	r3, r1, r3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	4622      	mov	r2, r4
 8001c8e:	4641      	mov	r1, r8
 8001c90:	fba2 1201 	umull	r1, r2, r2, r1
 8001c94:	f8c7 233c 	str.w	r2, [r7, #828]	@ 0x33c
 8001c98:	460a      	mov	r2, r1
 8001c9a:	f8c7 2338 	str.w	r2, [r7, #824]	@ 0x338
 8001c9e:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001ca8:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	@ 0x338
 8001cac:	4622      	mov	r2, r4
 8001cae:	462b      	mov	r3, r5
 8001cb0:	1891      	adds	r1, r2, r2
 8001cb2:	6039      	str	r1, [r7, #0]
 8001cb4:	415b      	adcs	r3, r3
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cbc:	4621      	mov	r1, r4
 8001cbe:	1851      	adds	r1, r2, r1
 8001cc0:	f8c7 1148 	str.w	r1, [r7, #328]	@ 0x148
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	eb43 0101 	adc.w	r1, r3, r1
 8001cca:	f8c7 114c 	str.w	r1, [r7, #332]	@ 0x14c
 8001cce:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8001cda:	f7fe fce5 	bl	80006a8 <__aeabi_uldivmod>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	f112 0196 	adds.w	r1, r2, #150	@ 0x96
 8001ce6:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 8001cea:	f143 0300 	adc.w	r3, r3, #0
 8001cee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001cf2:	4b36      	ldr	r3, [pc, #216]	@ (8001dcc <Set_Random_Motion_Values+0x10d8>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b32      	ldr	r3, [pc, #200]	@ (8001dcc <Set_Random_Motion_Values+0x10d8>)
 8001d02:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001d04:	f004 ff0c 	bl	8006b20 <rand>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	17da      	asrs	r2, r3, #31
 8001d0c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8001d10:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 8001d14:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001d1e:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8001d22:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8001d26:	462b      	mov	r3, r5
 8001d28:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 8001d2c:	4642      	mov	r2, r8
 8001d2e:	fb02 f203 	mul.w	r2, r2, r3
 8001d32:	464b      	mov	r3, r9
 8001d34:	4621      	mov	r1, r4
 8001d36:	fb01 f303 	mul.w	r3, r1, r3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	4622      	mov	r2, r4
 8001d3e:	4641      	mov	r1, r8
 8001d40:	fba2 1201 	umull	r1, r2, r2, r1
 8001d44:	f8c7 2334 	str.w	r2, [r7, #820]	@ 0x334
 8001d48:	460a      	mov	r2, r1
 8001d4a:	f8c7 2330 	str.w	r2, [r7, #816]	@ 0x330
 8001d4e:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8001d52:	4413      	add	r3, r2
 8001d54:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8001d58:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	@ 0x330
 8001d5c:	4622      	mov	r2, r4
 8001d5e:	462b      	mov	r3, r5
 8001d60:	f04f 0000 	mov.w	r0, #0
 8001d64:	f04f 0100 	mov.w	r1, #0
 8001d68:	0099      	lsls	r1, r3, #2
 8001d6a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001d6e:	0090      	lsls	r0, r2, #2
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4621      	mov	r1, r4
 8001d76:	1851      	adds	r1, r2, r1
 8001d78:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8001d7c:	4629      	mov	r1, r5
 8001d7e:	eb43 0101 	adc.w	r1, r3, r1
 8001d82:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8001d86:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8001d92:	f7fe fc89 	bl	80006a8 <__aeabi_uldivmod>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	f112 010a 	adds.w	r1, r2, #10
 8001d9e:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8001da2:	f143 0300 	adc.w	r3, r3, #0
 8001da6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001daa:	4b08      	ldr	r3, [pc, #32]	@ (8001dcc <Set_Random_Motion_Values+0x10d8>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	461a      	mov	r2, r3
 8001db0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001db4:	4413      	add	r3, r2
 8001db6:	461a      	mov	r2, r3
 8001db8:	4b04      	ldr	r3, [pc, #16]	@ (8001dcc <Set_Random_Motion_Values+0x10d8>)
 8001dba:	609a      	str	r2, [r3, #8]
}
 8001dbc:	bf00      	nop
 8001dbe:	f507 777a 	add.w	r7, r7, #1000	@ 0x3e8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dc8:	200000f8 	.word	0x200000f8
 8001dcc:	20000104 	.word	0x20000104

08001dd0 <Reset_Motion_Values>:
 * @brief  Reset values for all motion sensor data
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 8001dd4:	4b6e      	ldr	r3, [pc, #440]	@ (8001f90 <Reset_Motion_Values+0x1c0>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b6e      	ldr	r3, [pc, #440]	@ (8001f94 <Reset_Motion_Values+0x1c4>)
 8001dda:	fb83 1302 	smull	r1, r3, r3, r2
 8001dde:	11d9      	asrs	r1, r3, #7
 8001de0:	17d3      	asrs	r3, r2, #31
 8001de2:	1acb      	subs	r3, r1, r3
 8001de4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001de8:	fb01 f303 	mul.w	r3, r1, r3
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d103      	bne.n	8001dfa <Reset_Motion_Values+0x2a>
 8001df2:	4b67      	ldr	r3, [pc, #412]	@ (8001f90 <Reset_Motion_Values+0x1c0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	425b      	negs	r3, r3
 8001df8:	e000      	b.n	8001dfc <Reset_Motion_Values+0x2c>
 8001dfa:	230a      	movs	r3, #10
 8001dfc:	4a64      	ldr	r2, [pc, #400]	@ (8001f90 <Reset_Motion_Values+0x1c0>)
 8001dfe:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 8001e00:	4b63      	ldr	r3, [pc, #396]	@ (8001f90 <Reset_Motion_Values+0x1c0>)
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	4b63      	ldr	r3, [pc, #396]	@ (8001f94 <Reset_Motion_Values+0x1c4>)
 8001e06:	fb83 1302 	smull	r1, r3, r3, r2
 8001e0a:	11d9      	asrs	r1, r3, #7
 8001e0c:	17d3      	asrs	r3, r2, #31
 8001e0e:	1acb      	subs	r3, r1, r3
 8001e10:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001e14:	fb01 f303 	mul.w	r3, r1, r3
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d103      	bne.n	8001e26 <Reset_Motion_Values+0x56>
 8001e1e:	4b5c      	ldr	r3, [pc, #368]	@ (8001f90 <Reset_Motion_Values+0x1c0>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	425b      	negs	r3, r3
 8001e24:	e001      	b.n	8001e2a <Reset_Motion_Values+0x5a>
 8001e26:	f06f 0309 	mvn.w	r3, #9
 8001e2a:	4a59      	ldr	r2, [pc, #356]	@ (8001f90 <Reset_Motion_Values+0x1c0>)
 8001e2c:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 8001e2e:	4b58      	ldr	r3, [pc, #352]	@ (8001f90 <Reset_Motion_Values+0x1c0>)
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	4b58      	ldr	r3, [pc, #352]	@ (8001f94 <Reset_Motion_Values+0x1c4>)
 8001e34:	fb83 1302 	smull	r1, r3, r3, r2
 8001e38:	11d9      	asrs	r1, r3, #7
 8001e3a:	17d3      	asrs	r3, r2, #31
 8001e3c:	1acb      	subs	r3, r1, r3
 8001e3e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001e42:	fb01 f303 	mul.w	r3, r1, r3
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d103      	bne.n	8001e54 <Reset_Motion_Values+0x84>
 8001e4c:	4b50      	ldr	r3, [pc, #320]	@ (8001f90 <Reset_Motion_Values+0x1c0>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	425b      	negs	r3, r3
 8001e52:	e000      	b.n	8001e56 <Reset_Motion_Values+0x86>
 8001e54:	230a      	movs	r3, #10
 8001e56:	4a4e      	ldr	r2, [pc, #312]	@ (8001f90 <Reset_Motion_Values+0x1c0>)
 8001e58:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 8001e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8001f98 <Reset_Motion_Values+0x1c8>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	4b4d      	ldr	r3, [pc, #308]	@ (8001f94 <Reset_Motion_Values+0x1c4>)
 8001e60:	fb83 1302 	smull	r1, r3, r3, r2
 8001e64:	11d9      	asrs	r1, r3, #7
 8001e66:	17d3      	asrs	r3, r2, #31
 8001e68:	1acb      	subs	r3, r1, r3
 8001e6a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001e6e:	fb01 f303 	mul.w	r3, r1, r3
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d103      	bne.n	8001e80 <Reset_Motion_Values+0xb0>
 8001e78:	4b47      	ldr	r3, [pc, #284]	@ (8001f98 <Reset_Motion_Values+0x1c8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	425b      	negs	r3, r3
 8001e7e:	e000      	b.n	8001e82 <Reset_Motion_Values+0xb2>
 8001e80:	2364      	movs	r3, #100	@ 0x64
 8001e82:	4a45      	ldr	r2, [pc, #276]	@ (8001f98 <Reset_Motion_Values+0x1c8>)
 8001e84:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 8001e86:	4b44      	ldr	r3, [pc, #272]	@ (8001f98 <Reset_Motion_Values+0x1c8>)
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	4b42      	ldr	r3, [pc, #264]	@ (8001f94 <Reset_Motion_Values+0x1c4>)
 8001e8c:	fb83 1302 	smull	r1, r3, r3, r2
 8001e90:	11d9      	asrs	r1, r3, #7
 8001e92:	17d3      	asrs	r3, r2, #31
 8001e94:	1acb      	subs	r3, r1, r3
 8001e96:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001e9a:	fb01 f303 	mul.w	r3, r1, r3
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d103      	bne.n	8001eac <Reset_Motion_Values+0xdc>
 8001ea4:	4b3c      	ldr	r3, [pc, #240]	@ (8001f98 <Reset_Motion_Values+0x1c8>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	e001      	b.n	8001eb0 <Reset_Motion_Values+0xe0>
 8001eac:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001eb0:	4a39      	ldr	r2, [pc, #228]	@ (8001f98 <Reset_Motion_Values+0x1c8>)
 8001eb2:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 8001eb4:	4b38      	ldr	r3, [pc, #224]	@ (8001f98 <Reset_Motion_Values+0x1c8>)
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	4b36      	ldr	r3, [pc, #216]	@ (8001f94 <Reset_Motion_Values+0x1c4>)
 8001eba:	fb83 1302 	smull	r1, r3, r3, r2
 8001ebe:	11d9      	asrs	r1, r3, #7
 8001ec0:	17d3      	asrs	r3, r2, #31
 8001ec2:	1acb      	subs	r3, r1, r3
 8001ec4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001ec8:	fb01 f303 	mul.w	r3, r1, r3
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d103      	bne.n	8001eda <Reset_Motion_Values+0x10a>
 8001ed2:	4b31      	ldr	r3, [pc, #196]	@ (8001f98 <Reset_Motion_Values+0x1c8>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	425b      	negs	r3, r3
 8001ed8:	e000      	b.n	8001edc <Reset_Motion_Values+0x10c>
 8001eda:	2364      	movs	r3, #100	@ 0x64
 8001edc:	4a2e      	ldr	r2, [pc, #184]	@ (8001f98 <Reset_Motion_Values+0x1c8>)
 8001ede:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 8001ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8001f98 <Reset_Motion_Values+0x1c8>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f94 <Reset_Motion_Values+0x1c4>)
 8001ee6:	fb83 1302 	smull	r1, r3, r3, r2
 8001eea:	11d9      	asrs	r1, r3, #7
 8001eec:	17d3      	asrs	r3, r2, #31
 8001eee:	1acb      	subs	r3, r1, r3
 8001ef0:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001ef4:	fb01 f303 	mul.w	r3, r1, r3
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d103      	bne.n	8001f06 <Reset_Motion_Values+0x136>
 8001efe:	4b27      	ldr	r3, [pc, #156]	@ (8001f9c <Reset_Motion_Values+0x1cc>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	425b      	negs	r3, r3
 8001f04:	e000      	b.n	8001f08 <Reset_Motion_Values+0x138>
 8001f06:	2303      	movs	r3, #3
 8001f08:	4a24      	ldr	r2, [pc, #144]	@ (8001f9c <Reset_Motion_Values+0x1cc>)
 8001f0a:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8001f0c:	4b22      	ldr	r3, [pc, #136]	@ (8001f98 <Reset_Motion_Values+0x1c8>)
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	4b20      	ldr	r3, [pc, #128]	@ (8001f94 <Reset_Motion_Values+0x1c4>)
 8001f12:	fb83 1302 	smull	r1, r3, r3, r2
 8001f16:	11d9      	asrs	r1, r3, #7
 8001f18:	17d3      	asrs	r3, r2, #31
 8001f1a:	1acb      	subs	r3, r1, r3
 8001f1c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001f20:	fb01 f303 	mul.w	r3, r1, r3
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d103      	bne.n	8001f32 <Reset_Motion_Values+0x162>
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f9c <Reset_Motion_Values+0x1cc>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	425b      	negs	r3, r3
 8001f30:	e001      	b.n	8001f36 <Reset_Motion_Values+0x166>
 8001f32:	f06f 0302 	mvn.w	r3, #2
 8001f36:	4a19      	ldr	r2, [pc, #100]	@ (8001f9c <Reset_Motion_Values+0x1cc>)
 8001f38:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 8001f3a:	4b17      	ldr	r3, [pc, #92]	@ (8001f98 <Reset_Motion_Values+0x1c8>)
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	4b15      	ldr	r3, [pc, #84]	@ (8001f94 <Reset_Motion_Values+0x1c4>)
 8001f40:	fb83 1302 	smull	r1, r3, r3, r2
 8001f44:	11d9      	asrs	r1, r3, #7
 8001f46:	17d3      	asrs	r3, r2, #31
 8001f48:	1acb      	subs	r3, r1, r3
 8001f4a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001f4e:	fb01 f303 	mul.w	r3, r1, r3
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d103      	bne.n	8001f60 <Reset_Motion_Values+0x190>
 8001f58:	4b10      	ldr	r3, [pc, #64]	@ (8001f9c <Reset_Motion_Values+0x1cc>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	425b      	negs	r3, r3
 8001f5e:	e000      	b.n	8001f62 <Reset_Motion_Values+0x192>
 8001f60:	2303      	movs	r3, #3
 8001f62:	4a0e      	ldr	r2, [pc, #56]	@ (8001f9c <Reset_Motion_Values+0x1cc>)
 8001f64:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 8001f66:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa0 <Reset_Motion_Values+0x1d0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	425b      	negs	r3, r3
 8001f6c:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa0 <Reset_Motion_Values+0x1d0>)
 8001f6e:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 8001f70:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa0 <Reset_Motion_Values+0x1d0>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	425b      	negs	r3, r3
 8001f76:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa0 <Reset_Motion_Values+0x1d0>)
 8001f78:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 8001f7a:	4b09      	ldr	r3, [pc, #36]	@ (8001fa0 <Reset_Motion_Values+0x1d0>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	425b      	negs	r3, r3
 8001f80:	4a07      	ldr	r2, [pc, #28]	@ (8001fa0 <Reset_Motion_Values+0x1d0>)
 8001f82:	6093      	str	r3, [r2, #8]
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	200000e0 	.word	0x200000e0
 8001f94:	10624dd3 	.word	0x10624dd3
 8001f98:	200000ec 	.word	0x200000ec
 8001f9c:	200000f8 	.word	0x200000f8
 8001fa0:	20000104 	.word	0x20000104

08001fa4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 8001fae:	4b04      	ldr	r3, [pc, #16]	@ (8001fc0 <BSP_PB_Callback+0x1c>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	200000a6 	.word	0x200000a6

08001fc4 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8001fc4:	b590      	push	{r4, r7, lr}
 8001fc6:	b08d      	sub	sp, #52	@ 0x34
 8001fc8:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8001fca:	231b      	movs	r3, #27
 8001fcc:	713b      	strb	r3, [r7, #4]
 8001fce:	23c5      	movs	r3, #197	@ 0xc5
 8001fd0:	717b      	strb	r3, [r7, #5]
 8001fd2:	23d5      	movs	r3, #213	@ 0xd5
 8001fd4:	71bb      	strb	r3, [r7, #6]
 8001fd6:	23a5      	movs	r3, #165	@ 0xa5
 8001fd8:	71fb      	strb	r3, [r7, #7]
 8001fda:	2302      	movs	r3, #2
 8001fdc:	723b      	strb	r3, [r7, #8]
 8001fde:	2300      	movs	r3, #0
 8001fe0:	727b      	strb	r3, [r7, #9]
 8001fe2:	23b4      	movs	r3, #180	@ 0xb4
 8001fe4:	72bb      	strb	r3, [r7, #10]
 8001fe6:	239a      	movs	r3, #154	@ 0x9a
 8001fe8:	72fb      	strb	r3, [r7, #11]
 8001fea:	23e1      	movs	r3, #225	@ 0xe1
 8001fec:	733b      	strb	r3, [r7, #12]
 8001fee:	2311      	movs	r3, #17
 8001ff0:	737b      	strb	r3, [r7, #13]
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	73bb      	strb	r3, [r7, #14]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	73fb      	strb	r3, [r7, #15]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	743b      	strb	r3, [r7, #16]
 8001ffe:	2300      	movs	r3, #0
 8002000:	747b      	strb	r3, [r7, #17]
 8002002:	2300      	movs	r3, #0
 8002004:	74bb      	strb	r3, [r7, #18]
 8002006:	2300      	movs	r3, #0
 8002008:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800200a:	4b52      	ldr	r3, [pc, #328]	@ (8002154 <Add_HWServW2ST_Service+0x190>)
 800200c:	461c      	mov	r4, r3
 800200e:	1d3b      	adds	r3, r7, #4
 8002010:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002012:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8002016:	4b50      	ldr	r3, [pc, #320]	@ (8002158 <Add_HWServW2ST_Service+0x194>)
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2310      	movs	r3, #16
 800201c:	2201      	movs	r2, #1
 800201e:	494d      	ldr	r1, [pc, #308]	@ (8002154 <Add_HWServW2ST_Service+0x190>)
 8002020:	2002      	movs	r0, #2
 8002022:	f003 fe22 	bl	8005c6a <aci_gatt_add_serv>
 8002026:	4603      	mov	r3, r0
 8002028:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800202a:	7dfb      	ldrb	r3, [r7, #23]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <Add_HWServW2ST_Service+0x70>
    return BLE_STATUS_ERROR;
 8002030:	2347      	movs	r3, #71	@ 0x47
 8002032:	e08a      	b.n	800214a <Add_HWServW2ST_Service+0x186>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8002034:	231b      	movs	r3, #27
 8002036:	713b      	strb	r3, [r7, #4]
 8002038:	23c5      	movs	r3, #197	@ 0xc5
 800203a:	717b      	strb	r3, [r7, #5]
 800203c:	23d5      	movs	r3, #213	@ 0xd5
 800203e:	71bb      	strb	r3, [r7, #6]
 8002040:	23a5      	movs	r3, #165	@ 0xa5
 8002042:	71fb      	strb	r3, [r7, #7]
 8002044:	2302      	movs	r3, #2
 8002046:	723b      	strb	r3, [r7, #8]
 8002048:	2300      	movs	r3, #0
 800204a:	727b      	strb	r3, [r7, #9]
 800204c:	2336      	movs	r3, #54	@ 0x36
 800204e:	72bb      	strb	r3, [r7, #10]
 8002050:	23ac      	movs	r3, #172	@ 0xac
 8002052:	72fb      	strb	r3, [r7, #11]
 8002054:	23e1      	movs	r3, #225	@ 0xe1
 8002056:	733b      	strb	r3, [r7, #12]
 8002058:	2311      	movs	r3, #17
 800205a:	737b      	strb	r3, [r7, #13]
 800205c:	2301      	movs	r3, #1
 800205e:	73bb      	strb	r3, [r7, #14]
 8002060:	2300      	movs	r3, #0
 8002062:	73fb      	strb	r3, [r7, #15]
 8002064:	2300      	movs	r3, #0
 8002066:	743b      	strb	r3, [r7, #16]
 8002068:	2300      	movs	r3, #0
 800206a:	747b      	strb	r3, [r7, #17]
 800206c:	2300      	movs	r3, #0
 800206e:	74bb      	strb	r3, [r7, #18]
 8002070:	2300      	movs	r3, #0
 8002072:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 8002074:	7cbb      	ldrb	r3, [r7, #18]
 8002076:	f043 0304 	orr.w	r3, r3, #4
 800207a:	b2db      	uxtb	r3, r3
 800207c:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 800207e:	7cbb      	ldrb	r3, [r7, #18]
 8002080:	f043 0310 	orr.w	r3, r3, #16
 8002084:	b2db      	uxtb	r3, r3
 8002086:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002088:	4b34      	ldr	r3, [pc, #208]	@ (800215c <Add_HWServW2ST_Service+0x198>)
 800208a:	461c      	mov	r4, r3
 800208c:	1d3b      	adds	r3, r7, #4
 800208e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002090:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8002094:	4b30      	ldr	r3, [pc, #192]	@ (8002158 <Add_HWServW2ST_Service+0x194>)
 8002096:	8818      	ldrh	r0, [r3, #0]
 8002098:	4b31      	ldr	r3, [pc, #196]	@ (8002160 <Add_HWServW2ST_Service+0x19c>)
 800209a:	9305      	str	r3, [sp, #20]
 800209c:	2300      	movs	r3, #0
 800209e:	9304      	str	r3, [sp, #16]
 80020a0:	2310      	movs	r3, #16
 80020a2:	9303      	str	r3, [sp, #12]
 80020a4:	2304      	movs	r3, #4
 80020a6:	9302      	str	r3, [sp, #8]
 80020a8:	2300      	movs	r3, #0
 80020aa:	9301      	str	r3, [sp, #4]
 80020ac:	2312      	movs	r3, #18
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	2308      	movs	r3, #8
 80020b2:	4a2a      	ldr	r2, [pc, #168]	@ (800215c <Add_HWServW2ST_Service+0x198>)
 80020b4:	2102      	movs	r1, #2
 80020b6:	f003 fe61 	bl	8005d7c <aci_gatt_add_char>
 80020ba:	4603      	mov	r3, r0
 80020bc:	75fb      	strb	r3, [r7, #23]
                           2+2+4,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80020be:	7dfb      	ldrb	r3, [r7, #23]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <Add_HWServW2ST_Service+0x104>
    return BLE_STATUS_ERROR;
 80020c4:	2347      	movs	r3, #71	@ 0x47
 80020c6:	e040      	b.n	800214a <Add_HWServW2ST_Service+0x186>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 80020c8:	231b      	movs	r3, #27
 80020ca:	713b      	strb	r3, [r7, #4]
 80020cc:	23c5      	movs	r3, #197	@ 0xc5
 80020ce:	717b      	strb	r3, [r7, #5]
 80020d0:	23d5      	movs	r3, #213	@ 0xd5
 80020d2:	71bb      	strb	r3, [r7, #6]
 80020d4:	23a5      	movs	r3, #165	@ 0xa5
 80020d6:	71fb      	strb	r3, [r7, #7]
 80020d8:	2302      	movs	r3, #2
 80020da:	723b      	strb	r3, [r7, #8]
 80020dc:	2300      	movs	r3, #0
 80020de:	727b      	strb	r3, [r7, #9]
 80020e0:	2336      	movs	r3, #54	@ 0x36
 80020e2:	72bb      	strb	r3, [r7, #10]
 80020e4:	23ac      	movs	r3, #172	@ 0xac
 80020e6:	72fb      	strb	r3, [r7, #11]
 80020e8:	23e1      	movs	r3, #225	@ 0xe1
 80020ea:	733b      	strb	r3, [r7, #12]
 80020ec:	2311      	movs	r3, #17
 80020ee:	737b      	strb	r3, [r7, #13]
 80020f0:	2301      	movs	r3, #1
 80020f2:	73bb      	strb	r3, [r7, #14]
 80020f4:	2300      	movs	r3, #0
 80020f6:	73fb      	strb	r3, [r7, #15]
 80020f8:	2300      	movs	r3, #0
 80020fa:	743b      	strb	r3, [r7, #16]
 80020fc:	2300      	movs	r3, #0
 80020fe:	747b      	strb	r3, [r7, #17]
 8002100:	23e0      	movs	r3, #224	@ 0xe0
 8002102:	74bb      	strb	r3, [r7, #18]
 8002104:	2300      	movs	r3, #0
 8002106:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002108:	4b14      	ldr	r3, [pc, #80]	@ (800215c <Add_HWServW2ST_Service+0x198>)
 800210a:	461c      	mov	r4, r3
 800210c:	1d3b      	adds	r3, r7, #4
 800210e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002110:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8002114:	4b10      	ldr	r3, [pc, #64]	@ (8002158 <Add_HWServW2ST_Service+0x194>)
 8002116:	8818      	ldrh	r0, [r3, #0]
 8002118:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <Add_HWServW2ST_Service+0x1a0>)
 800211a:	9305      	str	r3, [sp, #20]
 800211c:	2300      	movs	r3, #0
 800211e:	9304      	str	r3, [sp, #16]
 8002120:	2310      	movs	r3, #16
 8002122:	9303      	str	r3, [sp, #12]
 8002124:	2304      	movs	r3, #4
 8002126:	9302      	str	r3, [sp, #8]
 8002128:	2300      	movs	r3, #0
 800212a:	9301      	str	r3, [sp, #4]
 800212c:	2310      	movs	r3, #16
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	2314      	movs	r3, #20
 8002132:	4a0a      	ldr	r2, [pc, #40]	@ (800215c <Add_HWServW2ST_Service+0x198>)
 8002134:	2102      	movs	r1, #2
 8002136:	f003 fe21 	bl	8005d7c <aci_gatt_add_char>
 800213a:	4603      	mov	r3, r0
 800213c:	75fb      	strb	r3, [r7, #23]
                           2+3*3*2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800213e:	7dfb      	ldrb	r3, [r7, #23]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <Add_HWServW2ST_Service+0x184>
    return BLE_STATUS_ERROR;
 8002144:	2347      	movs	r3, #71	@ 0x47
 8002146:	e000      	b.n	800214a <Add_HWServW2ST_Service+0x186>

  return BLE_STATUS_SUCCESS;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	371c      	adds	r7, #28
 800214e:	46bd      	mov	sp, r7
 8002150:	bd90      	pop	{r4, r7, pc}
 8002152:	bf00      	nop
 8002154:	200000b8 	.word	0x200000b8
 8002158:	200000ac 	.word	0x200000ac
 800215c:	200000c8 	.word	0x200000c8
 8002160:	200000ae 	.word	0x200000ae
 8002164:	200000b0 	.word	0x200000b0

08002168 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b08d      	sub	sp, #52	@ 0x34
 800216c:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberOfRecords=1;
 800216e:	2301      	movs	r3, #1
 8002170:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 8002172:	231b      	movs	r3, #27
 8002174:	703b      	strb	r3, [r7, #0]
 8002176:	23c5      	movs	r3, #197	@ 0xc5
 8002178:	707b      	strb	r3, [r7, #1]
 800217a:	23d5      	movs	r3, #213	@ 0xd5
 800217c:	70bb      	strb	r3, [r7, #2]
 800217e:	23a5      	movs	r3, #165	@ 0xa5
 8002180:	70fb      	strb	r3, [r7, #3]
 8002182:	2302      	movs	r3, #2
 8002184:	713b      	strb	r3, [r7, #4]
 8002186:	2300      	movs	r3, #0
 8002188:	717b      	strb	r3, [r7, #5]
 800218a:	23b4      	movs	r3, #180	@ 0xb4
 800218c:	71bb      	strb	r3, [r7, #6]
 800218e:	239a      	movs	r3, #154	@ 0x9a
 8002190:	71fb      	strb	r3, [r7, #7]
 8002192:	23e1      	movs	r3, #225	@ 0xe1
 8002194:	723b      	strb	r3, [r7, #8]
 8002196:	2311      	movs	r3, #17
 8002198:	727b      	strb	r3, [r7, #9]
 800219a:	2302      	movs	r3, #2
 800219c:	72bb      	strb	r3, [r7, #10]
 800219e:	2300      	movs	r3, #0
 80021a0:	72fb      	strb	r3, [r7, #11]
 80021a2:	2300      	movs	r3, #0
 80021a4:	733b      	strb	r3, [r7, #12]
 80021a6:	2300      	movs	r3, #0
 80021a8:	737b      	strb	r3, [r7, #13]
 80021aa:	2300      	movs	r3, #0
 80021ac:	73bb      	strb	r3, [r7, #14]
 80021ae:	2300      	movs	r3, #0
 80021b0:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80021b2:	4b31      	ldr	r3, [pc, #196]	@ (8002278 <Add_SWServW2ST_Service+0x110>)
 80021b4:	461c      	mov	r4, r3
 80021b6:	463b      	mov	r3, r7
 80021b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	0052      	lsls	r2, r2, #1
 80021c6:	4413      	add	r3, r2
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	3301      	adds	r3, #1
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	4a2b      	ldr	r2, [pc, #172]	@ (800227c <Add_SWServW2ST_Service+0x114>)
 80021d0:	9200      	str	r2, [sp, #0]
 80021d2:	2201      	movs	r2, #1
 80021d4:	4928      	ldr	r1, [pc, #160]	@ (8002278 <Add_SWServW2ST_Service+0x110>)
 80021d6:	2002      	movs	r0, #2
 80021d8:	f003 fd47 	bl	8005c6a <aci_gatt_add_serv>
 80021dc:	4603      	mov	r3, r0
 80021de:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 80021e0:	7cfb      	ldrb	r3, [r7, #19]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d13f      	bne.n	8002266 <Add_SWServW2ST_Service+0xfe>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 80021e6:	231b      	movs	r3, #27
 80021e8:	703b      	strb	r3, [r7, #0]
 80021ea:	23c5      	movs	r3, #197	@ 0xc5
 80021ec:	707b      	strb	r3, [r7, #1]
 80021ee:	23d5      	movs	r3, #213	@ 0xd5
 80021f0:	70bb      	strb	r3, [r7, #2]
 80021f2:	23a5      	movs	r3, #165	@ 0xa5
 80021f4:	70fb      	strb	r3, [r7, #3]
 80021f6:	2302      	movs	r3, #2
 80021f8:	713b      	strb	r3, [r7, #4]
 80021fa:	2300      	movs	r3, #0
 80021fc:	717b      	strb	r3, [r7, #5]
 80021fe:	2336      	movs	r3, #54	@ 0x36
 8002200:	71bb      	strb	r3, [r7, #6]
 8002202:	23ac      	movs	r3, #172	@ 0xac
 8002204:	71fb      	strb	r3, [r7, #7]
 8002206:	23e1      	movs	r3, #225	@ 0xe1
 8002208:	723b      	strb	r3, [r7, #8]
 800220a:	2311      	movs	r3, #17
 800220c:	727b      	strb	r3, [r7, #9]
 800220e:	2301      	movs	r3, #1
 8002210:	72bb      	strb	r3, [r7, #10]
 8002212:	2300      	movs	r3, #0
 8002214:	72fb      	strb	r3, [r7, #11]
 8002216:	2300      	movs	r3, #0
 8002218:	733b      	strb	r3, [r7, #12]
 800221a:	2301      	movs	r3, #1
 800221c:	737b      	strb	r3, [r7, #13]
 800221e:	2300      	movs	r3, #0
 8002220:	73bb      	strb	r3, [r7, #14]
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002226:	4b16      	ldr	r3, [pc, #88]	@ (8002280 <Add_SWServW2ST_Service+0x118>)
 8002228:	461c      	mov	r4, r3
 800222a:	463b      	mov	r3, r7
 800222c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800222e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8002232:	4b12      	ldr	r3, [pc, #72]	@ (800227c <Add_SWServW2ST_Service+0x114>)
 8002234:	8818      	ldrh	r0, [r3, #0]
 8002236:	4b13      	ldr	r3, [pc, #76]	@ (8002284 <Add_SWServW2ST_Service+0x11c>)
 8002238:	9305      	str	r3, [sp, #20]
 800223a:	2300      	movs	r3, #0
 800223c:	9304      	str	r3, [sp, #16]
 800223e:	2310      	movs	r3, #16
 8002240:	9303      	str	r3, [sp, #12]
 8002242:	2304      	movs	r3, #4
 8002244:	9302      	str	r3, [sp, #8]
 8002246:	2300      	movs	r3, #0
 8002248:	9301      	str	r3, [sp, #4]
 800224a:	2310      	movs	r3, #16
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	2308      	movs	r3, #8
 8002250:	4a0b      	ldr	r2, [pc, #44]	@ (8002280 <Add_SWServW2ST_Service+0x118>)
 8002252:	2102      	movs	r1, #2
 8002254:	f003 fd92 	bl	8005d7c <aci_gatt_add_char>
 8002258:	4603      	mov	r3, r0
 800225a:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 800225c:	7cfb      	ldrb	r3, [r7, #19]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d103      	bne.n	800226a <Add_SWServW2ST_Service+0x102>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 8002262:	2300      	movs	r3, #0
 8002264:	e003      	b.n	800226e <Add_SWServW2ST_Service+0x106>
    goto fail;
 8002266:	bf00      	nop
 8002268:	e000      	b.n	800226c <Add_SWServW2ST_Service+0x104>
    goto fail;
 800226a:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 800226c:	2347      	movs	r3, #71	@ 0x47
}
 800226e:	4618      	mov	r0, r3
 8002270:	371c      	adds	r7, #28
 8002272:	46bd      	mov	sp, r7
 8002274:	bd90      	pop	{r4, r7, pc}
 8002276:	bf00      	nop
 8002278:	200000b8 	.word	0x200000b8
 800227c:	200000b2 	.word	0x200000b2
 8002280:	200000c8 	.word	0x200000c8
 8002284:	200000b4 	.word	0x200000b4

08002288 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08c      	sub	sp, #48	@ 0x30
 800228c:	af02      	add	r7, sp, #8
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002294:	f001 fa88 	bl	80037a8 <HAL_GetTick>
 8002298:	4603      	mov	r3, r0
 800229a:	08db      	lsrs	r3, r3, #3
 800229c:	b2db      	uxtb	r3, r3
 800229e:	743b      	strb	r3, [r7, #16]
 80022a0:	f001 fa82 	bl	80037a8 <HAL_GetTick>
 80022a4:	4603      	mov	r3, r0
 80022a6:	0adb      	lsrs	r3, r3, #11
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	425b      	negs	r3, r3
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	74bb      	strb	r3, [r7, #18]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	425b      	negs	r3, r3
 80022be:	121b      	asrs	r3, r3, #8
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	753b      	strb	r3, [r7, #20]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	121b      	asrs	r3, r3, #8
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	425b      	negs	r3, r3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	75bb      	strb	r3, [r7, #22]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	425b      	negs	r3, r3
 80022e8:	121b      	asrs	r3, r3, #8
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	763b      	strb	r3, [r7, #24]
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	121b      	asrs	r3, r3, #8
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	76bb      	strb	r3, [r7, #26]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	121b      	asrs	r3, r3, #8
 800230e:	b2db      	uxtb	r3, r3
 8002310:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	773b      	strb	r3, [r7, #28]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	121b      	asrs	r3, r3, #8
 8002320:	b2db      	uxtb	r3, r3
 8002322:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	77bb      	strb	r3, [r7, #30]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	121b      	asrs	r3, r3, #8
 8002332:	b2db      	uxtb	r3, r3
 8002334:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	f887 3020 	strb.w	r3, [r7, #32]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	121b      	asrs	r3, r3, #8
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	121b      	asrs	r3, r3, #8
 800235c:	b2db      	uxtb	r3, r3
 800235e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 8002362:	4b0c      	ldr	r3, [pc, #48]	@ (8002394 <Acc_Update+0x10c>)
 8002364:	8818      	ldrh	r0, [r3, #0]
 8002366:	4b0c      	ldr	r3, [pc, #48]	@ (8002398 <Acc_Update+0x110>)
 8002368:	8819      	ldrh	r1, [r3, #0]
 800236a:	f107 0310 	add.w	r3, r7, #16
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	2314      	movs	r3, #20
 8002372:	2200      	movs	r2, #0
 8002374:	f003 fdcd 	bl	8005f12 <aci_gatt_update_char_value>
 8002378:	4603      	mov	r3, r0
 800237a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 800237e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <Acc_Update+0x102>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8002386:	2347      	movs	r3, #71	@ 0x47
 8002388:	e000      	b.n	800238c <Acc_Update+0x104>
  }

  return BLE_STATUS_SUCCESS;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3728      	adds	r7, #40	@ 0x28
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	200000ac 	.word	0x200000ac
 8002398:	200000b0 	.word	0x200000b0

0800239c <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b088      	sub	sp, #32
 80023a0:	af02      	add	r7, sp, #8
 80023a2:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 80023a4:	f001 fa00 	bl	80037a8 <HAL_GetTick>
 80023a8:	4603      	mov	r3, r0
 80023aa:	08db      	lsrs	r3, r3, #3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	733b      	strb	r3, [r7, #12]
 80023b0:	f001 f9fa 	bl	80037a8 <HAL_GetTick>
 80023b4:	4603      	mov	r3, r0
 80023b6:	0adb      	lsrs	r3, r3, #11
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	73bb      	strb	r3, [r7, #14]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	121b      	asrs	r3, r3, #8
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	743b      	strb	r3, [r7, #16]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	121b      	asrs	r3, r3, #8
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	74bb      	strb	r3, [r7, #18]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	121b      	asrs	r3, r3, #8
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif

  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 80023f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <Quat_Update+0x84>)
 80023f4:	8818      	ldrh	r0, [r3, #0]
 80023f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002424 <Quat_Update+0x88>)
 80023f8:	8819      	ldrh	r1, [r3, #0]
 80023fa:	f107 030c 	add.w	r3, r7, #12
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	2308      	movs	r3, #8
 8002402:	2200      	movs	r2, #0
 8002404:	f003 fd85 	bl	8005f12 <aci_gatt_update_char_value>
 8002408:	4603      	mov	r3, r0
 800240a:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 800240c:	7dfb      	ldrb	r3, [r7, #23]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <Quat_Update+0x7a>
    PRINTF("Error while updating Sensor Fusion characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8002412:	2347      	movs	r3, #71	@ 0x47
 8002414:	e000      	b.n	8002418 <Quat_Update+0x7c>
  }

  return BLE_STATUS_SUCCESS;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	200000b2 	.word	0x200000b2
 8002424:	200000b4 	.word	0x200000b4

08002428 <Read_Request_CB>:
* Description    : Update the sensor values.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 8002428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800242c:	b08e      	sub	sp, #56	@ 0x38
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	84fb      	strh	r3, [r7, #38]	@ 0x26
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 8002434:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002436:	4b57      	ldr	r3, [pc, #348]	@ (8002594 <Read_Request_CB+0x16c>)
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	3301      	adds	r3, #1
 800243c:	429a      	cmp	r2, r3
 800243e:	d105      	bne.n	800244c <Read_Request_CB+0x24>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 8002440:	4a55      	ldr	r2, [pc, #340]	@ (8002598 <Read_Request_CB+0x170>)
 8002442:	4956      	ldr	r1, [pc, #344]	@ (800259c <Read_Request_CB+0x174>)
 8002444:	4856      	ldr	r0, [pc, #344]	@ (80025a0 <Read_Request_CB+0x178>)
 8002446:	f7ff ff1f 	bl	8002288 <Acc_Update>
 800244a:	e091      	b.n	8002570 <Read_Request_CB+0x148>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 800244c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800244e:	4b55      	ldr	r3, [pc, #340]	@ (80025a4 <Read_Request_CB+0x17c>)
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	3301      	adds	r3, #1
 8002454:	429a      	cmp	r2, r3
 8002456:	f040 808b 	bne.w	8002570 <Read_Request_CB+0x148>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 800245a:	f004 fb61 	bl	8006b20 <rand>
 800245e:	4603      	mov	r3, r0
 8002460:	17da      	asrs	r2, r3, #31
 8002462:	61bb      	str	r3, [r7, #24]
 8002464:	61fa      	str	r2, [r7, #28]
 8002466:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800246a:	f04f 0000 	mov.w	r0, #0
 800246e:	f04f 0100 	mov.w	r1, #0
 8002472:	0099      	lsls	r1, r3, #2
 8002474:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002478:	0090      	lsls	r0, r2, #2
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	69b9      	ldr	r1, [r7, #24]
 8002480:	1851      	adds	r1, r2, r1
 8002482:	6139      	str	r1, [r7, #16]
 8002484:	69f9      	ldr	r1, [r7, #28]
 8002486:	eb43 0101 	adc.w	r1, r3, r1
 800248a:	6179      	str	r1, [r7, #20]
 800248c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002498:	f7fe f906 	bl	80006a8 <__aeabi_uldivmod>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4610      	mov	r0, r2
 80024a2:	4619      	mov	r1, r3
 80024a4:	f7fe f87a 	bl	800059c <__aeabi_ul2d>
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	4b3e      	ldr	r3, [pc, #248]	@ (80025a8 <Read_Request_CB+0x180>)
 80024ae:	f7fd fef5 	bl	800029c <__adddf3>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4610      	mov	r0, r2
 80024b8:	4619      	mov	r1, r3
 80024ba:	f7fe f8a5 	bl	8000608 <__aeabi_d2f>
 80024be:	4603      	mov	r3, r0
 80024c0:	637b      	str	r3, [r7, #52]	@ 0x34
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 80024c2:	f004 fb2d 	bl	8006b20 <rand>
 80024c6:	4603      	mov	r3, r0
 80024c8:	17da      	asrs	r2, r3, #31
 80024ca:	4698      	mov	r8, r3
 80024cc:	4691      	mov	r9, r2
 80024ce:	4642      	mov	r2, r8
 80024d0:	464b      	mov	r3, r9
 80024d2:	1891      	adds	r1, r2, r2
 80024d4:	6039      	str	r1, [r7, #0]
 80024d6:	415b      	adcs	r3, r3
 80024d8:	607b      	str	r3, [r7, #4]
 80024da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024de:	eb12 0408 	adds.w	r4, r2, r8
 80024e2:	eb43 0509 	adc.w	r5, r3, r9
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	f04f 0300 	mov.w	r3, #0
 80024ee:	016b      	lsls	r3, r5, #5
 80024f0:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80024f4:	0162      	lsls	r2, r4, #5
 80024f6:	eb14 0a02 	adds.w	sl, r4, r2
 80024fa:	eb45 0b03 	adc.w	fp, r5, r3
 80024fe:	eb1a 0308 	adds.w	r3, sl, r8
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	eb4b 0309 	adc.w	r3, fp, r9
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800250e:	f04f 0300 	mov.w	r3, #0
 8002512:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002516:	f7fe f8c7 	bl	80006a8 <__aeabi_uldivmod>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4610      	mov	r0, r2
 8002520:	4619      	mov	r1, r3
 8002522:	f7fe f83b 	bl	800059c <__aeabi_ul2d>
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	4b20      	ldr	r3, [pc, #128]	@ (80025ac <Read_Request_CB+0x184>)
 800252c:	f7fd feb6 	bl	800029c <__adddf3>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4610      	mov	r0, r2
 8002536:	4619      	mov	r1, r3
 8002538:	f7fe f866 	bl	8000608 <__aeabi_d2f>
 800253c:	4603      	mov	r3, r0
 800253e:	633b      	str	r3, [r7, #48]	@ 0x30
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8002540:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002544:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80025b0 <Read_Request_CB+0x188>
 8002548:	ee67 7a87 	vmul.f32	s15, s15, s14
 800254c:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8002550:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002554:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002558:	ee67 7a87 	vmul.f32	s15, s15, s14
 800255c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002560:	ee17 3a90 	vmov	r3, s15
 8002564:	b21b      	sxth	r3, r3
 8002566:	4619      	mov	r1, r3
 8002568:	ee16 0a90 	vmov	r0, s13
 800256c:	f000 f824 	bl	80025b8 <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 8002570:	4b10      	ldr	r3, [pc, #64]	@ (80025b4 <Read_Request_CB+0x18c>)
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d007      	beq.n	8002588 <Read_Request_CB+0x160>
  {
    ret = aci_gatt_allow_read(connection_handle);
 8002578:	4b0e      	ldr	r3, [pc, #56]	@ (80025b4 <Read_Request_CB+0x18c>)
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f003 fd58 	bl	8006032 <aci_gatt_allow_read>
 8002582:	4603      	mov	r3, r0
 8002584:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (ret != BLE_STATUS_SUCCESS)
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
    }
  }
}
 8002588:	bf00      	nop
 800258a:	3738      	adds	r7, #56	@ 0x38
 800258c:	46bd      	mov	sp, r7
 800258e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002592:	bf00      	nop
 8002594:	200000b0 	.word	0x200000b0
 8002598:	200000f8 	.word	0x200000f8
 800259c:	200000ec 	.word	0x200000ec
 80025a0:	200000e0 	.word	0x200000e0
 80025a4:	200000ae 	.word	0x200000ae
 80025a8:	403b0000 	.word	0x403b0000
 80025ac:	408f4000 	.word	0x408f4000
 80025b0:	42c80000 	.word	0x42c80000
 80025b4:	200000d8 	.word	0x200000d8

080025b8 <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af02      	add	r7, sp, #8
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 80025c4:	f001 f8f0 	bl	80037a8 <HAL_GetTick>
 80025c8:	4603      	mov	r3, r0
 80025ca:	08db      	lsrs	r3, r3, #3
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	733b      	strb	r3, [r7, #12]
 80025d0:	f001 f8ea 	bl	80037a8 <HAL_GetTick>
 80025d4:	4603      	mov	r3, r0
 80025d6:	0adb      	lsrs	r3, r3, #11
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	73bb      	strb	r3, [r7, #14]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	121b      	asrs	r3, r3, #8
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	73fb      	strb	r3, [r7, #15]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	141b      	asrs	r3, r3, #16
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	743b      	strb	r3, [r7, #16]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	161b      	asrs	r3, r3, #24
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 80025fa:	887b      	ldrh	r3, [r7, #2]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	74bb      	strb	r3, [r7, #18]
 8002600:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002604:	121b      	asrs	r3, r3, #8
 8002606:	b21b      	sxth	r3, r3
 8002608:	b2db      	uxtb	r3, r3
 800260a:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 800260c:	4b0b      	ldr	r3, [pc, #44]	@ (800263c <BlueMS_Environmental_Update+0x84>)
 800260e:	8818      	ldrh	r0, [r3, #0]
 8002610:	4b0b      	ldr	r3, [pc, #44]	@ (8002640 <BlueMS_Environmental_Update+0x88>)
 8002612:	8819      	ldrh	r1, [r3, #0]
 8002614:	f107 030c 	add.w	r3, r7, #12
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	2308      	movs	r3, #8
 800261c:	2200      	movs	r2, #0
 800261e:	f003 fc78 	bl	8005f12 <aci_gatt_update_char_value>
 8002622:	4603      	mov	r3, r0
 8002624:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 8002626:	7dfb      	ldrb	r3, [r7, #23]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <BlueMS_Environmental_Update+0x78>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
    return BLE_STATUS_ERROR ;
 800262c:	2347      	movs	r3, #71	@ 0x47
 800262e:	e000      	b.n	8002632 <BlueMS_Environmental_Update+0x7a>
  }

  return BLE_STATUS_SUCCESS;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	200000ac 	.word	0x200000ac
 8002640:	200000ae 	.word	0x200000ae

08002644 <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b092      	sub	sp, #72	@ 0x48
 8002648:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 800264a:	4a36      	ldr	r2, [pc, #216]	@ (8002724 <Set_DeviceConnectable+0xe0>)
 800264c:	f107 031c 	add.w	r3, r7, #28
 8002650:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002654:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 8002658:	2302      	movs	r3, #2
 800265a:	703b      	strb	r3, [r7, #0]
 800265c:	230a      	movs	r3, #10
 800265e:	707b      	strb	r3, [r7, #1]
 8002660:	2300      	movs	r3, #0
 8002662:	70bb      	strb	r3, [r7, #2]
 8002664:	2308      	movs	r3, #8
 8002666:	70fb      	strb	r3, [r7, #3]
 8002668:	2309      	movs	r3, #9
 800266a:	713b      	strb	r3, [r7, #4]
 800266c:	2342      	movs	r3, #66	@ 0x42
 800266e:	717b      	strb	r3, [r7, #5]
 8002670:	236c      	movs	r3, #108	@ 0x6c
 8002672:	71bb      	strb	r3, [r7, #6]
 8002674:	2375      	movs	r3, #117	@ 0x75
 8002676:	71fb      	strb	r3, [r7, #7]
 8002678:	2365      	movs	r3, #101	@ 0x65
 800267a:	723b      	strb	r3, [r7, #8]
 800267c:	234e      	movs	r3, #78	@ 0x4e
 800267e:	727b      	strb	r3, [r7, #9]
 8002680:	2352      	movs	r3, #82	@ 0x52
 8002682:	72bb      	strb	r3, [r7, #10]
 8002684:	2347      	movs	r3, #71	@ 0x47
 8002686:	72fb      	strb	r3, [r7, #11]
 8002688:	230d      	movs	r3, #13
 800268a:	733b      	strb	r3, [r7, #12]
 800268c:	23ff      	movs	r3, #255	@ 0xff
 800268e:	737b      	strb	r3, [r7, #13]
 8002690:	2301      	movs	r3, #1
 8002692:	73bb      	strb	r3, [r7, #14]
 8002694:	2380      	movs	r3, #128	@ 0x80
 8002696:	73fb      	strb	r3, [r7, #15]
 8002698:	2300      	movs	r3, #0
 800269a:	743b      	strb	r3, [r7, #16]
 800269c:	23f4      	movs	r3, #244	@ 0xf4
 800269e:	747b      	strb	r3, [r7, #17]
 80026a0:	2300      	movs	r3, #0
 80026a2:	74bb      	strb	r3, [r7, #18]
 80026a4:	2300      	movs	r3, #0
 80026a6:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 80026a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002728 <Set_DeviceConnectable+0xe4>)
 80026aa:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 80026ac:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 80026ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002728 <Set_DeviceConnectable+0xe4>)
 80026b0:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 80026b2:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 80026b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002728 <Set_DeviceConnectable+0xe4>)
 80026b6:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 80026b8:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 80026ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002728 <Set_DeviceConnectable+0xe4>)
 80026bc:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 80026be:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 80026c0:	4b19      	ldr	r3, [pc, #100]	@ (8002728 <Set_DeviceConnectable+0xe4>)
 80026c2:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 80026c4:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 80026c6:	4b18      	ldr	r3, [pc, #96]	@ (8002728 <Set_DeviceConnectable+0xe4>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 80026ca:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 80026cc:	7cbb      	ldrb	r3, [r7, #18]
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 80026d6:	2100      	movs	r1, #0
 80026d8:	2000      	movs	r0, #0
 80026da:	f003 fe0d 	bl	80062f8 <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 80026de:	2300      	movs	r3, #0
 80026e0:	9306      	str	r3, [sp, #24]
 80026e2:	2300      	movs	r3, #0
 80026e4:	9305      	str	r3, [sp, #20]
 80026e6:	2300      	movs	r3, #0
 80026e8:	9304      	str	r3, [sp, #16]
 80026ea:	2300      	movs	r3, #0
 80026ec:	9303      	str	r3, [sp, #12]
 80026ee:	f107 031c 	add.w	r3, r7, #28
 80026f2:	9302      	str	r3, [sp, #8]
 80026f4:	2308      	movs	r3, #8
 80026f6:	9301      	str	r3, [sp, #4]
 80026f8:	2300      	movs	r3, #0
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	2301      	movs	r3, #1
 80026fe:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 8002702:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8002706:	2000      	movs	r0, #0
 8002708:	f003 f8fa 	bl	8005900 <aci_gap_set_discoverable>
 800270c:	4603      	mov	r3, r0
 800270e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 8002712:	463b      	mov	r3, r7
 8002714:	4619      	mov	r1, r3
 8002716:	201a      	movs	r0, #26
 8002718:	f003 fa33 	bl	8005b82 <aci_gap_update_adv_data>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 800271c:	bf00      	nop
 800271e:	3728      	adds	r7, #40	@ 0x28
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	08007ea8 	.word	0x08007ea8
 8002728:	200000a0 	.word	0x200000a0

0800272c <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b088      	sub	sp, #32
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	61fb      	str	r3, [r7, #28]
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	3301      	adds	r3, #1
 800273c:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type != HCI_EVENT_PKT)
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b04      	cmp	r3, #4
 8002744:	d139      	bne.n	80027ba <user_notify+0x8e>
    return;

  switch(event_pckt->evt){
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2bff      	cmp	r3, #255	@ 0xff
 800274c:	d01f      	beq.n	800278e <user_notify+0x62>
 800274e:	2bff      	cmp	r3, #255	@ 0xff
 8002750:	dc38      	bgt.n	80027c4 <user_notify+0x98>
 8002752:	2b05      	cmp	r3, #5
 8002754:	d002      	beq.n	800275c <user_notify+0x30>
 8002756:	2b3e      	cmp	r3, #62	@ 0x3e
 8002758:	d003      	beq.n	8002762 <user_notify+0x36>
 800275a:	e033      	b.n	80027c4 <user_notify+0x98>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 800275c:	f000 f836 	bl	80027cc <GAP_DisconnectionComplete_CB>
    }
    break;
 8002760:	e030      	b.n	80027c4 <user_notify+0x98>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	3302      	adds	r3, #2
 8002766:	60fb      	str	r3, [r7, #12]

      switch(evt->subevent){
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d126      	bne.n	80027be <user_notify+0x92>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	3301      	adds	r3, #1
 8002774:	60bb      	str	r3, [r7, #8]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	1d5a      	adds	r2, r3, #5
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002780:	b29b      	uxth	r3, r3
 8002782:	4619      	mov	r1, r3
 8002784:	4610      	mov	r0, r2
 8002786:	f000 f837 	bl	80027f8 <GAP_ConnectionComplete_CB>
        }
        break;
 800278a:	bf00      	nop
      }
    }
    break;
 800278c:	e017      	b.n	80027be <user_notify+0x92>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	3302      	adds	r3, #2
 8002792:	617b      	str	r3, [r7, #20]
      switch(blue_evt->ecode){
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	b29b      	uxth	r3, r3
 800279a:	461a      	mov	r2, r3
 800279c:	f640 4314 	movw	r3, #3092	@ 0xc14
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d10e      	bne.n	80027c2 <user_notify+0x96>

      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	3302      	adds	r3, #2
 80027a8:	613b      	str	r3, [r7, #16]
          Read_Request_CB(pr->attr_handle);
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	885b      	ldrh	r3, [r3, #2]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fe39 	bl	8002428 <Read_Request_CB>
        }
        break;
 80027b6:	bf00      	nop
      }

    }
    break;
 80027b8:	e003      	b.n	80027c2 <user_notify+0x96>
    return;
 80027ba:	bf00      	nop
 80027bc:	e002      	b.n	80027c4 <user_notify+0x98>
    break;
 80027be:	bf00      	nop
 80027c0:	e000      	b.n	80027c4 <user_notify+0x98>
    break;
 80027c2:	bf00      	nop
  }
}
 80027c4:	3720      	adds	r7, #32
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  connected = FALSE;
 80027d0:	4b06      	ldr	r3, [pc, #24]	@ (80027ec <GAP_DisconnectionComplete_CB+0x20>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
  /* Make the device connectable again. */
  set_connectable = TRUE;
 80027d6:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <GAP_DisconnectionComplete_CB+0x24>)
 80027d8:	2201      	movs	r2, #1
 80027da:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 80027dc:	4b05      	ldr	r3, [pc, #20]	@ (80027f4 <GAP_DisconnectionComplete_CB+0x28>)
 80027de:	2200      	movs	r2, #0
 80027e0:	701a      	strb	r2, [r3, #0]
}
 80027e2:	bf00      	nop
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	200000dc 	.word	0x200000dc
 80027f0:	20000001 	.word	0x20000001
 80027f4:	200000da 	.word	0x200000da

080027f8 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8002804:	4b0a      	ldr	r3, [pc, #40]	@ (8002830 <GAP_ConnectionComplete_CB+0x38>)
 8002806:	2201      	movs	r2, #1
 8002808:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 800280a:	4a0a      	ldr	r2, [pc, #40]	@ (8002834 <GAP_ConnectionComplete_CB+0x3c>)
 800280c:	887b      	ldrh	r3, [r7, #2]
 800280e:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
  for(uint32_t i = 5; i > 0; i--){
 8002810:	2305      	movs	r3, #5
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	e002      	b.n	800281c <GAP_ConnectionComplete_CB+0x24>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	3b01      	subs	r3, #1
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f9      	bne.n	8002816 <GAP_ConnectionComplete_CB+0x1e>
    PRINTF("%02X-", addr[i]);
  }
  PRINTF("%02X\n", addr[0]);
}
 8002822:	bf00      	nop
 8002824:	bf00      	nop
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	200000dc 	.word	0x200000dc
 8002834:	200000d8 	.word	0x200000d8

08002838 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002840:	2300      	movs	r3, #0
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	4b1e      	ldr	r3, [pc, #120]	@ (80028c0 <HCI_TL_SPI_Init+0x88>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002848:	4a1d      	ldr	r2, [pc, #116]	@ (80028c0 <HCI_TL_SPI_Init+0x88>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002850:	4b1b      	ldr	r3, [pc, #108]	@ (80028c0 <HCI_TL_SPI_Init+0x88>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 800285c:	2301      	movs	r3, #1
 800285e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002860:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002864:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800286a:	f107 030c 	add.w	r3, r7, #12
 800286e:	4619      	mov	r1, r3
 8002870:	4814      	ldr	r0, [pc, #80]	@ (80028c4 <HCI_TL_SPI_Init+0x8c>)
 8002872:	f001 f92d 	bl	8003ad0 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8002876:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800287a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800287c:	2301      	movs	r3, #1
 800287e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002884:	2300      	movs	r3, #0
 8002886:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8002888:	f107 030c 	add.w	r3, r7, #12
 800288c:	4619      	mov	r1, r3
 800288e:	480d      	ldr	r0, [pc, #52]	@ (80028c4 <HCI_TL_SPI_Init+0x8c>)
 8002890:	f001 f91e 	bl	8003ad0 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8002894:	2302      	movs	r3, #2
 8002896:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002898:	2301      	movs	r3, #1
 800289a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a0:	2300      	movs	r3, #0
 80028a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80028a4:	f107 030c 	add.w	r3, r7, #12
 80028a8:	4619      	mov	r1, r3
 80028aa:	4806      	ldr	r0, [pc, #24]	@ (80028c4 <HCI_TL_SPI_Init+0x8c>)
 80028ac:	f001 f910 	bl	8003ad0 <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 80028b0:	f000 fb24 	bl	8002efc <BSP_SPI1_Init>
 80028b4:	4603      	mov	r3, r0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3720      	adds	r7, #32
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40020000 	.word	0x40020000

080028c8 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80028cc:	2101      	movs	r1, #1
 80028ce:	4807      	ldr	r0, [pc, #28]	@ (80028ec <HCI_TL_SPI_DeInit+0x24>)
 80028d0:	f001 fa82 	bl	8003dd8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80028d4:	2102      	movs	r1, #2
 80028d6:	4805      	ldr	r0, [pc, #20]	@ (80028ec <HCI_TL_SPI_DeInit+0x24>)
 80028d8:	f001 fa7e 	bl	8003dd8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80028dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028e0:	4802      	ldr	r0, [pc, #8]	@ (80028ec <HCI_TL_SPI_DeInit+0x24>)
 80028e2:	f001 fa79 	bl	8003dd8 <HAL_GPIO_DeInit>
  return 0;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40020000 	.word	0x40020000

080028f0 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80028f4:	2201      	movs	r2, #1
 80028f6:	2102      	movs	r1, #2
 80028f8:	480b      	ldr	r0, [pc, #44]	@ (8002928 <HCI_TL_SPI_Reset+0x38>)
 80028fa:	f001 fb69 	bl	8003fd0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80028fe:	2200      	movs	r2, #0
 8002900:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002904:	4808      	ldr	r0, [pc, #32]	@ (8002928 <HCI_TL_SPI_Reset+0x38>)
 8002906:	f001 fb63 	bl	8003fd0 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800290a:	2005      	movs	r0, #5
 800290c:	f000 ff58 	bl	80037c0 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8002910:	2201      	movs	r2, #1
 8002912:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002916:	4804      	ldr	r0, [pc, #16]	@ (8002928 <HCI_TL_SPI_Reset+0x38>)
 8002918:	f001 fb5a 	bl	8003fd0 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800291c:	2005      	movs	r0, #5
 800291e:	f000 ff4f 	bl	80037c0 <HAL_Delay>
  return 0;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40020000 	.word	0x40020000

0800292c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8002938:	2300      	movs	r3, #0
 800293a:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 800293c:	23ff      	movs	r3, #255	@ 0xff
 800293e:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8002940:	4a25      	ldr	r2, [pc, #148]	@ (80029d8 <HCI_TL_SPI_Receive+0xac>)
 8002942:	f107 0314 	add.w	r3, r7, #20
 8002946:	e892 0003 	ldmia.w	r2, {r0, r1}
 800294a:	6018      	str	r0, [r3, #0]
 800294c:	3304      	adds	r3, #4
 800294e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8002950:	2200      	movs	r2, #0
 8002952:	2102      	movs	r1, #2
 8002954:	4821      	ldr	r0, [pc, #132]	@ (80029dc <HCI_TL_SPI_Receive+0xb0>)
 8002956:	f001 fb3b 	bl	8003fd0 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800295a:	f107 010c 	add.w	r1, r7, #12
 800295e:	f107 0314 	add.w	r3, r7, #20
 8002962:	2205      	movs	r2, #5
 8002964:	4618      	mov	r0, r3
 8002966:	f000 faf9 	bl	8002f5c <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 800296a:	7b3b      	ldrb	r3, [r7, #12]
 800296c:	2b02      	cmp	r3, #2
 800296e:	d129      	bne.n	80029c4 <HCI_TL_SPI_Receive+0x98>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8002970:	7c3b      	ldrb	r3, [r7, #16]
 8002972:	021b      	lsls	r3, r3, #8
 8002974:	b21a      	sxth	r2, r3
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	b21b      	sxth	r3, r3
 800297a:	4313      	orrs	r3, r2
 800297c:	b21b      	sxth	r3, r3
 800297e:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8002980:	8bfb      	ldrh	r3, [r7, #30]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d01e      	beq.n	80029c4 <HCI_TL_SPI_Receive+0x98>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8002986:	8bfa      	ldrh	r2, [r7, #30]
 8002988:	887b      	ldrh	r3, [r7, #2]
 800298a:	429a      	cmp	r2, r3
 800298c:	d901      	bls.n	8002992 <HCI_TL_SPI_Receive+0x66>
        byte_count = size;
 800298e:	887b      	ldrh	r3, [r7, #2]
 8002990:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8002992:	2300      	movs	r3, #0
 8002994:	777b      	strb	r3, [r7, #29]
 8002996:	e010      	b.n	80029ba <HCI_TL_SPI_Receive+0x8e>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8002998:	f107 011b 	add.w	r1, r7, #27
 800299c:	f107 031c 	add.w	r3, r7, #28
 80029a0:	2201      	movs	r2, #1
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 fada 	bl	8002f5c <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 80029a8:	7f7b      	ldrb	r3, [r7, #29]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	7efa      	ldrb	r2, [r7, #27]
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 80029b4:	7f7b      	ldrb	r3, [r7, #29]
 80029b6:	3301      	adds	r3, #1
 80029b8:	777b      	strb	r3, [r7, #29]
 80029ba:	7f7b      	ldrb	r3, [r7, #29]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	8bfa      	ldrh	r2, [r7, #30]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d8e9      	bhi.n	8002998 <HCI_TL_SPI_Receive+0x6c>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80029c4:	2201      	movs	r2, #1
 80029c6:	2102      	movs	r1, #2
 80029c8:	4804      	ldr	r0, [pc, #16]	@ (80029dc <HCI_TL_SPI_Receive+0xb0>)
 80029ca:	f001 fb01 	bl	8003fd0 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 80029ce:	7f7b      	ldrb	r3, [r7, #29]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3720      	adds	r7, #32
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	08007eb0 	.word	0x08007eb0
 80029dc:	40020000 	.word	0x40020000

080029e0 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80029ec:	4a23      	ldr	r2, [pc, #140]	@ (8002a7c <HCI_TL_SPI_Send+0x9c>)
 80029ee:	f107 0310 	add.w	r3, r7, #16
 80029f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029f6:	6018      	str	r0, [r3, #0]
 80029f8:	3304      	adds	r3, #4
 80029fa:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80029fc:	f000 fed4 	bl	80037a8 <HAL_GetTick>
 8002a00:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8002a06:	2200      	movs	r2, #0
 8002a08:	2102      	movs	r1, #2
 8002a0a:	481d      	ldr	r0, [pc, #116]	@ (8002a80 <HCI_TL_SPI_Send+0xa0>)
 8002a0c:	f001 fae0 	bl	8003fd0 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8002a10:	f107 0108 	add.w	r1, r7, #8
 8002a14:	f107 0310 	add.w	r3, r7, #16
 8002a18:	2205      	movs	r2, #5
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fa9e 	bl	8002f5c <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 8002a20:	7a3b      	ldrb	r3, [r7, #8]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d10f      	bne.n	8002a46 <HCI_TL_SPI_Send+0x66>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8002a26:	7a7b      	ldrb	r3, [r7, #9]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	887b      	ldrh	r3, [r7, #2]
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d806      	bhi.n	8002a3e <HCI_TL_SPI_Send+0x5e>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8002a30:	887b      	ldrh	r3, [r7, #2]
 8002a32:	461a      	mov	r2, r3
 8002a34:	4913      	ldr	r1, [pc, #76]	@ (8002a84 <HCI_TL_SPI_Send+0xa4>)
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fa90 	bl	8002f5c <BSP_SPI1_SendRecv>
 8002a3c:	e006      	b.n	8002a4c <HCI_TL_SPI_Send+0x6c>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8002a3e:	f06f 0301 	mvn.w	r3, #1
 8002a42:	61fb      	str	r3, [r7, #28]
 8002a44:	e002      	b.n	8002a4c <HCI_TL_SPI_Send+0x6c>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8002a46:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4a:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	2102      	movs	r1, #2
 8002a50:	480b      	ldr	r0, [pc, #44]	@ (8002a80 <HCI_TL_SPI_Send+0xa0>)
 8002a52:	f001 fabd 	bl	8003fd0 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8002a56:	f000 fea7 	bl	80037a8 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b0f      	cmp	r3, #15
 8002a62:	d903      	bls.n	8002a6c <HCI_TL_SPI_Send+0x8c>
    {
      result = -3;
 8002a64:	f06f 0302 	mvn.w	r3, #2
 8002a68:	61fb      	str	r3, [r7, #28]
      break;
 8002a6a:	e002      	b.n	8002a72 <HCI_TL_SPI_Send+0x92>
    }
  } while(result < 0);
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	dbc7      	blt.n	8002a02 <HCI_TL_SPI_Send+0x22>

  return result;
 8002a72:	69fb      	ldr	r3, [r7, #28]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3720      	adds	r7, #32
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	08007eb8 	.word	0x08007eb8
 8002a80:	40020000 	.word	0x40020000
 8002a84:	20000118 	.word	0x20000118

08002a88 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	4805      	ldr	r0, [pc, #20]	@ (8002aa4 <IsDataAvailable+0x1c>)
 8002a90:	f001 fa86 	bl	8003fa0 <HAL_GPIO_ReadPin>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	bf0c      	ite	eq
 8002a9a:	2301      	moveq	r3, #1
 8002a9c:	2300      	movne	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40020000 	.word	0x40020000

08002aa8 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8002aae:	4b13      	ldr	r3, [pc, #76]	@ (8002afc <hci_tl_lowlevel_init+0x54>)
 8002ab0:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8002ab2:	4b13      	ldr	r3, [pc, #76]	@ (8002b00 <hci_tl_lowlevel_init+0x58>)
 8002ab4:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8002ab6:	4b13      	ldr	r3, [pc, #76]	@ (8002b04 <hci_tl_lowlevel_init+0x5c>)
 8002ab8:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8002aba:	4b13      	ldr	r3, [pc, #76]	@ (8002b08 <hci_tl_lowlevel_init+0x60>)
 8002abc:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8002abe:	4b13      	ldr	r3, [pc, #76]	@ (8002b0c <hci_tl_lowlevel_init+0x64>)
 8002ac0:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8002ac2:	4b13      	ldr	r3, [pc, #76]	@ (8002b10 <hci_tl_lowlevel_init+0x68>)
 8002ac4:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8002ac6:	1d3b      	adds	r3, r7, #4
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f003 fd33 	bl	8006534 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8002ace:	f04f 61c0 	mov.w	r1, #100663296	@ 0x6000000
 8002ad2:	4810      	ldr	r0, [pc, #64]	@ (8002b14 <hci_tl_lowlevel_init+0x6c>)
 8002ad4:	f000 ffc3 	bl	8003a5e <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8002ad8:	4a0f      	ldr	r2, [pc, #60]	@ (8002b18 <hci_tl_lowlevel_init+0x70>)
 8002ada:	2100      	movs	r1, #0
 8002adc:	480d      	ldr	r0, [pc, #52]	@ (8002b14 <hci_tl_lowlevel_init+0x6c>)
 8002ade:	f000 ffa4 	bl	8003a2a <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	2006      	movs	r0, #6
 8002ae8:	f000 ff69 	bl	80039be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002aec:	2006      	movs	r0, #6
 8002aee:	f000 ff82 	bl	80039f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8002af2:	bf00      	nop
 8002af4:	3720      	adds	r7, #32
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	08002839 	.word	0x08002839
 8002b00:	080028c9 	.word	0x080028c9
 8002b04:	080029e1 	.word	0x080029e1
 8002b08:	0800292d 	.word	0x0800292d
 8002b0c:	080028f1 	.word	0x080028f1
 8002b10:	08002f9d 	.word	0x08002f9d
 8002b14:	20000110 	.word	0x20000110
 8002b18:	08002b1d 	.word	0x08002b1d

08002b1c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8002b20:	e005      	b.n	8002b2e <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8002b22:	2000      	movs	r0, #0
 8002b24:	f003 fe6a 	bl	80067fc <hci_notify_asynch_evt>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d105      	bne.n	8002b3a <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8002b2e:	f7ff ffab 	bl	8002a88 <IsDataAvailable>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f4      	bne.n	8002b22 <hci_tl_lowlevel_isr+0x6>
 8002b38:	e000      	b.n	8002b3c <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8002b3a:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b09a      	sub	sp, #104	@ 0x68
 8002b44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b46:	f000 fdc9 	bl	80036dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b4a:	f000 f81d 	bl	8002b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b4e:	f000 f8af 	bl	8002cb0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002b52:	f000 f883 	bl	8002c5c <MX_USART2_UART_Init>
  MX_BlueNRG_MS_Init();
 8002b56:	f7fd ff1f 	bl	8000998 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_MS_Process();
 8002b5a:	f7fd ffc9 	bl	8000af0 <MX_BlueNRG_MS_Process>
    /* USER CODE BEGIN 3 */
  	uart_buf_len = sprintf(uart_buf, "Hello :D\n"); // end line
 8002b5e:	463b      	mov	r3, r7
 8002b60:	4907      	ldr	r1, [pc, #28]	@ (8002b80 <main+0x40>)
 8002b62:	4618      	mov	r0, r3
 8002b64:	f004 f8dc 	bl	8006d20 <siprintf>
 8002b68:	6678      	str	r0, [r7, #100]	@ 0x64
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 1000); // transmits the data
 8002b6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	4639      	mov	r1, r7
 8002b70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b74:	4803      	ldr	r0, [pc, #12]	@ (8002b84 <main+0x44>)
 8002b76:	f002 fa6d 	bl	8005054 <HAL_UART_Transmit>
  MX_BlueNRG_MS_Process();
 8002b7a:	bf00      	nop
 8002b7c:	e7ed      	b.n	8002b5a <main+0x1a>
 8002b7e:	bf00      	nop
 8002b80:	08007ec0 	.word	0x08007ec0
 8002b84:	20000218 	.word	0x20000218

08002b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b094      	sub	sp, #80	@ 0x50
 8002b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b8e:	f107 0320 	add.w	r3, r7, #32
 8002b92:	2230      	movs	r2, #48	@ 0x30
 8002b94:	2100      	movs	r1, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f004 f925 	bl	8006de6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b9c:	f107 030c 	add.w	r3, r7, #12
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	605a      	str	r2, [r3, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
 8002ba8:	60da      	str	r2, [r3, #12]
 8002baa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bac:	2300      	movs	r3, #0
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	4b28      	ldr	r3, [pc, #160]	@ (8002c54 <SystemClock_Config+0xcc>)
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	4a27      	ldr	r2, [pc, #156]	@ (8002c54 <SystemClock_Config+0xcc>)
 8002bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bba:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bbc:	4b25      	ldr	r3, [pc, #148]	@ (8002c54 <SystemClock_Config+0xcc>)
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bc8:	2300      	movs	r3, #0
 8002bca:	607b      	str	r3, [r7, #4]
 8002bcc:	4b22      	ldr	r3, [pc, #136]	@ (8002c58 <SystemClock_Config+0xd0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002bd4:	4a20      	ldr	r2, [pc, #128]	@ (8002c58 <SystemClock_Config+0xd0>)
 8002bd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bda:	6013      	str	r3, [r2, #0]
 8002bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8002c58 <SystemClock_Config+0xd0>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002be4:	607b      	str	r3, [r7, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002be8:	2302      	movs	r3, #2
 8002bea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bec:	2301      	movs	r3, #1
 8002bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bf0:	2310      	movs	r3, #16
 8002bf2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002bfc:	2308      	movs	r3, #8
 8002bfe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8002c00:	2340      	movs	r3, #64	@ 0x40
 8002c02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c04:	2302      	movs	r3, #2
 8002c06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002c08:	2307      	movs	r3, #7
 8002c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c0c:	f107 0320 	add.w	r3, r7, #32
 8002c10:	4618      	mov	r0, r3
 8002c12:	f001 fa11 	bl	8004038 <HAL_RCC_OscConfig>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002c1c:	f000 f8be 	bl	8002d9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c20:	230f      	movs	r3, #15
 8002c22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c24:	2302      	movs	r3, #2
 8002c26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8002c28:	2390      	movs	r3, #144	@ 0x90
 8002c2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002c36:	f107 030c 	add.w	r3, r7, #12
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f001 fc73 	bl	8004528 <HAL_RCC_ClockConfig>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002c48:	f000 f8a8 	bl	8002d9c <Error_Handler>
  }
}
 8002c4c:	bf00      	nop
 8002c4e:	3750      	adds	r7, #80	@ 0x50
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40007000 	.word	0x40007000

08002c5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c60:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <MX_USART2_UART_Init+0x4c>)
 8002c62:	4a12      	ldr	r2, [pc, #72]	@ (8002cac <MX_USART2_UART_Init+0x50>)
 8002c64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c66:	4b10      	ldr	r3, [pc, #64]	@ (8002ca8 <MX_USART2_UART_Init+0x4c>)
 8002c68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca8 <MX_USART2_UART_Init+0x4c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c74:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca8 <MX_USART2_UART_Init+0x4c>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca8 <MX_USART2_UART_Init+0x4c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c80:	4b09      	ldr	r3, [pc, #36]	@ (8002ca8 <MX_USART2_UART_Init+0x4c>)
 8002c82:	220c      	movs	r2, #12
 8002c84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c86:	4b08      	ldr	r3, [pc, #32]	@ (8002ca8 <MX_USART2_UART_Init+0x4c>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ca8 <MX_USART2_UART_Init+0x4c>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c92:	4805      	ldr	r0, [pc, #20]	@ (8002ca8 <MX_USART2_UART_Init+0x4c>)
 8002c94:	f002 f98e 	bl	8004fb4 <HAL_UART_Init>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c9e:	f000 f87d 	bl	8002d9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000218 	.word	0x20000218
 8002cac:	40004400 	.word	0x40004400

08002cb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	@ 0x28
 8002cb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb6:	f107 0314 	add.w	r3, r7, #20
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	605a      	str	r2, [r3, #4]
 8002cc0:	609a      	str	r2, [r3, #8]
 8002cc2:	60da      	str	r2, [r3, #12]
 8002cc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	4b32      	ldr	r3, [pc, #200]	@ (8002d94 <MX_GPIO_Init+0xe4>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cce:	4a31      	ldr	r2, [pc, #196]	@ (8002d94 <MX_GPIO_Init+0xe4>)
 8002cd0:	f043 0304 	orr.w	r3, r3, #4
 8002cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8002d94 <MX_GPIO_Init+0xe4>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	4b2b      	ldr	r3, [pc, #172]	@ (8002d94 <MX_GPIO_Init+0xe4>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cea:	4a2a      	ldr	r2, [pc, #168]	@ (8002d94 <MX_GPIO_Init+0xe4>)
 8002cec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cf2:	4b28      	ldr	r3, [pc, #160]	@ (8002d94 <MX_GPIO_Init+0xe4>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	4b24      	ldr	r3, [pc, #144]	@ (8002d94 <MX_GPIO_Init+0xe4>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d06:	4a23      	ldr	r2, [pc, #140]	@ (8002d94 <MX_GPIO_Init+0xe4>)
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d0e:	4b21      	ldr	r3, [pc, #132]	@ (8002d94 <MX_GPIO_Init+0xe4>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002d94 <MX_GPIO_Init+0xe4>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d22:	4a1c      	ldr	r2, [pc, #112]	@ (8002d94 <MX_GPIO_Init+0xe4>)
 8002d24:	f043 0302 	orr.w	r3, r3, #2
 8002d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002d94 <MX_GPIO_Init+0xe4>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	607b      	str	r3, [r7, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8002d36:	2200      	movs	r2, #0
 8002d38:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002d3c:	4816      	ldr	r0, [pc, #88]	@ (8002d98 <MX_GPIO_Init+0xe8>)
 8002d3e:	f001 f947 	bl	8003fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d42:	2301      	movs	r3, #1
 8002d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d46:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d50:	f107 0314 	add.w	r3, r7, #20
 8002d54:	4619      	mov	r1, r3
 8002d56:	4810      	ldr	r0, [pc, #64]	@ (8002d98 <MX_GPIO_Init+0xe8>)
 8002d58:	f000 feba 	bl	8003ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8002d5c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002d60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d62:	2301      	movs	r3, #1
 8002d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6e:	f107 0314 	add.w	r3, r7, #20
 8002d72:	4619      	mov	r1, r3
 8002d74:	4808      	ldr	r0, [pc, #32]	@ (8002d98 <MX_GPIO_Init+0xe8>)
 8002d76:	f000 feab 	bl	8003ad0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	2006      	movs	r0, #6
 8002d80:	f000 fe1d 	bl	80039be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002d84:	2006      	movs	r0, #6
 8002d86:	f000 fe36 	bl	80039f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d8a:	bf00      	nop
 8002d8c:	3728      	adds	r7, #40	@ 0x28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800
 8002d98:	40020000 	.word	0x40020000

08002d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002da0:	b672      	cpsid	i
}
 8002da2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002da4:	bf00      	nop
 8002da6:	e7fd      	b.n	8002da4 <Error_Handler+0x8>

08002da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	4b10      	ldr	r3, [pc, #64]	@ (8002df4 <HAL_MspInit+0x4c>)
 8002db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db6:	4a0f      	ldr	r2, [pc, #60]	@ (8002df4 <HAL_MspInit+0x4c>)
 8002db8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002df4 <HAL_MspInit+0x4c>)
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dc6:	607b      	str	r3, [r7, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	603b      	str	r3, [r7, #0]
 8002dce:	4b09      	ldr	r3, [pc, #36]	@ (8002df4 <HAL_MspInit+0x4c>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd2:	4a08      	ldr	r2, [pc, #32]	@ (8002df4 <HAL_MspInit+0x4c>)
 8002dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dda:	4b06      	ldr	r3, [pc, #24]	@ (8002df4 <HAL_MspInit+0x4c>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002de6:	2007      	movs	r0, #7
 8002de8:	f000 fdde 	bl	80039a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40023800 	.word	0x40023800

08002df8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08a      	sub	sp, #40	@ 0x28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e00:	f107 0314 	add.w	r3, r7, #20
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a19      	ldr	r2, [pc, #100]	@ (8002e7c <HAL_UART_MspInit+0x84>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d12b      	bne.n	8002e72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	4b18      	ldr	r3, [pc, #96]	@ (8002e80 <HAL_UART_MspInit+0x88>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	4a17      	ldr	r2, [pc, #92]	@ (8002e80 <HAL_UART_MspInit+0x88>)
 8002e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e2a:	4b15      	ldr	r3, [pc, #84]	@ (8002e80 <HAL_UART_MspInit+0x88>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	4b11      	ldr	r3, [pc, #68]	@ (8002e80 <HAL_UART_MspInit+0x88>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3e:	4a10      	ldr	r2, [pc, #64]	@ (8002e80 <HAL_UART_MspInit+0x88>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e46:	4b0e      	ldr	r3, [pc, #56]	@ (8002e80 <HAL_UART_MspInit+0x88>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e52:	230c      	movs	r3, #12
 8002e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e56:	2302      	movs	r3, #2
 8002e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e62:	2307      	movs	r3, #7
 8002e64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e66:	f107 0314 	add.w	r3, r7, #20
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4805      	ldr	r0, [pc, #20]	@ (8002e84 <HAL_UART_MspInit+0x8c>)
 8002e6e:	f000 fe2f 	bl	8003ad0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002e72:	bf00      	nop
 8002e74:	3728      	adds	r7, #40	@ 0x28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40004400 	.word	0x40004400
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40020000 	.word	0x40020000

08002e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e8c:	bf00      	nop
 8002e8e:	e7fd      	b.n	8002e8c <NMI_Handler+0x4>

08002e90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e94:	bf00      	nop
 8002e96:	e7fd      	b.n	8002e94 <HardFault_Handler+0x4>

08002e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e9c:	bf00      	nop
 8002e9e:	e7fd      	b.n	8002e9c <MemManage_Handler+0x4>

08002ea0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ea4:	bf00      	nop
 8002ea6:	e7fd      	b.n	8002ea4 <BusFault_Handler+0x4>

08002ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002eac:	bf00      	nop
 8002eae:	e7fd      	b.n	8002eac <UsageFault_Handler+0x4>

08002eb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ed0:	bf00      	nop
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ede:	f000 fc4f 	bl	8003780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8002eec:	4802      	ldr	r0, [pc, #8]	@ (8002ef8 <EXTI0_IRQHandler+0x10>)
 8002eee:	f000 fdcb 	bl	8003a88 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000110 	.word	0x20000110

08002efc <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002f02:	2300      	movs	r3, #0
 8002f04:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8002f06:	4b12      	ldr	r3, [pc, #72]	@ (8002f50 <BSP_SPI1_Init+0x54>)
 8002f08:	4a12      	ldr	r2, [pc, #72]	@ (8002f54 <BSP_SPI1_Init+0x58>)
 8002f0a:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8002f0c:	4b12      	ldr	r3, [pc, #72]	@ (8002f58 <BSP_SPI1_Init+0x5c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	4911      	ldr	r1, [pc, #68]	@ (8002f58 <BSP_SPI1_Init+0x5c>)
 8002f14:	600a      	str	r2, [r1, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d114      	bne.n	8002f44 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8002f1a:	480d      	ldr	r0, [pc, #52]	@ (8002f50 <BSP_SPI1_Init+0x54>)
 8002f1c:	f001 ff60 	bl	8004de0 <HAL_SPI_GetState>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10e      	bne.n	8002f44 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8002f26:	480a      	ldr	r0, [pc, #40]	@ (8002f50 <BSP_SPI1_Init+0x54>)
 8002f28:	f000 f87c 	bl	8003024 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d108      	bne.n	8002f44 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8002f32:	4807      	ldr	r0, [pc, #28]	@ (8002f50 <BSP_SPI1_Init+0x54>)
 8002f34:	f000 f83a 	bl	8002fac <MX_SPI1_Init>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8002f3e:	f06f 0307 	mvn.w	r3, #7
 8002f42:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8002f44:	687b      	ldr	r3, [r7, #4]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000260 	.word	0x20000260
 8002f54:	40013000 	.word	0x40013000
 8002f58:	200002b8 	.word	0x200002b8

08002f5c <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	4613      	mov	r3, r2
 8002f68:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002f74:	9200      	str	r2, [sp, #0]
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	68f9      	ldr	r1, [r7, #12]
 8002f7a:	4807      	ldr	r0, [pc, #28]	@ (8002f98 <BSP_SPI1_SendRecv+0x3c>)
 8002f7c:	f001 fd87 	bl	8004a8e <HAL_SPI_TransmitReceive>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002f86:	f06f 0305 	mvn.w	r3, #5
 8002f8a:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8002f8c:	697b      	ldr	r3, [r7, #20]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000260 	.word	0x20000260

08002f9c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002fa0:	f000 fc02 	bl	80037a8 <HAL_GetTick>
 8002fa4:	4603      	mov	r3, r0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a19      	ldr	r2, [pc, #100]	@ (8003020 <MX_SPI1_Init+0x74>)
 8002fbc:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002fc4:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fe4:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2218      	movs	r2, #24
 8002fea:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 10;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	220a      	movs	r2, #10
 8003002:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f001 fcaf 	bl	8004968 <HAL_SPI_Init>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003014:	7bfb      	ldrb	r3, [r7, #15]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40013000 	.word	0x40013000

08003024 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08a      	sub	sp, #40	@ 0x28
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800302c:	2300      	movs	r3, #0
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	4b2d      	ldr	r3, [pc, #180]	@ (80030e8 <SPI1_MspInit+0xc4>)
 8003032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003034:	4a2c      	ldr	r2, [pc, #176]	@ (80030e8 <SPI1_MspInit+0xc4>)
 8003036:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800303a:	6453      	str	r3, [r2, #68]	@ 0x44
 800303c:	4b2a      	ldr	r3, [pc, #168]	@ (80030e8 <SPI1_MspInit+0xc4>)
 800303e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003040:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003048:	2300      	movs	r3, #0
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	4b26      	ldr	r3, [pc, #152]	@ (80030e8 <SPI1_MspInit+0xc4>)
 800304e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003050:	4a25      	ldr	r2, [pc, #148]	@ (80030e8 <SPI1_MspInit+0xc4>)
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	6313      	str	r3, [r2, #48]	@ 0x30
 8003058:	4b23      	ldr	r3, [pc, #140]	@ (80030e8 <SPI1_MspInit+0xc4>)
 800305a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003064:	2300      	movs	r3, #0
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	4b1f      	ldr	r3, [pc, #124]	@ (80030e8 <SPI1_MspInit+0xc4>)
 800306a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306c:	4a1e      	ldr	r2, [pc, #120]	@ (80030e8 <SPI1_MspInit+0xc4>)
 800306e:	f043 0302 	orr.w	r3, r3, #2
 8003072:	6313      	str	r3, [r2, #48]	@ 0x30
 8003074:	4b1c      	ldr	r3, [pc, #112]	@ (80030e8 <SPI1_MspInit+0xc4>)
 8003076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8003080:	2340      	movs	r3, #64	@ 0x40
 8003082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003084:	2302      	movs	r3, #2
 8003086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800308c:	2303      	movs	r3, #3
 800308e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8003090:	2305      	movs	r3, #5
 8003092:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003094:	f107 0314 	add.w	r3, r7, #20
 8003098:	4619      	mov	r1, r3
 800309a:	4814      	ldr	r0, [pc, #80]	@ (80030ec <SPI1_MspInit+0xc8>)
 800309c:	f000 fd18 	bl	8003ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80030a0:	2380      	movs	r3, #128	@ 0x80
 80030a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a4:	2302      	movs	r3, #2
 80030a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ac:	2303      	movs	r3, #3
 80030ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80030b0:	2305      	movs	r3, #5
 80030b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80030b4:	f107 0314 	add.w	r3, r7, #20
 80030b8:	4619      	mov	r1, r3
 80030ba:	480c      	ldr	r0, [pc, #48]	@ (80030ec <SPI1_MspInit+0xc8>)
 80030bc:	f000 fd08 	bl	8003ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80030c0:	2308      	movs	r3, #8
 80030c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c4:	2302      	movs	r3, #2
 80030c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030cc:	2303      	movs	r3, #3
 80030ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80030d0:	2305      	movs	r3, #5
 80030d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80030d4:	f107 0314 	add.w	r3, r7, #20
 80030d8:	4619      	mov	r1, r3
 80030da:	4805      	ldr	r0, [pc, #20]	@ (80030f0 <SPI1_MspInit+0xcc>)
 80030dc:	f000 fcf8 	bl	8003ad0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80030e0:	bf00      	nop
 80030e2:	3728      	adds	r7, #40	@ 0x28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40020000 	.word	0x40020000
 80030f0:	40020400 	.word	0x40020400

080030f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  return 1;
 80030f8:	2301      	movs	r3, #1
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <_kill>:

int _kill(int pid, int sig)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800310e:	f003 feb9 	bl	8006e84 <__errno>
 8003112:	4603      	mov	r3, r0
 8003114:	2216      	movs	r2, #22
 8003116:	601a      	str	r2, [r3, #0]
  return -1;
 8003118:	f04f 33ff 	mov.w	r3, #4294967295
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <_exit>:

void _exit (int status)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800312c:	f04f 31ff 	mov.w	r1, #4294967295
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff ffe7 	bl	8003104 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003136:	bf00      	nop
 8003138:	e7fd      	b.n	8003136 <_exit+0x12>

0800313a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b086      	sub	sp, #24
 800313e:	af00      	add	r7, sp, #0
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	e00a      	b.n	8003162 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800314c:	f3af 8000 	nop.w
 8003150:	4601      	mov	r1, r0
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	60ba      	str	r2, [r7, #8]
 8003158:	b2ca      	uxtb	r2, r1
 800315a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	3301      	adds	r3, #1
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	429a      	cmp	r2, r3
 8003168:	dbf0      	blt.n	800314c <_read+0x12>
  }

  return len;
 800316a:	687b      	ldr	r3, [r7, #4]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	e009      	b.n	800319a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	60ba      	str	r2, [r7, #8]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fa3e 	bl	8003610 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	3301      	adds	r3, #1
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	429a      	cmp	r2, r3
 80031a0:	dbf1      	blt.n	8003186 <_write+0x12>
  }
  return len;
 80031a2:	687b      	ldr	r3, [r7, #4]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <_close>:

int _close(int file)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031d4:	605a      	str	r2, [r3, #4]
  return 0;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <_isatty>:

int _isatty(int file)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031ec:	2301      	movs	r3, #1
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b085      	sub	sp, #20
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800321c:	4a14      	ldr	r2, [pc, #80]	@ (8003270 <_sbrk+0x5c>)
 800321e:	4b15      	ldr	r3, [pc, #84]	@ (8003274 <_sbrk+0x60>)
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003228:	4b13      	ldr	r3, [pc, #76]	@ (8003278 <_sbrk+0x64>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d102      	bne.n	8003236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003230:	4b11      	ldr	r3, [pc, #68]	@ (8003278 <_sbrk+0x64>)
 8003232:	4a12      	ldr	r2, [pc, #72]	@ (800327c <_sbrk+0x68>)
 8003234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003236:	4b10      	ldr	r3, [pc, #64]	@ (8003278 <_sbrk+0x64>)
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4413      	add	r3, r2
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	429a      	cmp	r2, r3
 8003242:	d207      	bcs.n	8003254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003244:	f003 fe1e 	bl	8006e84 <__errno>
 8003248:	4603      	mov	r3, r0
 800324a:	220c      	movs	r2, #12
 800324c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800324e:	f04f 33ff 	mov.w	r3, #4294967295
 8003252:	e009      	b.n	8003268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003254:	4b08      	ldr	r3, [pc, #32]	@ (8003278 <_sbrk+0x64>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800325a:	4b07      	ldr	r3, [pc, #28]	@ (8003278 <_sbrk+0x64>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4413      	add	r3, r2
 8003262:	4a05      	ldr	r2, [pc, #20]	@ (8003278 <_sbrk+0x64>)
 8003264:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003266:	68fb      	ldr	r3, [r7, #12]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	20018000 	.word	0x20018000
 8003274:	00000400 	.word	0x00000400
 8003278:	200002bc 	.word	0x200002bc
 800327c:	20000748 	.word	0x20000748

08003280 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003284:	4b06      	ldr	r3, [pc, #24]	@ (80032a0 <SystemInit+0x20>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328a:	4a05      	ldr	r2, [pc, #20]	@ (80032a0 <SystemInit+0x20>)
 800328c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003290:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003294:	bf00      	nop
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80032a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80032a8:	f7ff ffea 	bl	8003280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032ac:	480c      	ldr	r0, [pc, #48]	@ (80032e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032ae:	490d      	ldr	r1, [pc, #52]	@ (80032e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032b0:	4a0d      	ldr	r2, [pc, #52]	@ (80032e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032b4:	e002      	b.n	80032bc <LoopCopyDataInit>

080032b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ba:	3304      	adds	r3, #4

080032bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032c0:	d3f9      	bcc.n	80032b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032c2:	4a0a      	ldr	r2, [pc, #40]	@ (80032ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032c4:	4c0a      	ldr	r4, [pc, #40]	@ (80032f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80032c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032c8:	e001      	b.n	80032ce <LoopFillZerobss>

080032ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032cc:	3204      	adds	r2, #4

080032ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032d0:	d3fb      	bcc.n	80032ca <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80032d2:	f003 fddd 	bl	8006e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032d6:	f7ff fc33 	bl	8002b40 <main>
  bx  lr    
 80032da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80032dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80032e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032e4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80032e8:	08007fe8 	.word	0x08007fe8
  ldr r2, =_sbss
 80032ec:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80032f0:	20000748 	.word	0x20000748

080032f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032f4:	e7fe      	b.n	80032f4 <ADC_IRQHandler>
	...

080032f8 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	4a04      	ldr	r2, [pc, #16]	@ (8003318 <BSP_LED_Init+0x20>)
 8003306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800330a:	4798      	blx	r3
  return BSP_ERROR_NONE;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	08007ee4 	.word	0x08007ee4

0800331c <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	4a06      	ldr	r2, [pc, #24]	@ (8003344 <BSP_LED_Toggle+0x28>)
 800332a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800332e:	2220      	movs	r2, #32
 8003330:	4611      	mov	r1, r2
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fe65 	bl	8004002 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000008 	.word	0x20000008

08003348 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800334e:	2300      	movs	r3, #0
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	4b1c      	ldr	r3, [pc, #112]	@ (80033c4 <LED_USER_GPIO_Init+0x7c>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003356:	4a1b      	ldr	r2, [pc, #108]	@ (80033c4 <LED_USER_GPIO_Init+0x7c>)
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	6313      	str	r3, [r2, #48]	@ 0x30
 800335e:	4b19      	ldr	r3, [pc, #100]	@ (80033c4 <LED_USER_GPIO_Init+0x7c>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	60bb      	str	r3, [r7, #8]
 8003368:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800336a:	f107 030c 	add.w	r3, r7, #12
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	605a      	str	r2, [r3, #4]
 8003374:	609a      	str	r2, [r3, #8]
 8003376:	60da      	str	r2, [r3, #12]
 8003378:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	607b      	str	r3, [r7, #4]
 800337e:	4b11      	ldr	r3, [pc, #68]	@ (80033c4 <LED_USER_GPIO_Init+0x7c>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	4a10      	ldr	r2, [pc, #64]	@ (80033c4 <LED_USER_GPIO_Init+0x7c>)
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	6313      	str	r3, [r2, #48]	@ 0x30
 800338a:	4b0e      	ldr	r3, [pc, #56]	@ (80033c4 <LED_USER_GPIO_Init+0x7c>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	607b      	str	r3, [r7, #4]
 8003394:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8003396:	2200      	movs	r2, #0
 8003398:	2120      	movs	r1, #32
 800339a:	480b      	ldr	r0, [pc, #44]	@ (80033c8 <LED_USER_GPIO_Init+0x80>)
 800339c:	f000 fe18 	bl	8003fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 80033a0:	2320      	movs	r3, #32
 80033a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033a4:	2301      	movs	r3, #1
 80033a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ac:	2300      	movs	r3, #0
 80033ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80033b0:	f107 030c 	add.w	r3, r7, #12
 80033b4:	4619      	mov	r1, r3
 80033b6:	4804      	ldr	r0, [pc, #16]	@ (80033c8 <LED_USER_GPIO_Init+0x80>)
 80033b8:	f000 fb8a 	bl	8003ad0 <HAL_GPIO_Init>

}
 80033bc:	bf00      	nop
 80033be:	3720      	adds	r7, #32
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40023800 	.word	0x40023800
 80033c8:	40020000 	.word	0x40020000

080033cc <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	460a      	mov	r2, r1
 80033d6:	71fb      	strb	r3, [r7, #7]
 80033d8:	4613      	mov	r3, r2
 80033da:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80033dc:	2300      	movs	r3, #0
 80033de:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003460 <BSP_PB_Init+0x94>)
 80033e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e8:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 80033ea:	79bb      	ldrb	r3, [r7, #6]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d132      	bne.n	8003456 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003464 <BSP_PB_Init+0x98>)
 80033f6:	441a      	add	r2, r3
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	491b      	ldr	r1, [pc, #108]	@ (8003468 <BSP_PB_Init+0x9c>)
 80033fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003400:	4619      	mov	r1, r3
 8003402:	4610      	mov	r0, r2
 8003404:	f000 fb2b 	bl	8003a5e <HAL_EXTI_GetHandle>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800340e:	f06f 0303 	mvn.w	r3, #3
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	e01f      	b.n	8003456 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	4a12      	ldr	r2, [pc, #72]	@ (8003464 <BSP_PB_Init+0x98>)
 800341c:	1898      	adds	r0, r3, r2
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	4a12      	ldr	r2, [pc, #72]	@ (800346c <BSP_PB_Init+0xa0>)
 8003422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003426:	461a      	mov	r2, r3
 8003428:	2100      	movs	r1, #0
 800342a:	f000 fafe 	bl	8003a2a <HAL_EXTI_RegisterCallback>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003434:	f06f 0303 	mvn.w	r3, #3
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	e00c      	b.n	8003456 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800343c:	2028      	movs	r0, #40	@ 0x28
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	4a0b      	ldr	r2, [pc, #44]	@ (8003470 <BSP_PB_Init+0xa4>)
 8003442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003446:	2200      	movs	r2, #0
 8003448:	4619      	mov	r1, r3
 800344a:	f000 fab8 	bl	80039be <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800344e:	2328      	movs	r3, #40	@ 0x28
 8003450:	4618      	mov	r0, r3
 8003452:	f000 fad0 	bl	80039f6 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8003456:	68fb      	ldr	r3, [r7, #12]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	08007ee8 	.word	0x08007ee8
 8003464:	20000010 	.word	0x20000010
 8003468:	08007eec 	.word	0x08007eec
 800346c:	08007ef0 	.word	0x08007ef0
 8003470:	08007ef4 	.word	0x08007ef4

08003474 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	4a09      	ldr	r2, [pc, #36]	@ (80034a8 <BSP_PB_GetState+0x34>)
 8003482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003486:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800348a:	4611      	mov	r1, r2
 800348c:	4618      	mov	r0, r3
 800348e:	f000 fd87 	bl	8003fa0 <HAL_GPIO_ReadPin>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	b2db      	uxtb	r3, r3
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	2000000c 	.word	0x2000000c

080034ac <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80034b0:	2000      	movs	r0, #0
 80034b2:	f7fe fd77 	bl	8001fa4 <BSP_PB_Callback>
}
 80034b6:	bf00      	nop
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 80034bc:	b580      	push	{r7, lr}
 80034be:	b088      	sub	sp, #32
 80034c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034c2:	2300      	movs	r3, #0
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003530 <BUTTON_USER_GPIO_Init+0x74>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ca:	4a19      	ldr	r2, [pc, #100]	@ (8003530 <BUTTON_USER_GPIO_Init+0x74>)
 80034cc:	f043 0304 	orr.w	r3, r3, #4
 80034d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034d2:	4b17      	ldr	r3, [pc, #92]	@ (8003530 <BUTTON_USER_GPIO_Init+0x74>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034de:	f107 030c 	add.w	r3, r7, #12
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	605a      	str	r2, [r3, #4]
 80034e8:	609a      	str	r2, [r3, #8]
 80034ea:	60da      	str	r2, [r3, #12]
 80034ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003530 <BUTTON_USER_GPIO_Init+0x74>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f6:	4a0e      	ldr	r2, [pc, #56]	@ (8003530 <BUTTON_USER_GPIO_Init+0x74>)
 80034f8:	f043 0304 	orr.w	r3, r3, #4
 80034fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003530 <BUTTON_USER_GPIO_Init+0x74>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	607b      	str	r3, [r7, #4]
 8003508:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800350a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800350e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003510:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800351a:	f107 030c 	add.w	r3, r7, #12
 800351e:	4619      	mov	r1, r3
 8003520:	4804      	ldr	r0, [pc, #16]	@ (8003534 <BUTTON_USER_GPIO_Init+0x78>)
 8003522:	f000 fad5 	bl	8003ad0 <HAL_GPIO_Init>

}
 8003526:	bf00      	nop
 8003528:	3720      	adds	r7, #32
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40023800 	.word	0x40023800
 8003534:	40020800 	.word	0x40020800

08003538 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d903      	bls.n	8003554 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800354c:	f06f 0301 	mvn.w	r3, #1
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	e025      	b.n	80035a0 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	79fa      	ldrb	r2, [r7, #7]
 8003558:	4914      	ldr	r1, [pc, #80]	@ (80035ac <BSP_COM_Init+0x74>)
 800355a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800355e:	4814      	ldr	r0, [pc, #80]	@ (80035b0 <BSP_COM_Init+0x78>)
 8003560:	4613      	mov	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4413      	add	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4403      	add	r3, r0
 800356a:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 800356c:	79fa      	ldrb	r2, [r7, #7]
 800356e:	4613      	mov	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	4413      	add	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4a0e      	ldr	r2, [pc, #56]	@ (80035b0 <BSP_COM_Init+0x78>)
 8003578:	4413      	add	r3, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f000 f864 	bl	8003648 <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8003580:	79fa      	ldrb	r2, [r7, #7]
 8003582:	4613      	mov	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4413      	add	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	4a09      	ldr	r2, [pc, #36]	@ (80035b0 <BSP_COM_Init+0x78>)
 800358c:	4413      	add	r3, r2
 800358e:	4618      	mov	r0, r3
 8003590:	f000 f810 	bl	80035b4 <MX_USART1_UART_Init>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800359a:	f06f 0303 	mvn.w	r3, #3
 800359e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80035a0:	68fb      	ldr	r3, [r7, #12]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000018 	.word	0x20000018
 80035b0:	200002c0 	.word	0x200002c0

080035b4 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a12      	ldr	r2, [pc, #72]	@ (800360c <MX_USART1_UART_Init+0x58>)
 80035c4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80035cc:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	220c      	movs	r2, #12
 80035e4:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f001 fcde 	bl	8004fb4 <HAL_UART_Init>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <MX_USART1_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003602:	7bfb      	ldrb	r3, [r7, #15]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40011000 	.word	0x40011000

08003610 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8003618:	4b09      	ldr	r3, [pc, #36]	@ (8003640 <__io_putchar+0x30>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	461a      	mov	r2, r3
 800361e:	4613      	mov	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	4413      	add	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	4a07      	ldr	r2, [pc, #28]	@ (8003644 <__io_putchar+0x34>)
 8003628:	1898      	adds	r0, r3, r2
 800362a:	1d39      	adds	r1, r7, #4
 800362c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003630:	2201      	movs	r2, #1
 8003632:	f001 fd0f 	bl	8005054 <HAL_UART_Transmit>
  return ch;
 8003636:	687b      	ldr	r3, [r7, #4]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000308 	.word	0x20000308
 8003644:	200002c0 	.word	0x200002c0

08003648 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b08a      	sub	sp, #40	@ 0x28
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003650:	2300      	movs	r3, #0
 8003652:	613b      	str	r3, [r7, #16]
 8003654:	4b1f      	ldr	r3, [pc, #124]	@ (80036d4 <USART1_MspInit+0x8c>)
 8003656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003658:	4a1e      	ldr	r2, [pc, #120]	@ (80036d4 <USART1_MspInit+0x8c>)
 800365a:	f043 0310 	orr.w	r3, r3, #16
 800365e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003660:	4b1c      	ldr	r3, [pc, #112]	@ (80036d4 <USART1_MspInit+0x8c>)
 8003662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003664:	f003 0310 	and.w	r3, r3, #16
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	4b18      	ldr	r3, [pc, #96]	@ (80036d4 <USART1_MspInit+0x8c>)
 8003672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003674:	4a17      	ldr	r2, [pc, #92]	@ (80036d4 <USART1_MspInit+0x8c>)
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	6313      	str	r3, [r2, #48]	@ 0x30
 800367c:	4b15      	ldr	r3, [pc, #84]	@ (80036d4 <USART1_MspInit+0x8c>)
 800367e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8003688:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800368c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368e:	2302      	movs	r3, #2
 8003690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003696:	2303      	movs	r3, #3
 8003698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 800369a:	2307      	movs	r3, #7
 800369c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 800369e:	f107 0314 	add.w	r3, r7, #20
 80036a2:	4619      	mov	r1, r3
 80036a4:	480c      	ldr	r0, [pc, #48]	@ (80036d8 <USART1_MspInit+0x90>)
 80036a6:	f000 fa13 	bl	8003ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 80036aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b0:	2302      	movs	r3, #2
 80036b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b8:	2303      	movs	r3, #3
 80036ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 80036bc:	2307      	movs	r3, #7
 80036be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 80036c0:	f107 0314 	add.w	r3, r7, #20
 80036c4:	4619      	mov	r1, r3
 80036c6:	4804      	ldr	r0, [pc, #16]	@ (80036d8 <USART1_MspInit+0x90>)
 80036c8:	f000 fa02 	bl	8003ad0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 80036cc:	bf00      	nop
 80036ce:	3728      	adds	r7, #40	@ 0x28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40020000 	.word	0x40020000

080036dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036e0:	4b0e      	ldr	r3, [pc, #56]	@ (800371c <HAL_Init+0x40>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a0d      	ldr	r2, [pc, #52]	@ (800371c <HAL_Init+0x40>)
 80036e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036ec:	4b0b      	ldr	r3, [pc, #44]	@ (800371c <HAL_Init+0x40>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a0a      	ldr	r2, [pc, #40]	@ (800371c <HAL_Init+0x40>)
 80036f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036f8:	4b08      	ldr	r3, [pc, #32]	@ (800371c <HAL_Init+0x40>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a07      	ldr	r2, [pc, #28]	@ (800371c <HAL_Init+0x40>)
 80036fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003702:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003704:	2003      	movs	r0, #3
 8003706:	f000 f94f 	bl	80039a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800370a:	2000      	movs	r0, #0
 800370c:	f000 f808 	bl	8003720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003710:	f7ff fb4a 	bl	8002da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40023c00 	.word	0x40023c00

08003720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003728:	4b12      	ldr	r3, [pc, #72]	@ (8003774 <HAL_InitTick+0x54>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	4b12      	ldr	r3, [pc, #72]	@ (8003778 <HAL_InitTick+0x58>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	4619      	mov	r1, r3
 8003732:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003736:	fbb3 f3f1 	udiv	r3, r3, r1
 800373a:	fbb2 f3f3 	udiv	r3, r2, r3
 800373e:	4618      	mov	r0, r3
 8003740:	f000 f967 	bl	8003a12 <HAL_SYSTICK_Config>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e00e      	b.n	800376c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b0f      	cmp	r3, #15
 8003752:	d80a      	bhi.n	800376a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003754:	2200      	movs	r2, #0
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	f04f 30ff 	mov.w	r0, #4294967295
 800375c:	f000 f92f 	bl	80039be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003760:	4a06      	ldr	r2, [pc, #24]	@ (800377c <HAL_InitTick+0x5c>)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	e000      	b.n	800376c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
}
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	20000004 	.word	0x20000004
 8003778:	20000020 	.word	0x20000020
 800377c:	2000001c 	.word	0x2000001c

08003780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003784:	4b06      	ldr	r3, [pc, #24]	@ (80037a0 <HAL_IncTick+0x20>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	461a      	mov	r2, r3
 800378a:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <HAL_IncTick+0x24>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4413      	add	r3, r2
 8003790:	4a04      	ldr	r2, [pc, #16]	@ (80037a4 <HAL_IncTick+0x24>)
 8003792:	6013      	str	r3, [r2, #0]
}
 8003794:	bf00      	nop
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20000020 	.word	0x20000020
 80037a4:	2000030c 	.word	0x2000030c

080037a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  return uwTick;
 80037ac:	4b03      	ldr	r3, [pc, #12]	@ (80037bc <HAL_GetTick+0x14>)
 80037ae:	681b      	ldr	r3, [r3, #0]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	2000030c 	.word	0x2000030c

080037c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037c8:	f7ff ffee 	bl	80037a8 <HAL_GetTick>
 80037cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d8:	d005      	beq.n	80037e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037da:	4b0a      	ldr	r3, [pc, #40]	@ (8003804 <HAL_Delay+0x44>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	461a      	mov	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4413      	add	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037e6:	bf00      	nop
 80037e8:	f7ff ffde 	bl	80037a8 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d8f7      	bhi.n	80037e8 <HAL_Delay+0x28>
  {
  }
}
 80037f8:	bf00      	nop
 80037fa:	bf00      	nop
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	20000020 	.word	0x20000020

08003808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003818:	4b0c      	ldr	r3, [pc, #48]	@ (800384c <__NVIC_SetPriorityGrouping+0x44>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003824:	4013      	ands	r3, r2
 8003826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003830:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800383a:	4a04      	ldr	r2, [pc, #16]	@ (800384c <__NVIC_SetPriorityGrouping+0x44>)
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	60d3      	str	r3, [r2, #12]
}
 8003840:	bf00      	nop
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003854:	4b04      	ldr	r3, [pc, #16]	@ (8003868 <__NVIC_GetPriorityGrouping+0x18>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	0a1b      	lsrs	r3, r3, #8
 800385a:	f003 0307 	and.w	r3, r3, #7
}
 800385e:	4618      	mov	r0, r3
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	e000ed00 	.word	0xe000ed00

0800386c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387a:	2b00      	cmp	r3, #0
 800387c:	db0b      	blt.n	8003896 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800387e:	79fb      	ldrb	r3, [r7, #7]
 8003880:	f003 021f 	and.w	r2, r3, #31
 8003884:	4907      	ldr	r1, [pc, #28]	@ (80038a4 <__NVIC_EnableIRQ+0x38>)
 8003886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388a:	095b      	lsrs	r3, r3, #5
 800388c:	2001      	movs	r0, #1
 800388e:	fa00 f202 	lsl.w	r2, r0, r2
 8003892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	e000e100 	.word	0xe000e100

080038a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	6039      	str	r1, [r7, #0]
 80038b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	db0a      	blt.n	80038d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	490c      	ldr	r1, [pc, #48]	@ (80038f4 <__NVIC_SetPriority+0x4c>)
 80038c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c6:	0112      	lsls	r2, r2, #4
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	440b      	add	r3, r1
 80038cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038d0:	e00a      	b.n	80038e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	4908      	ldr	r1, [pc, #32]	@ (80038f8 <__NVIC_SetPriority+0x50>)
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	3b04      	subs	r3, #4
 80038e0:	0112      	lsls	r2, r2, #4
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	440b      	add	r3, r1
 80038e6:	761a      	strb	r2, [r3, #24]
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	e000e100 	.word	0xe000e100
 80038f8:	e000ed00 	.word	0xe000ed00

080038fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b089      	sub	sp, #36	@ 0x24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f1c3 0307 	rsb	r3, r3, #7
 8003916:	2b04      	cmp	r3, #4
 8003918:	bf28      	it	cs
 800391a:	2304      	movcs	r3, #4
 800391c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	3304      	adds	r3, #4
 8003922:	2b06      	cmp	r3, #6
 8003924:	d902      	bls.n	800392c <NVIC_EncodePriority+0x30>
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	3b03      	subs	r3, #3
 800392a:	e000      	b.n	800392e <NVIC_EncodePriority+0x32>
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003930:	f04f 32ff 	mov.w	r2, #4294967295
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43da      	mvns	r2, r3
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	401a      	ands	r2, r3
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003944:	f04f 31ff 	mov.w	r1, #4294967295
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	fa01 f303 	lsl.w	r3, r1, r3
 800394e:	43d9      	mvns	r1, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003954:	4313      	orrs	r3, r2
         );
}
 8003956:	4618      	mov	r0, r3
 8003958:	3724      	adds	r7, #36	@ 0x24
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
	...

08003964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3b01      	subs	r3, #1
 8003970:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003974:	d301      	bcc.n	800397a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003976:	2301      	movs	r3, #1
 8003978:	e00f      	b.n	800399a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800397a:	4a0a      	ldr	r2, [pc, #40]	@ (80039a4 <SysTick_Config+0x40>)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3b01      	subs	r3, #1
 8003980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003982:	210f      	movs	r1, #15
 8003984:	f04f 30ff 	mov.w	r0, #4294967295
 8003988:	f7ff ff8e 	bl	80038a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800398c:	4b05      	ldr	r3, [pc, #20]	@ (80039a4 <SysTick_Config+0x40>)
 800398e:	2200      	movs	r2, #0
 8003990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003992:	4b04      	ldr	r3, [pc, #16]	@ (80039a4 <SysTick_Config+0x40>)
 8003994:	2207      	movs	r2, #7
 8003996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	e000e010 	.word	0xe000e010

080039a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7ff ff29 	bl	8003808 <__NVIC_SetPriorityGrouping>
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039be:	b580      	push	{r7, lr}
 80039c0:	b086      	sub	sp, #24
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	4603      	mov	r3, r0
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	607a      	str	r2, [r7, #4]
 80039ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039d0:	f7ff ff3e 	bl	8003850 <__NVIC_GetPriorityGrouping>
 80039d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	68b9      	ldr	r1, [r7, #8]
 80039da:	6978      	ldr	r0, [r7, #20]
 80039dc:	f7ff ff8e 	bl	80038fc <NVIC_EncodePriority>
 80039e0:	4602      	mov	r2, r0
 80039e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039e6:	4611      	mov	r1, r2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff ff5d 	bl	80038a8 <__NVIC_SetPriority>
}
 80039ee:	bf00      	nop
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b082      	sub	sp, #8
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	4603      	mov	r3, r0
 80039fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff ff31 	bl	800386c <__NVIC_EnableIRQ>
}
 8003a0a:	bf00      	nop
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff ffa2 	bl	8003964 <SysTick_Config>
 8003a20:	4603      	mov	r3, r0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b087      	sub	sp, #28
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	460b      	mov	r3, r1
 8003a34:	607a      	str	r2, [r7, #4]
 8003a36:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8003a3c:	7afb      	ldrb	r3, [r7, #11]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d103      	bne.n	8003a4a <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	605a      	str	r2, [r3, #4]
      break;
 8003a48:	e002      	b.n	8003a50 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a4e:	bf00      	nop
  }

  return status;
 8003a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	371c      	adds	r7, #28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e003      	b.n	8003a7a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003a78:	2300      	movs	r3, #0
  }
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
	...

08003a88 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 031f 	and.w	r3, r3, #31
 8003a98:	2201      	movs	r2, #1
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8003aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8003acc <HAL_EXTI_IRQHandler+0x44>)
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d009      	beq.n	8003ac4 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8003ab0:	4a06      	ldr	r2, [pc, #24]	@ (8003acc <HAL_EXTI_IRQHandler+0x44>)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	4798      	blx	r3
    }
  }
}
 8003ac4:	bf00      	nop
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40013c00 	.word	0x40013c00

08003ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b089      	sub	sp, #36	@ 0x24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	e159      	b.n	8003da0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003aec:	2201      	movs	r2, #1
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	4013      	ands	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	f040 8148 	bne.w	8003d9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d005      	beq.n	8003b22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d130      	bne.n	8003b84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43db      	mvns	r3, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4013      	ands	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b58:	2201      	movs	r2, #1
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4013      	ands	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 0201 	and.w	r2, r3, #1
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d017      	beq.n	8003bc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	2203      	movs	r2, #3
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 0303 	and.w	r3, r3, #3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d123      	bne.n	8003c14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	08da      	lsrs	r2, r3, #3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3208      	adds	r2, #8
 8003bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	220f      	movs	r2, #15
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	43db      	mvns	r3, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	08da      	lsrs	r2, r3, #3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3208      	adds	r2, #8
 8003c0e:	69b9      	ldr	r1, [r7, #24]
 8003c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	2203      	movs	r2, #3
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	43db      	mvns	r3, r3
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 0203 	and.w	r2, r3, #3
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 80a2 	beq.w	8003d9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	4b57      	ldr	r3, [pc, #348]	@ (8003db8 <HAL_GPIO_Init+0x2e8>)
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5e:	4a56      	ldr	r2, [pc, #344]	@ (8003db8 <HAL_GPIO_Init+0x2e8>)
 8003c60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c64:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c66:	4b54      	ldr	r3, [pc, #336]	@ (8003db8 <HAL_GPIO_Init+0x2e8>)
 8003c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c72:	4a52      	ldr	r2, [pc, #328]	@ (8003dbc <HAL_GPIO_Init+0x2ec>)
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	089b      	lsrs	r3, r3, #2
 8003c78:	3302      	adds	r3, #2
 8003c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	220f      	movs	r2, #15
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	4013      	ands	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a49      	ldr	r2, [pc, #292]	@ (8003dc0 <HAL_GPIO_Init+0x2f0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d019      	beq.n	8003cd2 <HAL_GPIO_Init+0x202>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a48      	ldr	r2, [pc, #288]	@ (8003dc4 <HAL_GPIO_Init+0x2f4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d013      	beq.n	8003cce <HAL_GPIO_Init+0x1fe>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a47      	ldr	r2, [pc, #284]	@ (8003dc8 <HAL_GPIO_Init+0x2f8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d00d      	beq.n	8003cca <HAL_GPIO_Init+0x1fa>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a46      	ldr	r2, [pc, #280]	@ (8003dcc <HAL_GPIO_Init+0x2fc>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d007      	beq.n	8003cc6 <HAL_GPIO_Init+0x1f6>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a45      	ldr	r2, [pc, #276]	@ (8003dd0 <HAL_GPIO_Init+0x300>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d101      	bne.n	8003cc2 <HAL_GPIO_Init+0x1f2>
 8003cbe:	2304      	movs	r3, #4
 8003cc0:	e008      	b.n	8003cd4 <HAL_GPIO_Init+0x204>
 8003cc2:	2307      	movs	r3, #7
 8003cc4:	e006      	b.n	8003cd4 <HAL_GPIO_Init+0x204>
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e004      	b.n	8003cd4 <HAL_GPIO_Init+0x204>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e002      	b.n	8003cd4 <HAL_GPIO_Init+0x204>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <HAL_GPIO_Init+0x204>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	f002 0203 	and.w	r2, r2, #3
 8003cda:	0092      	lsls	r2, r2, #2
 8003cdc:	4093      	lsls	r3, r2
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ce4:	4935      	ldr	r1, [pc, #212]	@ (8003dbc <HAL_GPIO_Init+0x2ec>)
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	089b      	lsrs	r3, r3, #2
 8003cea:	3302      	adds	r3, #2
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cf2:	4b38      	ldr	r3, [pc, #224]	@ (8003dd4 <HAL_GPIO_Init+0x304>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d16:	4a2f      	ldr	r2, [pc, #188]	@ (8003dd4 <HAL_GPIO_Init+0x304>)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003dd4 <HAL_GPIO_Init+0x304>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	43db      	mvns	r3, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d40:	4a24      	ldr	r2, [pc, #144]	@ (8003dd4 <HAL_GPIO_Init+0x304>)
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d46:	4b23      	ldr	r3, [pc, #140]	@ (8003dd4 <HAL_GPIO_Init+0x304>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4013      	ands	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d6a:	4a1a      	ldr	r2, [pc, #104]	@ (8003dd4 <HAL_GPIO_Init+0x304>)
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d70:	4b18      	ldr	r3, [pc, #96]	@ (8003dd4 <HAL_GPIO_Init+0x304>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d94:	4a0f      	ldr	r2, [pc, #60]	@ (8003dd4 <HAL_GPIO_Init+0x304>)
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	61fb      	str	r3, [r7, #28]
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	2b0f      	cmp	r3, #15
 8003da4:	f67f aea2 	bls.w	8003aec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003da8:	bf00      	nop
 8003daa:	bf00      	nop
 8003dac:	3724      	adds	r7, #36	@ 0x24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40013800 	.word	0x40013800
 8003dc0:	40020000 	.word	0x40020000
 8003dc4:	40020400 	.word	0x40020400
 8003dc8:	40020800 	.word	0x40020800
 8003dcc:	40020c00 	.word	0x40020c00
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40013c00 	.word	0x40013c00

08003dd8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	e0bb      	b.n	8003f6c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003df4:	2201      	movs	r2, #1
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	4013      	ands	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	f040 80ab 	bne.w	8003f66 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003e10:	4a5c      	ldr	r2, [pc, #368]	@ (8003f84 <HAL_GPIO_DeInit+0x1ac>)
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	089b      	lsrs	r3, r3, #2
 8003e16:	3302      	adds	r3, #2
 8003e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e1c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f003 0303 	and.w	r3, r3, #3
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	220f      	movs	r2, #15
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a54      	ldr	r2, [pc, #336]	@ (8003f88 <HAL_GPIO_DeInit+0x1b0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d019      	beq.n	8003e6e <HAL_GPIO_DeInit+0x96>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a53      	ldr	r2, [pc, #332]	@ (8003f8c <HAL_GPIO_DeInit+0x1b4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d013      	beq.n	8003e6a <HAL_GPIO_DeInit+0x92>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a52      	ldr	r2, [pc, #328]	@ (8003f90 <HAL_GPIO_DeInit+0x1b8>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d00d      	beq.n	8003e66 <HAL_GPIO_DeInit+0x8e>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a51      	ldr	r2, [pc, #324]	@ (8003f94 <HAL_GPIO_DeInit+0x1bc>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d007      	beq.n	8003e62 <HAL_GPIO_DeInit+0x8a>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a50      	ldr	r2, [pc, #320]	@ (8003f98 <HAL_GPIO_DeInit+0x1c0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d101      	bne.n	8003e5e <HAL_GPIO_DeInit+0x86>
 8003e5a:	2304      	movs	r3, #4
 8003e5c:	e008      	b.n	8003e70 <HAL_GPIO_DeInit+0x98>
 8003e5e:	2307      	movs	r3, #7
 8003e60:	e006      	b.n	8003e70 <HAL_GPIO_DeInit+0x98>
 8003e62:	2303      	movs	r3, #3
 8003e64:	e004      	b.n	8003e70 <HAL_GPIO_DeInit+0x98>
 8003e66:	2302      	movs	r3, #2
 8003e68:	e002      	b.n	8003e70 <HAL_GPIO_DeInit+0x98>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <HAL_GPIO_DeInit+0x98>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	f002 0203 	and.w	r2, r2, #3
 8003e76:	0092      	lsls	r2, r2, #2
 8003e78:	4093      	lsls	r3, r2
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d132      	bne.n	8003ee6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003e80:	4b46      	ldr	r3, [pc, #280]	@ (8003f9c <HAL_GPIO_DeInit+0x1c4>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	43db      	mvns	r3, r3
 8003e88:	4944      	ldr	r1, [pc, #272]	@ (8003f9c <HAL_GPIO_DeInit+0x1c4>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003e8e:	4b43      	ldr	r3, [pc, #268]	@ (8003f9c <HAL_GPIO_DeInit+0x1c4>)
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	43db      	mvns	r3, r3
 8003e96:	4941      	ldr	r1, [pc, #260]	@ (8003f9c <HAL_GPIO_DeInit+0x1c4>)
 8003e98:	4013      	ands	r3, r2
 8003e9a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003e9c:	4b3f      	ldr	r3, [pc, #252]	@ (8003f9c <HAL_GPIO_DeInit+0x1c4>)
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	493d      	ldr	r1, [pc, #244]	@ (8003f9c <HAL_GPIO_DeInit+0x1c4>)
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003eaa:	4b3c      	ldr	r3, [pc, #240]	@ (8003f9c <HAL_GPIO_DeInit+0x1c4>)
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	493a      	ldr	r1, [pc, #232]	@ (8003f9c <HAL_GPIO_DeInit+0x1c4>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	220f      	movs	r2, #15
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003ec8:	4a2e      	ldr	r2, [pc, #184]	@ (8003f84 <HAL_GPIO_DeInit+0x1ac>)
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	089b      	lsrs	r3, r3, #2
 8003ece:	3302      	adds	r3, #2
 8003ed0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	43da      	mvns	r2, r3
 8003ed8:	482a      	ldr	r0, [pc, #168]	@ (8003f84 <HAL_GPIO_DeInit+0x1ac>)
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	089b      	lsrs	r3, r3, #2
 8003ede:	400a      	ands	r2, r1
 8003ee0:	3302      	adds	r3, #2
 8003ee2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	2103      	movs	r1, #3
 8003ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	401a      	ands	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	08da      	lsrs	r2, r3, #3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3208      	adds	r2, #8
 8003f04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	220f      	movs	r2, #15
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	43db      	mvns	r3, r3
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	08d2      	lsrs	r2, r2, #3
 8003f1c:	4019      	ands	r1, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3208      	adds	r2, #8
 8003f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	2103      	movs	r1, #3
 8003f30:	fa01 f303 	lsl.w	r3, r1, r3
 8003f34:	43db      	mvns	r3, r3
 8003f36:	401a      	ands	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	2101      	movs	r1, #1
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	fa01 f303 	lsl.w	r3, r1, r3
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	401a      	ands	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	2103      	movs	r1, #3
 8003f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	401a      	ands	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2b0f      	cmp	r3, #15
 8003f70:	f67f af40 	bls.w	8003df4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop
 8003f78:	371c      	adds	r7, #28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40013800 	.word	0x40013800
 8003f88:	40020000 	.word	0x40020000
 8003f8c:	40020400 	.word	0x40020400
 8003f90:	40020800 	.word	0x40020800
 8003f94:	40020c00 	.word	0x40020c00
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	40013c00 	.word	0x40013c00

08003fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	887b      	ldrh	r3, [r7, #2]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	73fb      	strb	r3, [r7, #15]
 8003fbc:	e001      	b.n	8003fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	807b      	strh	r3, [r7, #2]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fe0:	787b      	ldrb	r3, [r7, #1]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fe6:	887a      	ldrh	r2, [r7, #2]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fec:	e003      	b.n	8003ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fee:	887b      	ldrh	r3, [r7, #2]
 8003ff0:	041a      	lsls	r2, r3, #16
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	619a      	str	r2, [r3, #24]
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004002:	b480      	push	{r7}
 8004004:	b085      	sub	sp, #20
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	460b      	mov	r3, r1
 800400c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004014:	887a      	ldrh	r2, [r7, #2]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4013      	ands	r3, r2
 800401a:	041a      	lsls	r2, r3, #16
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	43d9      	mvns	r1, r3
 8004020:	887b      	ldrh	r3, [r7, #2]
 8004022:	400b      	ands	r3, r1
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	619a      	str	r2, [r3, #24]
}
 800402a:	bf00      	nop
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
	...

08004038 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e267      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d075      	beq.n	8004142 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004056:	4b88      	ldr	r3, [pc, #544]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
 800405e:	2b04      	cmp	r3, #4
 8004060:	d00c      	beq.n	800407c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004062:	4b85      	ldr	r3, [pc, #532]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800406a:	2b08      	cmp	r3, #8
 800406c:	d112      	bne.n	8004094 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800406e:	4b82      	ldr	r3, [pc, #520]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004076:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800407a:	d10b      	bne.n	8004094 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800407c:	4b7e      	ldr	r3, [pc, #504]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d05b      	beq.n	8004140 <HAL_RCC_OscConfig+0x108>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d157      	bne.n	8004140 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e242      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800409c:	d106      	bne.n	80040ac <HAL_RCC_OscConfig+0x74>
 800409e:	4b76      	ldr	r3, [pc, #472]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a75      	ldr	r2, [pc, #468]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 80040a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	e01d      	b.n	80040e8 <HAL_RCC_OscConfig+0xb0>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040b4:	d10c      	bne.n	80040d0 <HAL_RCC_OscConfig+0x98>
 80040b6:	4b70      	ldr	r3, [pc, #448]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a6f      	ldr	r2, [pc, #444]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 80040bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	4b6d      	ldr	r3, [pc, #436]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a6c      	ldr	r2, [pc, #432]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 80040c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	e00b      	b.n	80040e8 <HAL_RCC_OscConfig+0xb0>
 80040d0:	4b69      	ldr	r3, [pc, #420]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a68      	ldr	r2, [pc, #416]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 80040d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	4b66      	ldr	r3, [pc, #408]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a65      	ldr	r2, [pc, #404]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 80040e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d013      	beq.n	8004118 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f0:	f7ff fb5a 	bl	80037a8 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040f8:	f7ff fb56 	bl	80037a8 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b64      	cmp	r3, #100	@ 0x64
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e207      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410a:	4b5b      	ldr	r3, [pc, #364]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0f0      	beq.n	80040f8 <HAL_RCC_OscConfig+0xc0>
 8004116:	e014      	b.n	8004142 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004118:	f7ff fb46 	bl	80037a8 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004120:	f7ff fb42 	bl	80037a8 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b64      	cmp	r3, #100	@ 0x64
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e1f3      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004132:	4b51      	ldr	r3, [pc, #324]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f0      	bne.n	8004120 <HAL_RCC_OscConfig+0xe8>
 800413e:	e000      	b.n	8004142 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d063      	beq.n	8004216 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800414e:	4b4a      	ldr	r3, [pc, #296]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00b      	beq.n	8004172 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800415a:	4b47      	ldr	r3, [pc, #284]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004162:	2b08      	cmp	r3, #8
 8004164:	d11c      	bne.n	80041a0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004166:	4b44      	ldr	r3, [pc, #272]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d116      	bne.n	80041a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004172:	4b41      	ldr	r3, [pc, #260]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d005      	beq.n	800418a <HAL_RCC_OscConfig+0x152>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d001      	beq.n	800418a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e1c7      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800418a:	4b3b      	ldr	r3, [pc, #236]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	4937      	ldr	r1, [pc, #220]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 800419a:	4313      	orrs	r3, r2
 800419c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800419e:	e03a      	b.n	8004216 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d020      	beq.n	80041ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041a8:	4b34      	ldr	r3, [pc, #208]	@ (800427c <HAL_RCC_OscConfig+0x244>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ae:	f7ff fafb 	bl	80037a8 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b6:	f7ff faf7 	bl	80037a8 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e1a8      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f0      	beq.n	80041b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d4:	4b28      	ldr	r3, [pc, #160]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	4925      	ldr	r1, [pc, #148]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	600b      	str	r3, [r1, #0]
 80041e8:	e015      	b.n	8004216 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ea:	4b24      	ldr	r3, [pc, #144]	@ (800427c <HAL_RCC_OscConfig+0x244>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f0:	f7ff fada 	bl	80037a8 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f8:	f7ff fad6 	bl	80037a8 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e187      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800420a:	4b1b      	ldr	r3, [pc, #108]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f0      	bne.n	80041f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d036      	beq.n	8004290 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d016      	beq.n	8004258 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800422a:	4b15      	ldr	r3, [pc, #84]	@ (8004280 <HAL_RCC_OscConfig+0x248>)
 800422c:	2201      	movs	r2, #1
 800422e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004230:	f7ff faba 	bl	80037a8 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004238:	f7ff fab6 	bl	80037a8 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e167      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800424a:	4b0b      	ldr	r3, [pc, #44]	@ (8004278 <HAL_RCC_OscConfig+0x240>)
 800424c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f0      	beq.n	8004238 <HAL_RCC_OscConfig+0x200>
 8004256:	e01b      	b.n	8004290 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004258:	4b09      	ldr	r3, [pc, #36]	@ (8004280 <HAL_RCC_OscConfig+0x248>)
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425e:	f7ff faa3 	bl	80037a8 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004264:	e00e      	b.n	8004284 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004266:	f7ff fa9f 	bl	80037a8 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d907      	bls.n	8004284 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e150      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
 8004278:	40023800 	.word	0x40023800
 800427c:	42470000 	.word	0x42470000
 8004280:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004284:	4b88      	ldr	r3, [pc, #544]	@ (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004286:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1ea      	bne.n	8004266 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 8097 	beq.w	80043cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800429e:	2300      	movs	r3, #0
 80042a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042a2:	4b81      	ldr	r3, [pc, #516]	@ (80044a8 <HAL_RCC_OscConfig+0x470>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10f      	bne.n	80042ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ae:	2300      	movs	r3, #0
 80042b0:	60bb      	str	r3, [r7, #8]
 80042b2:	4b7d      	ldr	r3, [pc, #500]	@ (80044a8 <HAL_RCC_OscConfig+0x470>)
 80042b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b6:	4a7c      	ldr	r2, [pc, #496]	@ (80044a8 <HAL_RCC_OscConfig+0x470>)
 80042b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80042be:	4b7a      	ldr	r3, [pc, #488]	@ (80044a8 <HAL_RCC_OscConfig+0x470>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c6:	60bb      	str	r3, [r7, #8]
 80042c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ca:	2301      	movs	r3, #1
 80042cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ce:	4b77      	ldr	r3, [pc, #476]	@ (80044ac <HAL_RCC_OscConfig+0x474>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d118      	bne.n	800430c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042da:	4b74      	ldr	r3, [pc, #464]	@ (80044ac <HAL_RCC_OscConfig+0x474>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a73      	ldr	r2, [pc, #460]	@ (80044ac <HAL_RCC_OscConfig+0x474>)
 80042e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e6:	f7ff fa5f 	bl	80037a8 <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ee:	f7ff fa5b 	bl	80037a8 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e10c      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004300:	4b6a      	ldr	r3, [pc, #424]	@ (80044ac <HAL_RCC_OscConfig+0x474>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0f0      	beq.n	80042ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d106      	bne.n	8004322 <HAL_RCC_OscConfig+0x2ea>
 8004314:	4b64      	ldr	r3, [pc, #400]	@ (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004318:	4a63      	ldr	r2, [pc, #396]	@ (80044a8 <HAL_RCC_OscConfig+0x470>)
 800431a:	f043 0301 	orr.w	r3, r3, #1
 800431e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004320:	e01c      	b.n	800435c <HAL_RCC_OscConfig+0x324>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2b05      	cmp	r3, #5
 8004328:	d10c      	bne.n	8004344 <HAL_RCC_OscConfig+0x30c>
 800432a:	4b5f      	ldr	r3, [pc, #380]	@ (80044a8 <HAL_RCC_OscConfig+0x470>)
 800432c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800432e:	4a5e      	ldr	r2, [pc, #376]	@ (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004330:	f043 0304 	orr.w	r3, r3, #4
 8004334:	6713      	str	r3, [r2, #112]	@ 0x70
 8004336:	4b5c      	ldr	r3, [pc, #368]	@ (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800433a:	4a5b      	ldr	r2, [pc, #364]	@ (80044a8 <HAL_RCC_OscConfig+0x470>)
 800433c:	f043 0301 	orr.w	r3, r3, #1
 8004340:	6713      	str	r3, [r2, #112]	@ 0x70
 8004342:	e00b      	b.n	800435c <HAL_RCC_OscConfig+0x324>
 8004344:	4b58      	ldr	r3, [pc, #352]	@ (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004348:	4a57      	ldr	r2, [pc, #348]	@ (80044a8 <HAL_RCC_OscConfig+0x470>)
 800434a:	f023 0301 	bic.w	r3, r3, #1
 800434e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004350:	4b55      	ldr	r3, [pc, #340]	@ (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004354:	4a54      	ldr	r2, [pc, #336]	@ (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004356:	f023 0304 	bic.w	r3, r3, #4
 800435a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d015      	beq.n	8004390 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004364:	f7ff fa20 	bl	80037a8 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436a:	e00a      	b.n	8004382 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436c:	f7ff fa1c 	bl	80037a8 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800437a:	4293      	cmp	r3, r2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e0cb      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004382:	4b49      	ldr	r3, [pc, #292]	@ (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0ee      	beq.n	800436c <HAL_RCC_OscConfig+0x334>
 800438e:	e014      	b.n	80043ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004390:	f7ff fa0a 	bl	80037a8 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004396:	e00a      	b.n	80043ae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004398:	f7ff fa06 	bl	80037a8 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e0b5      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ae:	4b3e      	ldr	r3, [pc, #248]	@ (80044a8 <HAL_RCC_OscConfig+0x470>)
 80043b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1ee      	bne.n	8004398 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043ba:	7dfb      	ldrb	r3, [r7, #23]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d105      	bne.n	80043cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c0:	4b39      	ldr	r3, [pc, #228]	@ (80044a8 <HAL_RCC_OscConfig+0x470>)
 80043c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c4:	4a38      	ldr	r2, [pc, #224]	@ (80044a8 <HAL_RCC_OscConfig+0x470>)
 80043c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 80a1 	beq.w	8004518 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043d6:	4b34      	ldr	r3, [pc, #208]	@ (80044a8 <HAL_RCC_OscConfig+0x470>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
 80043de:	2b08      	cmp	r3, #8
 80043e0:	d05c      	beq.n	800449c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d141      	bne.n	800446e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ea:	4b31      	ldr	r3, [pc, #196]	@ (80044b0 <HAL_RCC_OscConfig+0x478>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f0:	f7ff f9da 	bl	80037a8 <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f8:	f7ff f9d6 	bl	80037a8 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e087      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440a:	4b27      	ldr	r3, [pc, #156]	@ (80044a8 <HAL_RCC_OscConfig+0x470>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f0      	bne.n	80043f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69da      	ldr	r2, [r3, #28]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004424:	019b      	lsls	r3, r3, #6
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442c:	085b      	lsrs	r3, r3, #1
 800442e:	3b01      	subs	r3, #1
 8004430:	041b      	lsls	r3, r3, #16
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004438:	061b      	lsls	r3, r3, #24
 800443a:	491b      	ldr	r1, [pc, #108]	@ (80044a8 <HAL_RCC_OscConfig+0x470>)
 800443c:	4313      	orrs	r3, r2
 800443e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004440:	4b1b      	ldr	r3, [pc, #108]	@ (80044b0 <HAL_RCC_OscConfig+0x478>)
 8004442:	2201      	movs	r2, #1
 8004444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004446:	f7ff f9af 	bl	80037a8 <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800444e:	f7ff f9ab 	bl	80037a8 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e05c      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004460:	4b11      	ldr	r3, [pc, #68]	@ (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d0f0      	beq.n	800444e <HAL_RCC_OscConfig+0x416>
 800446c:	e054      	b.n	8004518 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800446e:	4b10      	ldr	r3, [pc, #64]	@ (80044b0 <HAL_RCC_OscConfig+0x478>)
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004474:	f7ff f998 	bl	80037a8 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800447c:	f7ff f994 	bl	80037a8 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e045      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448e:	4b06      	ldr	r3, [pc, #24]	@ (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0x444>
 800449a:	e03d      	b.n	8004518 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d107      	bne.n	80044b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e038      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
 80044a8:	40023800 	.word	0x40023800
 80044ac:	40007000 	.word	0x40007000
 80044b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004524 <HAL_RCC_OscConfig+0x4ec>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d028      	beq.n	8004514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d121      	bne.n	8004514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044da:	429a      	cmp	r2, r3
 80044dc:	d11a      	bne.n	8004514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044e4:	4013      	ands	r3, r2
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d111      	bne.n	8004514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fa:	085b      	lsrs	r3, r3, #1
 80044fc:	3b01      	subs	r3, #1
 80044fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004500:	429a      	cmp	r2, r3
 8004502:	d107      	bne.n	8004514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004510:	429a      	cmp	r2, r3
 8004512:	d001      	beq.n	8004518 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e000      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40023800 	.word	0x40023800

08004528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e0cc      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800453c:	4b68      	ldr	r3, [pc, #416]	@ (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d90c      	bls.n	8004564 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454a:	4b65      	ldr	r3, [pc, #404]	@ (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004552:	4b63      	ldr	r3, [pc, #396]	@ (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d001      	beq.n	8004564 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e0b8      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d020      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d005      	beq.n	8004588 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800457c:	4b59      	ldr	r3, [pc, #356]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	4a58      	ldr	r2, [pc, #352]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004586:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004594:	4b53      	ldr	r3, [pc, #332]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	4a52      	ldr	r2, [pc, #328]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800459e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a0:	4b50      	ldr	r3, [pc, #320]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	494d      	ldr	r1, [pc, #308]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d044      	beq.n	8004648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d107      	bne.n	80045d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c6:	4b47      	ldr	r3, [pc, #284]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d119      	bne.n	8004606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e07f      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d003      	beq.n	80045e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	d107      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e6:	4b3f      	ldr	r3, [pc, #252]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d109      	bne.n	8004606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e06f      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f6:	4b3b      	ldr	r3, [pc, #236]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e067      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004606:	4b37      	ldr	r3, [pc, #220]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f023 0203 	bic.w	r2, r3, #3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	4934      	ldr	r1, [pc, #208]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004614:	4313      	orrs	r3, r2
 8004616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004618:	f7ff f8c6 	bl	80037a8 <HAL_GetTick>
 800461c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461e:	e00a      	b.n	8004636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004620:	f7ff f8c2 	bl	80037a8 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800462e:	4293      	cmp	r3, r2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e04f      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004636:	4b2b      	ldr	r3, [pc, #172]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 020c 	and.w	r2, r3, #12
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	429a      	cmp	r2, r3
 8004646:	d1eb      	bne.n	8004620 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004648:	4b25      	ldr	r3, [pc, #148]	@ (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d20c      	bcs.n	8004670 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004656:	4b22      	ldr	r3, [pc, #136]	@ (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800465e:	4b20      	ldr	r3, [pc, #128]	@ (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d001      	beq.n	8004670 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e032      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d008      	beq.n	800468e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800467c:	4b19      	ldr	r3, [pc, #100]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	4916      	ldr	r1, [pc, #88]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	4313      	orrs	r3, r2
 800468c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d009      	beq.n	80046ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800469a:	4b12      	ldr	r3, [pc, #72]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	490e      	ldr	r1, [pc, #56]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046ae:	f000 f821 	bl	80046f4 <HAL_RCC_GetSysClockFreq>
 80046b2:	4602      	mov	r2, r0
 80046b4:	4b0b      	ldr	r3, [pc, #44]	@ (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	091b      	lsrs	r3, r3, #4
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	490a      	ldr	r1, [pc, #40]	@ (80046e8 <HAL_RCC_ClockConfig+0x1c0>)
 80046c0:	5ccb      	ldrb	r3, [r1, r3]
 80046c2:	fa22 f303 	lsr.w	r3, r2, r3
 80046c6:	4a09      	ldr	r2, [pc, #36]	@ (80046ec <HAL_RCC_ClockConfig+0x1c4>)
 80046c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80046ca:	4b09      	ldr	r3, [pc, #36]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff f826 	bl	8003720 <HAL_InitTick>

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	40023c00 	.word	0x40023c00
 80046e4:	40023800 	.word	0x40023800
 80046e8:	08007ecc 	.word	0x08007ecc
 80046ec:	20000004 	.word	0x20000004
 80046f0:	2000001c 	.word	0x2000001c

080046f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046f8:	b094      	sub	sp, #80	@ 0x50
 80046fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800470c:	4b79      	ldr	r3, [pc, #484]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 030c 	and.w	r3, r3, #12
 8004714:	2b08      	cmp	r3, #8
 8004716:	d00d      	beq.n	8004734 <HAL_RCC_GetSysClockFreq+0x40>
 8004718:	2b08      	cmp	r3, #8
 800471a:	f200 80e1 	bhi.w	80048e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <HAL_RCC_GetSysClockFreq+0x34>
 8004722:	2b04      	cmp	r3, #4
 8004724:	d003      	beq.n	800472e <HAL_RCC_GetSysClockFreq+0x3a>
 8004726:	e0db      	b.n	80048e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004728:	4b73      	ldr	r3, [pc, #460]	@ (80048f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800472a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800472c:	e0db      	b.n	80048e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800472e:	4b73      	ldr	r3, [pc, #460]	@ (80048fc <HAL_RCC_GetSysClockFreq+0x208>)
 8004730:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004732:	e0d8      	b.n	80048e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004734:	4b6f      	ldr	r3, [pc, #444]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800473c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800473e:	4b6d      	ldr	r3, [pc, #436]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d063      	beq.n	8004812 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800474a:	4b6a      	ldr	r3, [pc, #424]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	099b      	lsrs	r3, r3, #6
 8004750:	2200      	movs	r2, #0
 8004752:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004754:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800475c:	633b      	str	r3, [r7, #48]	@ 0x30
 800475e:	2300      	movs	r3, #0
 8004760:	637b      	str	r3, [r7, #52]	@ 0x34
 8004762:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004766:	4622      	mov	r2, r4
 8004768:	462b      	mov	r3, r5
 800476a:	f04f 0000 	mov.w	r0, #0
 800476e:	f04f 0100 	mov.w	r1, #0
 8004772:	0159      	lsls	r1, r3, #5
 8004774:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004778:	0150      	lsls	r0, r2, #5
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4621      	mov	r1, r4
 8004780:	1a51      	subs	r1, r2, r1
 8004782:	6139      	str	r1, [r7, #16]
 8004784:	4629      	mov	r1, r5
 8004786:	eb63 0301 	sbc.w	r3, r3, r1
 800478a:	617b      	str	r3, [r7, #20]
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004798:	4659      	mov	r1, fp
 800479a:	018b      	lsls	r3, r1, #6
 800479c:	4651      	mov	r1, sl
 800479e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047a2:	4651      	mov	r1, sl
 80047a4:	018a      	lsls	r2, r1, #6
 80047a6:	4651      	mov	r1, sl
 80047a8:	ebb2 0801 	subs.w	r8, r2, r1
 80047ac:	4659      	mov	r1, fp
 80047ae:	eb63 0901 	sbc.w	r9, r3, r1
 80047b2:	f04f 0200 	mov.w	r2, #0
 80047b6:	f04f 0300 	mov.w	r3, #0
 80047ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047c6:	4690      	mov	r8, r2
 80047c8:	4699      	mov	r9, r3
 80047ca:	4623      	mov	r3, r4
 80047cc:	eb18 0303 	adds.w	r3, r8, r3
 80047d0:	60bb      	str	r3, [r7, #8]
 80047d2:	462b      	mov	r3, r5
 80047d4:	eb49 0303 	adc.w	r3, r9, r3
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	f04f 0200 	mov.w	r2, #0
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047e6:	4629      	mov	r1, r5
 80047e8:	024b      	lsls	r3, r1, #9
 80047ea:	4621      	mov	r1, r4
 80047ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047f0:	4621      	mov	r1, r4
 80047f2:	024a      	lsls	r2, r1, #9
 80047f4:	4610      	mov	r0, r2
 80047f6:	4619      	mov	r1, r3
 80047f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047fa:	2200      	movs	r2, #0
 80047fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004800:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004804:	f7fb ff50 	bl	80006a8 <__aeabi_uldivmod>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	4613      	mov	r3, r2
 800480e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004810:	e058      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004812:	4b38      	ldr	r3, [pc, #224]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	099b      	lsrs	r3, r3, #6
 8004818:	2200      	movs	r2, #0
 800481a:	4618      	mov	r0, r3
 800481c:	4611      	mov	r1, r2
 800481e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004822:	623b      	str	r3, [r7, #32]
 8004824:	2300      	movs	r3, #0
 8004826:	627b      	str	r3, [r7, #36]	@ 0x24
 8004828:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800482c:	4642      	mov	r2, r8
 800482e:	464b      	mov	r3, r9
 8004830:	f04f 0000 	mov.w	r0, #0
 8004834:	f04f 0100 	mov.w	r1, #0
 8004838:	0159      	lsls	r1, r3, #5
 800483a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800483e:	0150      	lsls	r0, r2, #5
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4641      	mov	r1, r8
 8004846:	ebb2 0a01 	subs.w	sl, r2, r1
 800484a:	4649      	mov	r1, r9
 800484c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800485c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004860:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004864:	ebb2 040a 	subs.w	r4, r2, sl
 8004868:	eb63 050b 	sbc.w	r5, r3, fp
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	00eb      	lsls	r3, r5, #3
 8004876:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800487a:	00e2      	lsls	r2, r4, #3
 800487c:	4614      	mov	r4, r2
 800487e:	461d      	mov	r5, r3
 8004880:	4643      	mov	r3, r8
 8004882:	18e3      	adds	r3, r4, r3
 8004884:	603b      	str	r3, [r7, #0]
 8004886:	464b      	mov	r3, r9
 8004888:	eb45 0303 	adc.w	r3, r5, r3
 800488c:	607b      	str	r3, [r7, #4]
 800488e:	f04f 0200 	mov.w	r2, #0
 8004892:	f04f 0300 	mov.w	r3, #0
 8004896:	e9d7 4500 	ldrd	r4, r5, [r7]
 800489a:	4629      	mov	r1, r5
 800489c:	028b      	lsls	r3, r1, #10
 800489e:	4621      	mov	r1, r4
 80048a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048a4:	4621      	mov	r1, r4
 80048a6:	028a      	lsls	r2, r1, #10
 80048a8:	4610      	mov	r0, r2
 80048aa:	4619      	mov	r1, r3
 80048ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048ae:	2200      	movs	r2, #0
 80048b0:	61bb      	str	r3, [r7, #24]
 80048b2:	61fa      	str	r2, [r7, #28]
 80048b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048b8:	f7fb fef6 	bl	80006a8 <__aeabi_uldivmod>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	4613      	mov	r3, r2
 80048c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80048c4:	4b0b      	ldr	r3, [pc, #44]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	0c1b      	lsrs	r3, r3, #16
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	3301      	adds	r3, #1
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80048d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048de:	e002      	b.n	80048e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048e0:	4b05      	ldr	r3, [pc, #20]	@ (80048f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80048e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3750      	adds	r7, #80	@ 0x50
 80048ec:	46bd      	mov	sp, r7
 80048ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048f2:	bf00      	nop
 80048f4:	40023800 	.word	0x40023800
 80048f8:	00f42400 	.word	0x00f42400
 80048fc:	007a1200 	.word	0x007a1200

08004900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004904:	4b03      	ldr	r3, [pc, #12]	@ (8004914 <HAL_RCC_GetHCLKFreq+0x14>)
 8004906:	681b      	ldr	r3, [r3, #0]
}
 8004908:	4618      	mov	r0, r3
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	20000004 	.word	0x20000004

08004918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800491c:	f7ff fff0 	bl	8004900 <HAL_RCC_GetHCLKFreq>
 8004920:	4602      	mov	r2, r0
 8004922:	4b05      	ldr	r3, [pc, #20]	@ (8004938 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	0a9b      	lsrs	r3, r3, #10
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	4903      	ldr	r1, [pc, #12]	@ (800493c <HAL_RCC_GetPCLK1Freq+0x24>)
 800492e:	5ccb      	ldrb	r3, [r1, r3]
 8004930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004934:	4618      	mov	r0, r3
 8004936:	bd80      	pop	{r7, pc}
 8004938:	40023800 	.word	0x40023800
 800493c:	08007edc 	.word	0x08007edc

08004940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004944:	f7ff ffdc 	bl	8004900 <HAL_RCC_GetHCLKFreq>
 8004948:	4602      	mov	r2, r0
 800494a:	4b05      	ldr	r3, [pc, #20]	@ (8004960 <HAL_RCC_GetPCLK2Freq+0x20>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	0b5b      	lsrs	r3, r3, #13
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	4903      	ldr	r1, [pc, #12]	@ (8004964 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004956:	5ccb      	ldrb	r3, [r1, r3]
 8004958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800495c:	4618      	mov	r0, r3
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40023800 	.word	0x40023800
 8004964:	08007edc 	.word	0x08007edc

08004968 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e07b      	b.n	8004a72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497e:	2b00      	cmp	r3, #0
 8004980:	d108      	bne.n	8004994 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800498a:	d009      	beq.n	80049a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	61da      	str	r2, [r3, #28]
 8004992:	e005      	b.n	80049a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d106      	bne.n	80049c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f85d 	bl	8004a7a <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a10:	431a      	orrs	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a24:	ea42 0103 	orr.w	r1, r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a2c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	0c1b      	lsrs	r3, r3, #16
 8004a3e:	f003 0104 	and.w	r1, r3, #4
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a46:	f003 0210 	and.w	r2, r3, #16
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69da      	ldr	r2, [r3, #28]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b08a      	sub	sp, #40	@ 0x28
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	60b9      	str	r1, [r7, #8]
 8004a98:	607a      	str	r2, [r7, #4]
 8004a9a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aa0:	f7fe fe82 	bl	80037a8 <HAL_GetTick>
 8004aa4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004aac:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004ab4:	887b      	ldrh	r3, [r7, #2]
 8004ab6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ab8:	7ffb      	ldrb	r3, [r7, #31]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d00c      	beq.n	8004ad8 <HAL_SPI_TransmitReceive+0x4a>
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ac4:	d106      	bne.n	8004ad4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d102      	bne.n	8004ad4 <HAL_SPI_TransmitReceive+0x46>
 8004ace:	7ffb      	ldrb	r3, [r7, #31]
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d001      	beq.n	8004ad8 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e17f      	b.n	8004dd8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d005      	beq.n	8004aea <HAL_SPI_TransmitReceive+0x5c>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <HAL_SPI_TransmitReceive+0x5c>
 8004ae4:	887b      	ldrh	r3, [r7, #2]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e174      	b.n	8004dd8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d101      	bne.n	8004afc <HAL_SPI_TransmitReceive+0x6e>
 8004af8:	2302      	movs	r3, #2
 8004afa:	e16d      	b.n	8004dd8 <HAL_SPI_TransmitReceive+0x34a>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d003      	beq.n	8004b18 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2205      	movs	r2, #5
 8004b14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	887a      	ldrh	r2, [r7, #2]
 8004b28:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	887a      	ldrh	r2, [r7, #2]
 8004b2e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	887a      	ldrh	r2, [r7, #2]
 8004b3a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	887a      	ldrh	r2, [r7, #2]
 8004b40:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b58:	2b40      	cmp	r3, #64	@ 0x40
 8004b5a:	d007      	beq.n	8004b6c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b74:	d17e      	bne.n	8004c74 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <HAL_SPI_TransmitReceive+0xf6>
 8004b7e:	8afb      	ldrh	r3, [r7, #22]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d16c      	bne.n	8004c5e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b88:	881a      	ldrh	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b94:	1c9a      	adds	r2, r3, #2
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ba8:	e059      	b.n	8004c5e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d11b      	bne.n	8004bf0 <HAL_SPI_TransmitReceive+0x162>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d016      	beq.n	8004bf0 <HAL_SPI_TransmitReceive+0x162>
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d113      	bne.n	8004bf0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bcc:	881a      	ldrh	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd8:	1c9a      	adds	r2, r3, #2
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	3b01      	subs	r3, #1
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d119      	bne.n	8004c32 <HAL_SPI_TransmitReceive+0x1a4>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d014      	beq.n	8004c32 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c12:	b292      	uxth	r2, r2
 8004c14:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1a:	1c9a      	adds	r2, r3, #2
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3b01      	subs	r3, #1
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c32:	f7fe fdb9 	bl	80037a8 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d80d      	bhi.n	8004c5e <HAL_SPI_TransmitReceive+0x1d0>
 8004c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c48:	d009      	beq.n	8004c5e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e0bc      	b.n	8004dd8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1a0      	bne.n	8004baa <HAL_SPI_TransmitReceive+0x11c>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d19b      	bne.n	8004baa <HAL_SPI_TransmitReceive+0x11c>
 8004c72:	e082      	b.n	8004d7a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d002      	beq.n	8004c82 <HAL_SPI_TransmitReceive+0x1f4>
 8004c7c:	8afb      	ldrh	r3, [r7, #22]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d171      	bne.n	8004d66 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	330c      	adds	r3, #12
 8004c8c:	7812      	ldrb	r2, [r2, #0]
 8004c8e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ca8:	e05d      	b.n	8004d66 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d11c      	bne.n	8004cf2 <HAL_SPI_TransmitReceive+0x264>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d017      	beq.n	8004cf2 <HAL_SPI_TransmitReceive+0x264>
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d114      	bne.n	8004cf2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	330c      	adds	r3, #12
 8004cd2:	7812      	ldrb	r2, [r2, #0]
 8004cd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d119      	bne.n	8004d34 <HAL_SPI_TransmitReceive+0x2a6>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d014      	beq.n	8004d34 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d14:	b2d2      	uxtb	r2, r2
 8004d16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d30:	2301      	movs	r3, #1
 8004d32:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d34:	f7fe fd38 	bl	80037a8 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d803      	bhi.n	8004d4c <HAL_SPI_TransmitReceive+0x2be>
 8004d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4a:	d102      	bne.n	8004d52 <HAL_SPI_TransmitReceive+0x2c4>
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d109      	bne.n	8004d66 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e038      	b.n	8004dd8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d19c      	bne.n	8004caa <HAL_SPI_TransmitReceive+0x21c>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d197      	bne.n	8004caa <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d7a:	6a3a      	ldr	r2, [r7, #32]
 8004d7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 f8c4 	bl	8004f0c <SPI_EndRxTxTransaction>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d008      	beq.n	8004d9c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e01d      	b.n	8004dd8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10a      	bne.n	8004dba <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004da4:	2300      	movs	r3, #0
 8004da6:	613b      	str	r3, [r7, #16]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	613b      	str	r3, [r7, #16]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	613b      	str	r3, [r7, #16]
 8004db8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
  }
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3728      	adds	r7, #40	@ 0x28
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dee:	b2db      	uxtb	r3, r3
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b088      	sub	sp, #32
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	603b      	str	r3, [r7, #0]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e0c:	f7fe fccc 	bl	80037a8 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e14:	1a9b      	subs	r3, r3, r2
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	4413      	add	r3, r2
 8004e1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e1c:	f7fe fcc4 	bl	80037a8 <HAL_GetTick>
 8004e20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e22:	4b39      	ldr	r3, [pc, #228]	@ (8004f08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	015b      	lsls	r3, r3, #5
 8004e28:	0d1b      	lsrs	r3, r3, #20
 8004e2a:	69fa      	ldr	r2, [r7, #28]
 8004e2c:	fb02 f303 	mul.w	r3, r2, r3
 8004e30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e32:	e054      	b.n	8004ede <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3a:	d050      	beq.n	8004ede <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e3c:	f7fe fcb4 	bl	80037a8 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	69fa      	ldr	r2, [r7, #28]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d902      	bls.n	8004e52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d13d      	bne.n	8004ece <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e6a:	d111      	bne.n	8004e90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e74:	d004      	beq.n	8004e80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e7e:	d107      	bne.n	8004e90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e98:	d10f      	bne.n	8004eba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004eb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e017      	b.n	8004efe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	bf0c      	ite	eq
 8004eee:	2301      	moveq	r3, #1
 8004ef0:	2300      	movne	r3, #0
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d19b      	bne.n	8004e34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3720      	adds	r7, #32
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20000004 	.word	0x20000004

08004f0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	2102      	movs	r1, #2
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f7ff ff6a 	bl	8004dfc <SPI_WaitFlagStateUntilTimeout>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d007      	beq.n	8004f3e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f32:	f043 0220 	orr.w	r2, r3, #32
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e032      	b.n	8004fa4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8004fac <SPI_EndRxTxTransaction+0xa0>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a1b      	ldr	r2, [pc, #108]	@ (8004fb0 <SPI_EndRxTxTransaction+0xa4>)
 8004f44:	fba2 2303 	umull	r2, r3, r2, r3
 8004f48:	0d5b      	lsrs	r3, r3, #21
 8004f4a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004f4e:	fb02 f303 	mul.w	r3, r2, r3
 8004f52:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f5c:	d112      	bne.n	8004f84 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2200      	movs	r2, #0
 8004f66:	2180      	movs	r1, #128	@ 0x80
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f7ff ff47 	bl	8004dfc <SPI_WaitFlagStateUntilTimeout>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d016      	beq.n	8004fa2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f78:	f043 0220 	orr.w	r2, r3, #32
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e00f      	b.n	8004fa4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f9a:	2b80      	cmp	r3, #128	@ 0x80
 8004f9c:	d0f2      	beq.n	8004f84 <SPI_EndRxTxTransaction+0x78>
 8004f9e:	e000      	b.n	8004fa2 <SPI_EndRxTxTransaction+0x96>
        break;
 8004fa0:	bf00      	nop
  }

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3718      	adds	r7, #24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	20000004 	.word	0x20000004
 8004fb0:	165e9f81 	.word	0x165e9f81

08004fb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e042      	b.n	800504c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d106      	bne.n	8004fe0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7fd ff0c 	bl	8002df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2224      	movs	r2, #36	@ 0x24
 8004fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ff6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f973 	bl	80052e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	691a      	ldr	r2, [r3, #16]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800500c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695a      	ldr	r2, [r3, #20]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800501c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68da      	ldr	r2, [r3, #12]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800502c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2220      	movs	r2, #32
 8005038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b08a      	sub	sp, #40	@ 0x28
 8005058:	af02      	add	r7, sp, #8
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	603b      	str	r3, [r7, #0]
 8005060:	4613      	mov	r3, r2
 8005062:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005064:	2300      	movs	r3, #0
 8005066:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b20      	cmp	r3, #32
 8005072:	d175      	bne.n	8005160 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d002      	beq.n	8005080 <HAL_UART_Transmit+0x2c>
 800507a:	88fb      	ldrh	r3, [r7, #6]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e06e      	b.n	8005162 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2221      	movs	r2, #33	@ 0x21
 800508e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005092:	f7fe fb89 	bl	80037a8 <HAL_GetTick>
 8005096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	88fa      	ldrh	r2, [r7, #6]
 800509c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	88fa      	ldrh	r2, [r7, #6]
 80050a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050ac:	d108      	bne.n	80050c0 <HAL_UART_Transmit+0x6c>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d104      	bne.n	80050c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050b6:	2300      	movs	r3, #0
 80050b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	61bb      	str	r3, [r7, #24]
 80050be:	e003      	b.n	80050c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050c4:	2300      	movs	r3, #0
 80050c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050c8:	e02e      	b.n	8005128 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2200      	movs	r2, #0
 80050d2:	2180      	movs	r1, #128	@ 0x80
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 f848 	bl	800516a <UART_WaitOnFlagUntilTimeout>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e03a      	b.n	8005162 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10b      	bne.n	800510a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	461a      	mov	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005100:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	3302      	adds	r3, #2
 8005106:	61bb      	str	r3, [r7, #24]
 8005108:	e007      	b.n	800511a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	781a      	ldrb	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	3301      	adds	r3, #1
 8005118:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800511e:	b29b      	uxth	r3, r3
 8005120:	3b01      	subs	r3, #1
 8005122:	b29a      	uxth	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800512c:	b29b      	uxth	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1cb      	bne.n	80050ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2200      	movs	r2, #0
 800513a:	2140      	movs	r1, #64	@ 0x40
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 f814 	bl	800516a <UART_WaitOnFlagUntilTimeout>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d005      	beq.n	8005154 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2220      	movs	r2, #32
 800514c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e006      	b.n	8005162 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2220      	movs	r2, #32
 8005158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800515c:	2300      	movs	r3, #0
 800515e:	e000      	b.n	8005162 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005160:	2302      	movs	r3, #2
  }
}
 8005162:	4618      	mov	r0, r3
 8005164:	3720      	adds	r7, #32
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b086      	sub	sp, #24
 800516e:	af00      	add	r7, sp, #0
 8005170:	60f8      	str	r0, [r7, #12]
 8005172:	60b9      	str	r1, [r7, #8]
 8005174:	603b      	str	r3, [r7, #0]
 8005176:	4613      	mov	r3, r2
 8005178:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800517a:	e03b      	b.n	80051f4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005182:	d037      	beq.n	80051f4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005184:	f7fe fb10 	bl	80037a8 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	6a3a      	ldr	r2, [r7, #32]
 8005190:	429a      	cmp	r2, r3
 8005192:	d302      	bcc.n	800519a <UART_WaitOnFlagUntilTimeout+0x30>
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e03a      	b.n	8005214 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d023      	beq.n	80051f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2b80      	cmp	r3, #128	@ 0x80
 80051b0:	d020      	beq.n	80051f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b40      	cmp	r3, #64	@ 0x40
 80051b6:	d01d      	beq.n	80051f4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0308 	and.w	r3, r3, #8
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	d116      	bne.n	80051f4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80051c6:	2300      	movs	r3, #0
 80051c8:	617b      	str	r3, [r7, #20]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	617b      	str	r3, [r7, #20]
 80051da:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 f81d 	bl	800521c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2208      	movs	r2, #8
 80051e6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e00f      	b.n	8005214 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	4013      	ands	r3, r2
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	429a      	cmp	r2, r3
 8005202:	bf0c      	ite	eq
 8005204:	2301      	moveq	r3, #1
 8005206:	2300      	movne	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	461a      	mov	r2, r3
 800520c:	79fb      	ldrb	r3, [r7, #7]
 800520e:	429a      	cmp	r2, r3
 8005210:	d0b4      	beq.n	800517c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3718      	adds	r7, #24
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800521c:	b480      	push	{r7}
 800521e:	b095      	sub	sp, #84	@ 0x54
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	330c      	adds	r3, #12
 800522a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800522e:	e853 3f00 	ldrex	r3, [r3]
 8005232:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005236:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800523a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	330c      	adds	r3, #12
 8005242:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005244:	643a      	str	r2, [r7, #64]	@ 0x40
 8005246:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005248:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800524a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800524c:	e841 2300 	strex	r3, r2, [r1]
 8005250:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1e5      	bne.n	8005224 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3314      	adds	r3, #20
 800525e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	e853 3f00 	ldrex	r3, [r3]
 8005266:	61fb      	str	r3, [r7, #28]
   return(result);
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	f023 0301 	bic.w	r3, r3, #1
 800526e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3314      	adds	r3, #20
 8005276:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005278:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800527a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800527e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005280:	e841 2300 	strex	r3, r2, [r1]
 8005284:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e5      	bne.n	8005258 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005290:	2b01      	cmp	r3, #1
 8005292:	d119      	bne.n	80052c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	330c      	adds	r3, #12
 800529a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	e853 3f00 	ldrex	r3, [r3]
 80052a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f023 0310 	bic.w	r3, r3, #16
 80052aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	330c      	adds	r3, #12
 80052b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052b4:	61ba      	str	r2, [r7, #24]
 80052b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	6979      	ldr	r1, [r7, #20]
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	613b      	str	r3, [r7, #16]
   return(result);
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e5      	bne.n	8005294 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80052d6:	bf00      	nop
 80052d8:	3754      	adds	r7, #84	@ 0x54
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
	...

080052e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052e8:	b0c0      	sub	sp, #256	@ 0x100
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80052fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005300:	68d9      	ldr	r1, [r3, #12]
 8005302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	ea40 0301 	orr.w	r3, r0, r1
 800530c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800530e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	431a      	orrs	r2, r3
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	431a      	orrs	r2, r3
 8005324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	4313      	orrs	r3, r2
 800532c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800533c:	f021 010c 	bic.w	r1, r1, #12
 8005340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800534a:	430b      	orrs	r3, r1
 800534c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800534e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800535a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800535e:	6999      	ldr	r1, [r3, #24]
 8005360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	ea40 0301 	orr.w	r3, r0, r1
 800536a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800536c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	4b8f      	ldr	r3, [pc, #572]	@ (80055b0 <UART_SetConfig+0x2cc>)
 8005374:	429a      	cmp	r2, r3
 8005376:	d005      	beq.n	8005384 <UART_SetConfig+0xa0>
 8005378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	4b8d      	ldr	r3, [pc, #564]	@ (80055b4 <UART_SetConfig+0x2d0>)
 8005380:	429a      	cmp	r2, r3
 8005382:	d104      	bne.n	800538e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005384:	f7ff fadc 	bl	8004940 <HAL_RCC_GetPCLK2Freq>
 8005388:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800538c:	e003      	b.n	8005396 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800538e:	f7ff fac3 	bl	8004918 <HAL_RCC_GetPCLK1Freq>
 8005392:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053a0:	f040 810c 	bne.w	80055bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053a8:	2200      	movs	r2, #0
 80053aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80053ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80053b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80053b6:	4622      	mov	r2, r4
 80053b8:	462b      	mov	r3, r5
 80053ba:	1891      	adds	r1, r2, r2
 80053bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80053be:	415b      	adcs	r3, r3
 80053c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80053c6:	4621      	mov	r1, r4
 80053c8:	eb12 0801 	adds.w	r8, r2, r1
 80053cc:	4629      	mov	r1, r5
 80053ce:	eb43 0901 	adc.w	r9, r3, r1
 80053d2:	f04f 0200 	mov.w	r2, #0
 80053d6:	f04f 0300 	mov.w	r3, #0
 80053da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053e6:	4690      	mov	r8, r2
 80053e8:	4699      	mov	r9, r3
 80053ea:	4623      	mov	r3, r4
 80053ec:	eb18 0303 	adds.w	r3, r8, r3
 80053f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053f4:	462b      	mov	r3, r5
 80053f6:	eb49 0303 	adc.w	r3, r9, r3
 80053fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800540a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800540e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005412:	460b      	mov	r3, r1
 8005414:	18db      	adds	r3, r3, r3
 8005416:	653b      	str	r3, [r7, #80]	@ 0x50
 8005418:	4613      	mov	r3, r2
 800541a:	eb42 0303 	adc.w	r3, r2, r3
 800541e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005420:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005424:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005428:	f7fb f93e 	bl	80006a8 <__aeabi_uldivmod>
 800542c:	4602      	mov	r2, r0
 800542e:	460b      	mov	r3, r1
 8005430:	4b61      	ldr	r3, [pc, #388]	@ (80055b8 <UART_SetConfig+0x2d4>)
 8005432:	fba3 2302 	umull	r2, r3, r3, r2
 8005436:	095b      	lsrs	r3, r3, #5
 8005438:	011c      	lsls	r4, r3, #4
 800543a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800543e:	2200      	movs	r2, #0
 8005440:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005444:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005448:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800544c:	4642      	mov	r2, r8
 800544e:	464b      	mov	r3, r9
 8005450:	1891      	adds	r1, r2, r2
 8005452:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005454:	415b      	adcs	r3, r3
 8005456:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005458:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800545c:	4641      	mov	r1, r8
 800545e:	eb12 0a01 	adds.w	sl, r2, r1
 8005462:	4649      	mov	r1, r9
 8005464:	eb43 0b01 	adc.w	fp, r3, r1
 8005468:	f04f 0200 	mov.w	r2, #0
 800546c:	f04f 0300 	mov.w	r3, #0
 8005470:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005474:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005478:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800547c:	4692      	mov	sl, r2
 800547e:	469b      	mov	fp, r3
 8005480:	4643      	mov	r3, r8
 8005482:	eb1a 0303 	adds.w	r3, sl, r3
 8005486:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800548a:	464b      	mov	r3, r9
 800548c:	eb4b 0303 	adc.w	r3, fp, r3
 8005490:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80054a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80054a8:	460b      	mov	r3, r1
 80054aa:	18db      	adds	r3, r3, r3
 80054ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80054ae:	4613      	mov	r3, r2
 80054b0:	eb42 0303 	adc.w	r3, r2, r3
 80054b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80054b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80054ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80054be:	f7fb f8f3 	bl	80006a8 <__aeabi_uldivmod>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	4611      	mov	r1, r2
 80054c8:	4b3b      	ldr	r3, [pc, #236]	@ (80055b8 <UART_SetConfig+0x2d4>)
 80054ca:	fba3 2301 	umull	r2, r3, r3, r1
 80054ce:	095b      	lsrs	r3, r3, #5
 80054d0:	2264      	movs	r2, #100	@ 0x64
 80054d2:	fb02 f303 	mul.w	r3, r2, r3
 80054d6:	1acb      	subs	r3, r1, r3
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80054de:	4b36      	ldr	r3, [pc, #216]	@ (80055b8 <UART_SetConfig+0x2d4>)
 80054e0:	fba3 2302 	umull	r2, r3, r3, r2
 80054e4:	095b      	lsrs	r3, r3, #5
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80054ec:	441c      	add	r4, r3
 80054ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054f2:	2200      	movs	r2, #0
 80054f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80054fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005500:	4642      	mov	r2, r8
 8005502:	464b      	mov	r3, r9
 8005504:	1891      	adds	r1, r2, r2
 8005506:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005508:	415b      	adcs	r3, r3
 800550a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800550c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005510:	4641      	mov	r1, r8
 8005512:	1851      	adds	r1, r2, r1
 8005514:	6339      	str	r1, [r7, #48]	@ 0x30
 8005516:	4649      	mov	r1, r9
 8005518:	414b      	adcs	r3, r1
 800551a:	637b      	str	r3, [r7, #52]	@ 0x34
 800551c:	f04f 0200 	mov.w	r2, #0
 8005520:	f04f 0300 	mov.w	r3, #0
 8005524:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005528:	4659      	mov	r1, fp
 800552a:	00cb      	lsls	r3, r1, #3
 800552c:	4651      	mov	r1, sl
 800552e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005532:	4651      	mov	r1, sl
 8005534:	00ca      	lsls	r2, r1, #3
 8005536:	4610      	mov	r0, r2
 8005538:	4619      	mov	r1, r3
 800553a:	4603      	mov	r3, r0
 800553c:	4642      	mov	r2, r8
 800553e:	189b      	adds	r3, r3, r2
 8005540:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005544:	464b      	mov	r3, r9
 8005546:	460a      	mov	r2, r1
 8005548:	eb42 0303 	adc.w	r3, r2, r3
 800554c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800555c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005560:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005564:	460b      	mov	r3, r1
 8005566:	18db      	adds	r3, r3, r3
 8005568:	62bb      	str	r3, [r7, #40]	@ 0x28
 800556a:	4613      	mov	r3, r2
 800556c:	eb42 0303 	adc.w	r3, r2, r3
 8005570:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005572:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005576:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800557a:	f7fb f895 	bl	80006a8 <__aeabi_uldivmod>
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	4b0d      	ldr	r3, [pc, #52]	@ (80055b8 <UART_SetConfig+0x2d4>)
 8005584:	fba3 1302 	umull	r1, r3, r3, r2
 8005588:	095b      	lsrs	r3, r3, #5
 800558a:	2164      	movs	r1, #100	@ 0x64
 800558c:	fb01 f303 	mul.w	r3, r1, r3
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	3332      	adds	r3, #50	@ 0x32
 8005596:	4a08      	ldr	r2, [pc, #32]	@ (80055b8 <UART_SetConfig+0x2d4>)
 8005598:	fba2 2303 	umull	r2, r3, r2, r3
 800559c:	095b      	lsrs	r3, r3, #5
 800559e:	f003 0207 	and.w	r2, r3, #7
 80055a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4422      	add	r2, r4
 80055aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055ac:	e106      	b.n	80057bc <UART_SetConfig+0x4d8>
 80055ae:	bf00      	nop
 80055b0:	40011000 	.word	0x40011000
 80055b4:	40011400 	.word	0x40011400
 80055b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055c0:	2200      	movs	r2, #0
 80055c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80055c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80055ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80055ce:	4642      	mov	r2, r8
 80055d0:	464b      	mov	r3, r9
 80055d2:	1891      	adds	r1, r2, r2
 80055d4:	6239      	str	r1, [r7, #32]
 80055d6:	415b      	adcs	r3, r3
 80055d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80055da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055de:	4641      	mov	r1, r8
 80055e0:	1854      	adds	r4, r2, r1
 80055e2:	4649      	mov	r1, r9
 80055e4:	eb43 0501 	adc.w	r5, r3, r1
 80055e8:	f04f 0200 	mov.w	r2, #0
 80055ec:	f04f 0300 	mov.w	r3, #0
 80055f0:	00eb      	lsls	r3, r5, #3
 80055f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055f6:	00e2      	lsls	r2, r4, #3
 80055f8:	4614      	mov	r4, r2
 80055fa:	461d      	mov	r5, r3
 80055fc:	4643      	mov	r3, r8
 80055fe:	18e3      	adds	r3, r4, r3
 8005600:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005604:	464b      	mov	r3, r9
 8005606:	eb45 0303 	adc.w	r3, r5, r3
 800560a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800560e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800561a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	f04f 0300 	mov.w	r3, #0
 8005626:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800562a:	4629      	mov	r1, r5
 800562c:	008b      	lsls	r3, r1, #2
 800562e:	4621      	mov	r1, r4
 8005630:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005634:	4621      	mov	r1, r4
 8005636:	008a      	lsls	r2, r1, #2
 8005638:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800563c:	f7fb f834 	bl	80006a8 <__aeabi_uldivmod>
 8005640:	4602      	mov	r2, r0
 8005642:	460b      	mov	r3, r1
 8005644:	4b60      	ldr	r3, [pc, #384]	@ (80057c8 <UART_SetConfig+0x4e4>)
 8005646:	fba3 2302 	umull	r2, r3, r3, r2
 800564a:	095b      	lsrs	r3, r3, #5
 800564c:	011c      	lsls	r4, r3, #4
 800564e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005652:	2200      	movs	r2, #0
 8005654:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005658:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800565c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005660:	4642      	mov	r2, r8
 8005662:	464b      	mov	r3, r9
 8005664:	1891      	adds	r1, r2, r2
 8005666:	61b9      	str	r1, [r7, #24]
 8005668:	415b      	adcs	r3, r3
 800566a:	61fb      	str	r3, [r7, #28]
 800566c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005670:	4641      	mov	r1, r8
 8005672:	1851      	adds	r1, r2, r1
 8005674:	6139      	str	r1, [r7, #16]
 8005676:	4649      	mov	r1, r9
 8005678:	414b      	adcs	r3, r1
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005688:	4659      	mov	r1, fp
 800568a:	00cb      	lsls	r3, r1, #3
 800568c:	4651      	mov	r1, sl
 800568e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005692:	4651      	mov	r1, sl
 8005694:	00ca      	lsls	r2, r1, #3
 8005696:	4610      	mov	r0, r2
 8005698:	4619      	mov	r1, r3
 800569a:	4603      	mov	r3, r0
 800569c:	4642      	mov	r2, r8
 800569e:	189b      	adds	r3, r3, r2
 80056a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056a4:	464b      	mov	r3, r9
 80056a6:	460a      	mov	r2, r1
 80056a8:	eb42 0303 	adc.w	r3, r2, r3
 80056ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	f04f 0300 	mov.w	r3, #0
 80056c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80056c8:	4649      	mov	r1, r9
 80056ca:	008b      	lsls	r3, r1, #2
 80056cc:	4641      	mov	r1, r8
 80056ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056d2:	4641      	mov	r1, r8
 80056d4:	008a      	lsls	r2, r1, #2
 80056d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80056da:	f7fa ffe5 	bl	80006a8 <__aeabi_uldivmod>
 80056de:	4602      	mov	r2, r0
 80056e0:	460b      	mov	r3, r1
 80056e2:	4611      	mov	r1, r2
 80056e4:	4b38      	ldr	r3, [pc, #224]	@ (80057c8 <UART_SetConfig+0x4e4>)
 80056e6:	fba3 2301 	umull	r2, r3, r3, r1
 80056ea:	095b      	lsrs	r3, r3, #5
 80056ec:	2264      	movs	r2, #100	@ 0x64
 80056ee:	fb02 f303 	mul.w	r3, r2, r3
 80056f2:	1acb      	subs	r3, r1, r3
 80056f4:	011b      	lsls	r3, r3, #4
 80056f6:	3332      	adds	r3, #50	@ 0x32
 80056f8:	4a33      	ldr	r2, [pc, #204]	@ (80057c8 <UART_SetConfig+0x4e4>)
 80056fa:	fba2 2303 	umull	r2, r3, r2, r3
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005704:	441c      	add	r4, r3
 8005706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800570a:	2200      	movs	r2, #0
 800570c:	673b      	str	r3, [r7, #112]	@ 0x70
 800570e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005710:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005714:	4642      	mov	r2, r8
 8005716:	464b      	mov	r3, r9
 8005718:	1891      	adds	r1, r2, r2
 800571a:	60b9      	str	r1, [r7, #8]
 800571c:	415b      	adcs	r3, r3
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005724:	4641      	mov	r1, r8
 8005726:	1851      	adds	r1, r2, r1
 8005728:	6039      	str	r1, [r7, #0]
 800572a:	4649      	mov	r1, r9
 800572c:	414b      	adcs	r3, r1
 800572e:	607b      	str	r3, [r7, #4]
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	f04f 0300 	mov.w	r3, #0
 8005738:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800573c:	4659      	mov	r1, fp
 800573e:	00cb      	lsls	r3, r1, #3
 8005740:	4651      	mov	r1, sl
 8005742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005746:	4651      	mov	r1, sl
 8005748:	00ca      	lsls	r2, r1, #3
 800574a:	4610      	mov	r0, r2
 800574c:	4619      	mov	r1, r3
 800574e:	4603      	mov	r3, r0
 8005750:	4642      	mov	r2, r8
 8005752:	189b      	adds	r3, r3, r2
 8005754:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005756:	464b      	mov	r3, r9
 8005758:	460a      	mov	r2, r1
 800575a:	eb42 0303 	adc.w	r3, r2, r3
 800575e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	663b      	str	r3, [r7, #96]	@ 0x60
 800576a:	667a      	str	r2, [r7, #100]	@ 0x64
 800576c:	f04f 0200 	mov.w	r2, #0
 8005770:	f04f 0300 	mov.w	r3, #0
 8005774:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005778:	4649      	mov	r1, r9
 800577a:	008b      	lsls	r3, r1, #2
 800577c:	4641      	mov	r1, r8
 800577e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005782:	4641      	mov	r1, r8
 8005784:	008a      	lsls	r2, r1, #2
 8005786:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800578a:	f7fa ff8d 	bl	80006a8 <__aeabi_uldivmod>
 800578e:	4602      	mov	r2, r0
 8005790:	460b      	mov	r3, r1
 8005792:	4b0d      	ldr	r3, [pc, #52]	@ (80057c8 <UART_SetConfig+0x4e4>)
 8005794:	fba3 1302 	umull	r1, r3, r3, r2
 8005798:	095b      	lsrs	r3, r3, #5
 800579a:	2164      	movs	r1, #100	@ 0x64
 800579c:	fb01 f303 	mul.w	r3, r1, r3
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	3332      	adds	r3, #50	@ 0x32
 80057a6:	4a08      	ldr	r2, [pc, #32]	@ (80057c8 <UART_SetConfig+0x4e4>)
 80057a8:	fba2 2303 	umull	r2, r3, r2, r3
 80057ac:	095b      	lsrs	r3, r3, #5
 80057ae:	f003 020f 	and.w	r2, r3, #15
 80057b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4422      	add	r2, r4
 80057ba:	609a      	str	r2, [r3, #8]
}
 80057bc:	bf00      	nop
 80057be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80057c2:	46bd      	mov	sp, r7
 80057c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057c8:	51eb851f 	.word	0x51eb851f

080057cc <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b08c      	sub	sp, #48	@ 0x30
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	603b      	str	r3, [r7, #0]
 80057d4:	4603      	mov	r3, r0
 80057d6:	71fb      	strb	r3, [r7, #7]
 80057d8:	460b      	mov	r3, r1
 80057da:	71bb      	strb	r3, [r7, #6]
 80057dc:	4613      	mov	r3, r2
 80057de:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 80057e0:	79fb      	ldrb	r3, [r7, #7]
 80057e2:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 80057e4:	79bb      	ldrb	r3, [r7, #6]
 80057e6:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 80057e8:	797b      	ldrb	r3, [r7, #5]
 80057ea:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80057ec:	f107 030c 	add.w	r3, r7, #12
 80057f0:	2207      	movs	r2, #7
 80057f2:	2100      	movs	r1, #0
 80057f4:	4618      	mov	r0, r3
 80057f6:	f001 faf6 	bl	8006de6 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80057fa:	f107 0318 	add.w	r3, r7, #24
 80057fe:	2218      	movs	r2, #24
 8005800:	2100      	movs	r1, #0
 8005802:	4618      	mov	r0, r3
 8005804:	f001 faef 	bl	8006de6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005808:	233f      	movs	r3, #63	@ 0x3f
 800580a:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 800580c:	238a      	movs	r3, #138	@ 0x8a
 800580e:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8005810:	f107 0314 	add.w	r3, r7, #20
 8005814:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8005816:	2303      	movs	r3, #3
 8005818:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &resp;
 800581a:	f107 030c 	add.w	r3, r7, #12
 800581e:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8005820:	2307      	movs	r3, #7
 8005822:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8005824:	f107 0318 	add.w	r3, r7, #24
 8005828:	2100      	movs	r1, #0
 800582a:	4618      	mov	r0, r3
 800582c:	f000 fea2 	bl	8006574 <hci_send_req>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	da01      	bge.n	800583a <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8005836:	23ff      	movs	r3, #255	@ 0xff
 8005838:	e014      	b.n	8005864 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 800583a:	7b3b      	ldrb	r3, [r7, #12]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8005840:	7b3b      	ldrb	r3, [r7, #12]
 8005842:	e00f      	b.n	8005864 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8005844:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8005848:	b29a      	uxth	r2, r3
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800584e:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8005852:	b29a      	uxth	r2, r3
 8005854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005856:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8005858:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800585c:	b29a      	uxth	r2, r3
 800585e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005860:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3730      	adds	r7, #48	@ 0x30
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b08e      	sub	sp, #56	@ 0x38
 8005870:	af00      	add	r7, sp, #0
 8005872:	60b9      	str	r1, [r7, #8]
 8005874:	607a      	str	r2, [r7, #4]
 8005876:	603b      	str	r3, [r7, #0]
 8005878:	4603      	mov	r3, r0
 800587a:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005880:	f107 0314 	add.w	r3, r7, #20
 8005884:	2207      	movs	r2, #7
 8005886:	2100      	movs	r1, #0
 8005888:	4618      	mov	r0, r3
 800588a:	f001 faac 	bl	8006de6 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800588e:	f107 0320 	add.w	r3, r7, #32
 8005892:	2218      	movs	r2, #24
 8005894:	2100      	movs	r1, #0
 8005896:	4618      	mov	r0, r3
 8005898:	f001 faa5 	bl	8006de6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800589c:	233f      	movs	r3, #63	@ 0x3f
 800589e:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 80058a0:	238a      	movs	r3, #138	@ 0x8a
 80058a2:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = &cp;
 80058a4:	f107 031c 	add.w	r3, r7, #28
 80058a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = sizeof(cp);
 80058aa:	2301      	movs	r3, #1
 80058ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 80058ae:	f107 0314 	add.w	r3, r7, #20
 80058b2:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 80058b4:	2307      	movs	r3, #7
 80058b6:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 80058b8:	f107 0320 	add.w	r3, r7, #32
 80058bc:	2100      	movs	r1, #0
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 fe58 	bl	8006574 <hci_send_req>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	da01      	bge.n	80058ce <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 80058ca:	23ff      	movs	r3, #255	@ 0xff
 80058cc:	e014      	b.n	80058f8 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 80058ce:	7d3b      	ldrb	r3, [r7, #20]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 80058d4:	7d3b      	ldrb	r3, [r7, #20]
 80058d6:	e00f      	b.n	80058f8 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 80058d8:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 80058dc:	b29a      	uxth	r2, r3
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80058e2:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80058ec:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3738      	adds	r7, #56	@ 0x38
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8005900:	b590      	push	{r4, r7, lr}
 8005902:	b095      	sub	sp, #84	@ 0x54
 8005904:	af00      	add	r7, sp, #0
 8005906:	4604      	mov	r4, r0
 8005908:	4608      	mov	r0, r1
 800590a:	4611      	mov	r1, r2
 800590c:	461a      	mov	r2, r3
 800590e:	4623      	mov	r3, r4
 8005910:	71fb      	strb	r3, [r7, #7]
 8005912:	4603      	mov	r3, r0
 8005914:	80bb      	strh	r3, [r7, #4]
 8005916:	460b      	mov	r3, r1
 8005918:	807b      	strh	r3, [r7, #2]
 800591a:	4613      	mov	r3, r2
 800591c:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8005924:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8005928:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800592c:	4413      	add	r3, r2
 800592e:	330e      	adds	r3, #14
 8005930:	2b28      	cmp	r3, #40	@ 0x28
 8005932:	d901      	bls.n	8005938 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8005934:	2342      	movs	r3, #66	@ 0x42
 8005936:	e0c9      	b.n	8005acc <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 8005938:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800593c:	3350      	adds	r3, #80	@ 0x50
 800593e:	443b      	add	r3, r7
 8005940:	79fa      	ldrb	r2, [r7, #7]
 8005942:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8005946:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800594a:	3301      	adds	r3, #1
 800594c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8005950:	88bb      	ldrh	r3, [r7, #4]
 8005952:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8005954:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005958:	f107 0208 	add.w	r2, r7, #8
 800595c:	4413      	add	r3, r2
 800595e:	88ba      	ldrh	r2, [r7, #4]
 8005960:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8005962:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005966:	3302      	adds	r3, #2
 8005968:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 800596c:	887b      	ldrh	r3, [r7, #2]
 800596e:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8005970:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005974:	f107 0208 	add.w	r2, r7, #8
 8005978:	4413      	add	r3, r2
 800597a:	887a      	ldrh	r2, [r7, #2]
 800597c:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800597e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005982:	3302      	adds	r3, #2
 8005984:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = OwnAddrType;
 8005988:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800598c:	3350      	adds	r3, #80	@ 0x50
 800598e:	443b      	add	r3, r7
 8005990:	79ba      	ldrb	r2, [r7, #6]
 8005992:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8005996:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800599a:	3301      	adds	r3, #1
 800599c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 80059a0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80059a4:	3350      	adds	r3, #80	@ 0x50
 80059a6:	443b      	add	r3, r7
 80059a8:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 80059ac:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80059b0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80059b4:	3301      	adds	r3, #1
 80059b6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = LocalNameLen;
 80059ba:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80059be:	3350      	adds	r3, #80	@ 0x50
 80059c0:	443b      	add	r3, r7
 80059c2:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 80059c6:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80059ca:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80059ce:	3301      	adds	r3, #1
 80059d0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 80059d4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80059d8:	f107 0208 	add.w	r2, r7, #8
 80059dc:	4413      	add	r3, r2
 80059de:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 80059e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80059e4:	4618      	mov	r0, r3
 80059e6:	f001 fa7a 	bl	8006ede <memcpy>
  indx +=  LocalNameLen;
 80059ea:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80059ee:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80059f2:	4413      	add	r3, r2
 80059f4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 80059f8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80059fc:	3350      	adds	r3, #80	@ 0x50
 80059fe:	443b      	add	r3, r7
 8005a00:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8005a04:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8005a08:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8005a12:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005a16:	f107 0208 	add.w	r2, r7, #8
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8005a20:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8005a22:	4618      	mov	r0, r3
 8005a24:	f001 fa5b 	bl	8006ede <memcpy>
  indx +=  ServiceUUIDLen;  
 8005a28:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8005a2c:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8005a30:	4413      	add	r3, r2
 8005a32:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8005a36:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8005a3a:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8005a3e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005a42:	f107 0208 	add.w	r2, r7, #8
 8005a46:	4413      	add	r3, r2
 8005a48:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8005a4c:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8005a4e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005a52:	3302      	adds	r3, #2
 8005a54:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8005a58:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8005a5c:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8005a60:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005a64:	f107 0208 	add.w	r2, r7, #8
 8005a68:	4413      	add	r3, r2
 8005a6a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8005a6e:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8005a70:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005a74:	3302      	adds	r3, #2
 8005a76:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005a7a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005a7e:	2218      	movs	r2, #24
 8005a80:	2100      	movs	r1, #0
 8005a82:	4618      	mov	r0, r3
 8005a84:	f001 f9af 	bl	8006de6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005a88:	233f      	movs	r3, #63	@ 0x3f
 8005a8a:	86bb      	strh	r3, [r7, #52]	@ 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8005a8c:	2383      	movs	r3, #131	@ 0x83
 8005a8e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  rq.cparam = (void *)buffer;
 8005a90:	f107 0308 	add.w	r3, r7, #8
 8005a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.clen = indx;
 8005a96:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005a9a:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rparam = &status;
 8005a9c:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 8005aa0:	647b      	str	r3, [r7, #68]	@ 0x44
  rq.rlen = 1;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8005aa6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005aaa:	2100      	movs	r1, #0
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 fd61 	bl	8006574 <hci_send_req>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	da01      	bge.n	8005abc <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 8005ab8:	23ff      	movs	r3, #255	@ 0xff
 8005aba:	e007      	b.n	8005acc <aci_gap_set_discoverable+0x1cc>

  if (status) {
 8005abc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <aci_gap_set_discoverable+0x1ca>
    return status;
 8005ac4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005ac8:	e000      	b.n	8005acc <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3754      	adds	r7, #84	@ 0x54
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd90      	pop	{r4, r7, pc}

08005ad4 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8005ad4:	b590      	push	{r4, r7, lr}
 8005ad6:	b091      	sub	sp, #68	@ 0x44
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	603a      	str	r2, [r7, #0]
 8005adc:	461a      	mov	r2, r3
 8005ade:	4603      	mov	r3, r0
 8005ae0:	71fb      	strb	r3, [r7, #7]
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	71bb      	strb	r3, [r7, #6]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8005aea:	79fb      	ldrb	r3, [r7, #7]
 8005aec:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 8005aee:	79bb      	ldrb	r3, [r7, #6]
 8005af0:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8005af2:	79bb      	ldrb	r3, [r7, #6]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00a      	beq.n	8005b0e <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	f107 030e 	add.w	r3, r7, #14
 8005afe:	6814      	ldr	r4, [r2, #0]
 8005b00:	6850      	ldr	r0, [r2, #4]
 8005b02:	6891      	ldr	r1, [r2, #8]
 8005b04:	68d2      	ldr	r2, [r2, #12]
 8005b06:	601c      	str	r4, [r3, #0]
 8005b08:	6058      	str	r0, [r3, #4]
 8005b0a:	6099      	str	r1, [r3, #8]
 8005b0c:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8005b0e:	797b      	ldrb	r3, [r7, #5]
 8005b10:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8005b12:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8005b16:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8005b18:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8005b1c:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8005b20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b22:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
  cp.bonding_mode = bonding_mode;
 8005b26:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8005b2a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005b2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005b32:	2218      	movs	r2, #24
 8005b34:	2100      	movs	r1, #0
 8005b36:	4618      	mov	r0, r3
 8005b38:	f001 f955 	bl	8006de6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005b3c:	233f      	movs	r3, #63	@ 0x3f
 8005b3e:	853b      	strh	r3, [r7, #40]	@ 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8005b40:	2386      	movs	r3, #134	@ 0x86
 8005b42:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rq.cparam = &cp;
 8005b44:	f107 030c 	add.w	r3, r7, #12
 8005b48:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.clen = sizeof(cp);
 8005b4a:	231a      	movs	r3, #26
 8005b4c:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rparam = &status;
 8005b4e:	f107 030b 	add.w	r3, r7, #11
 8005b52:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rlen = 1;
 8005b54:	2301      	movs	r3, #1
 8005b56:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8005b58:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 fd08 	bl	8006574 <hci_send_req>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	da01      	bge.n	8005b6e <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 8005b6a:	23ff      	movs	r3, #255	@ 0xff
 8005b6c:	e005      	b.n	8005b7a <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 8005b6e:	7afb      	ldrb	r3, [r7, #11]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <aci_gap_set_auth_requirement+0xa4>
    return status;
 8005b74:	7afb      	ldrb	r3, [r7, #11]
 8005b76:	e000      	b.n	8005b7a <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3744      	adds	r7, #68	@ 0x44
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd90      	pop	{r4, r7, pc}

08005b82 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b092      	sub	sp, #72	@ 0x48
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	4603      	mov	r3, r0
 8005b8a:	6039      	str	r1, [r7, #0]
 8005b8c:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 8005b94:	79fb      	ldrb	r3, [r7, #7]
 8005b96:	2b1f      	cmp	r3, #31
 8005b98:	d901      	bls.n	8005b9e <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 8005b9a:	2342      	movs	r3, #66	@ 0x42
 8005b9c:	e03e      	b.n	8005c1c <aci_gap_update_adv_data+0x9a>

  buffer[indx] = AdvLen;
 8005b9e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005ba2:	3348      	adds	r3, #72	@ 0x48
 8005ba4:	443b      	add	r3, r7
 8005ba6:	79fa      	ldrb	r2, [r7, #7]
 8005ba8:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 8005bac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 8005bb6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005bba:	f107 0208 	add.w	r2, r7, #8
 8005bbe:	4413      	add	r3, r2
 8005bc0:	79fa      	ldrb	r2, [r7, #7]
 8005bc2:	6839      	ldr	r1, [r7, #0]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f001 f98a 	bl	8006ede <memcpy>
  indx +=  AdvLen;
 8005bca:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8005bce:	79fb      	ldrb	r3, [r7, #7]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005bd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005bda:	2218      	movs	r2, #24
 8005bdc:	2100      	movs	r1, #0
 8005bde:	4618      	mov	r0, r3
 8005be0:	f001 f901 	bl	8006de6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005be4:	233f      	movs	r3, #63	@ 0x3f
 8005be6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 8005be8:	238e      	movs	r3, #142	@ 0x8e
 8005bea:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 8005bec:	f107 0308 	add.w	r3, r7, #8
 8005bf0:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8005bf2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &status;
 8005bf8:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8005bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = 1;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	643b      	str	r3, [r7, #64]	@ 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 8005c02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005c06:	2100      	movs	r1, #0
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 fcb3 	bl	8006574 <hci_send_req>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	da01      	bge.n	8005c18 <aci_gap_update_adv_data+0x96>
    return BLE_STATUS_TIMEOUT;
 8005c14:	23ff      	movs	r3, #255	@ 0xff
 8005c16:	e001      	b.n	8005c1c <aci_gap_update_adv_data+0x9a>
    
  return status;
 8005c18:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3748      	adds	r7, #72	@ 0x48
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005c2a:	f107 0308 	add.w	r3, r7, #8
 8005c2e:	2218      	movs	r2, #24
 8005c30:	2100      	movs	r1, #0
 8005c32:	4618      	mov	r0, r3
 8005c34:	f001 f8d7 	bl	8006de6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005c38:	233f      	movs	r3, #63	@ 0x3f
 8005c3a:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8005c3c:	f240 1301 	movw	r3, #257	@ 0x101
 8005c40:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005c42:	1dfb      	adds	r3, r7, #7
 8005c44:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005c46:	2301      	movs	r3, #1
 8005c48:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8005c4a:	f107 0308 	add.w	r3, r7, #8
 8005c4e:	2100      	movs	r1, #0
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 fc8f 	bl	8006574 <hci_send_req>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	da01      	bge.n	8005c60 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8005c5c:	23ff      	movs	r3, #255	@ 0xff
 8005c5e:	e000      	b.n	8005c62 <aci_gatt_init+0x3e>

  return status;
 8005c60:	79fb      	ldrb	r3, [r7, #7]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3720      	adds	r7, #32
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b090      	sub	sp, #64	@ 0x40
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6039      	str	r1, [r7, #0]
 8005c72:	4611      	mov	r1, r2
 8005c74:	461a      	mov	r2, r3
 8005c76:	4603      	mov	r3, r0
 8005c78:	71fb      	strb	r3, [r7, #7]
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	71bb      	strb	r3, [r7, #6]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8005c82:	2300      	movs	r3, #0
 8005c84:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_uuid_type;
 8005c88:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005c8c:	3340      	adds	r3, #64	@ 0x40
 8005c8e:	443b      	add	r3, r7
 8005c90:	79fa      	ldrb	r2, [r7, #7]
 8005c92:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8005c96:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8005ca0:	79fb      	ldrb	r3, [r7, #7]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d103      	bne.n	8005cae <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005cac:	e002      	b.n	8005cb4 <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 8005cae:	2310      	movs	r3, #16
 8005cb0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8005cb4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005cb8:	f107 020c 	add.w	r2, r7, #12
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8005cc2:	6839      	ldr	r1, [r7, #0]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f001 f90a 	bl	8006ede <memcpy>
  indx +=  uuid_len;
 8005cca:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8005cce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_type;
 8005cd8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005cdc:	3340      	adds	r3, #64	@ 0x40
 8005cde:	443b      	add	r3, r7
 8005ce0:	79ba      	ldrb	r2, [r7, #6]
 8005ce2:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8005ce6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005cea:	3301      	adds	r3, #1
 8005cec:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = max_attr_records;
 8005cf0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005cf4:	3340      	adds	r3, #64	@ 0x40
 8005cf6:	443b      	add	r3, r7
 8005cf8:	797a      	ldrb	r2, [r7, #5]
 8005cfa:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8005cfe:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005d02:	3301      	adds	r3, #1
 8005d04:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005d08:	f107 0320 	add.w	r3, r7, #32
 8005d0c:	2203      	movs	r2, #3
 8005d0e:	2100      	movs	r1, #0
 8005d10:	4618      	mov	r0, r3
 8005d12:	f001 f868 	bl	8006de6 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005d16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d1a:	2218      	movs	r2, #24
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f001 f861 	bl	8006de6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005d24:	233f      	movs	r3, #63	@ 0x3f
 8005d26:	84bb      	strh	r3, [r7, #36]	@ 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8005d28:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005d2c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  rq.cparam = (void *)buffer;
 8005d2e:	f107 030c 	add.w	r3, r7, #12
 8005d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.clen = indx;
 8005d34:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005d38:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rparam = &resp;
 8005d3a:	f107 0320 	add.w	r3, r7, #32
 8005d3e:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8005d40:	2303      	movs	r3, #3
 8005d42:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8005d44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d48:	2100      	movs	r1, #0
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fc12 	bl	8006574 <hci_send_req>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	da01      	bge.n	8005d5a <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 8005d56:	23ff      	movs	r3, #255	@ 0xff
 8005d58:	e00c      	b.n	8005d74 <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 8005d5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <aci_gatt_add_serv+0xfe>
    return resp.status;
 8005d62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d66:	e005      	b.n	8005d74 <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 8005d68:	f8b7 3021 	ldrh.w	r3, [r7, #33]	@ 0x21
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d70:	801a      	strh	r2, [r3, #0]

  return 0;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3740      	adds	r7, #64	@ 0x40
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b092      	sub	sp, #72	@ 0x48
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	603a      	str	r2, [r7, #0]
 8005d84:	461a      	mov	r2, r3
 8005d86:	4603      	mov	r3, r0
 8005d88:	80fb      	strh	r3, [r7, #6]
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	717b      	strb	r3, [r7, #5]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8005d92:	2300      	movs	r3, #0
 8005d94:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  serviceHandle = htobs(serviceHandle);
 8005d98:	88fb      	ldrh	r3, [r7, #6]
 8005d9a:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8005d9c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005da0:	f107 020c 	add.w	r2, r7, #12
 8005da4:	4413      	add	r3, r2
 8005da6:	88fa      	ldrh	r2, [r7, #6]
 8005da8:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005daa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005dae:	3302      	adds	r3, #2
 8005db0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charUuidType;
 8005db4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005db8:	3348      	adds	r3, #72	@ 0x48
 8005dba:	443b      	add	r3, r7
 8005dbc:	797a      	ldrb	r2, [r7, #5]
 8005dbe:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005dc2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8005dcc:	797b      	ldrb	r3, [r7, #5]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d103      	bne.n	8005dda <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005dd8:	e002      	b.n	8005de0 <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 8005dda:	2310      	movs	r3, #16
 8005ddc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8005de0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005de4:	f107 020c 	add.w	r2, r7, #12
 8005de8:	4413      	add	r3, r2
 8005dea:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8005dee:	6839      	ldr	r1, [r7, #0]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f001 f874 	bl	8006ede <memcpy>
  indx +=  uuid_len;
 8005df6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8005dfa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005dfe:	4413      	add	r3, r2
 8005e00:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charValueLen;
 8005e04:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e08:	3348      	adds	r3, #72	@ 0x48
 8005e0a:	443b      	add	r3, r7
 8005e0c:	793a      	ldrb	r2, [r7, #4]
 8005e0e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005e12:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e16:	3301      	adds	r3, #1
 8005e18:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charProperties;
 8005e1c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e20:	3348      	adds	r3, #72	@ 0x48
 8005e22:	443b      	add	r3, r7
 8005e24:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8005e28:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005e2c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e30:	3301      	adds	r3, #1
 8005e32:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = secPermissions;
 8005e36:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e3a:	3348      	adds	r3, #72	@ 0x48
 8005e3c:	443b      	add	r3, r7
 8005e3e:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8005e42:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005e46:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = gattEvtMask;
 8005e50:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e54:	3348      	adds	r3, #72	@ 0x48
 8005e56:	443b      	add	r3, r7
 8005e58:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 8005e5c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005e60:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e64:	3301      	adds	r3, #1
 8005e66:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = encryKeySize;
 8005e6a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e6e:	3348      	adds	r3, #72	@ 0x48
 8005e70:	443b      	add	r3, r7
 8005e72:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8005e76:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005e7a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e7e:	3301      	adds	r3, #1
 8005e80:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = isVariable;
 8005e84:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e88:	3348      	adds	r3, #72	@ 0x48
 8005e8a:	443b      	add	r3, r7
 8005e8c:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8005e90:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005e94:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e98:	3301      	adds	r3, #1
 8005e9a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005e9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005ea2:	2203      	movs	r2, #3
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 ff9d 	bl	8006de6 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005eac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005eb0:	2218      	movs	r2, #24
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 ff96 	bl	8006de6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005eba:	233f      	movs	r3, #63	@ 0x3f
 8005ebc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8005ebe:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005ec2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 8005ec4:	f107 030c 	add.w	r3, r7, #12
 8005ec8:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8005eca:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005ece:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &resp;
 8005ed0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	643b      	str	r3, [r7, #64]	@ 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8005eda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005ede:	2100      	movs	r1, #0
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f000 fb47 	bl	8006574 <hci_send_req>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	da01      	bge.n	8005ef0 <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 8005eec:	23ff      	movs	r3, #255	@ 0xff
 8005eee:	e00c      	b.n	8005f0a <aci_gatt_add_char+0x18e>

  if (resp.status) {
 8005ef0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d002      	beq.n	8005efe <aci_gatt_add_char+0x182>
    return resp.status;
 8005ef8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005efc:	e005      	b.n	8005f0a <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8005efe:	f8b7 3029 	ldrh.w	r3, [r7, #41]	@ 0x29
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f06:	801a      	strh	r2, [r3, #0]

  return 0;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3748      	adds	r7, #72	@ 0x48
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8005f12:	b590      	push	{r4, r7, lr}
 8005f14:	b0ab      	sub	sp, #172	@ 0xac
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	4604      	mov	r4, r0
 8005f1a:	4608      	mov	r0, r1
 8005f1c:	4611      	mov	r1, r2
 8005f1e:	461a      	mov	r2, r3
 8005f20:	4623      	mov	r3, r4
 8005f22:	80fb      	strh	r3, [r7, #6]
 8005f24:	4603      	mov	r3, r0
 8005f26:	80bb      	strh	r3, [r7, #4]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	70fb      	strb	r3, [r7, #3]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8005f30:	2300      	movs	r3, #0
 8005f32:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8005f36:	78bb      	ldrb	r3, [r7, #2]
 8005f38:	2b7a      	cmp	r3, #122	@ 0x7a
 8005f3a:	d901      	bls.n	8005f40 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 8005f3c:	2342      	movs	r3, #66	@ 0x42
 8005f3e:	e074      	b.n	800602a <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 8005f40:	88fb      	ldrh	r3, [r7, #6]
 8005f42:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8005f44:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005f48:	f107 0208 	add.w	r2, r7, #8
 8005f4c:	4413      	add	r3, r2
 8005f4e:	88fa      	ldrh	r2, [r7, #6]
 8005f50:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005f52:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005f56:	3302      	adds	r3, #2
 8005f58:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  charHandle = htobs(charHandle);
 8005f5c:	88bb      	ldrh	r3, [r7, #4]
 8005f5e:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8005f60:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005f64:	f107 0208 	add.w	r2, r7, #8
 8005f68:	4413      	add	r3, r2
 8005f6a:	88ba      	ldrh	r2, [r7, #4]
 8005f6c:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005f6e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005f72:	3302      	adds	r3, #2
 8005f74:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValOffset;
 8005f78:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005f7c:	33a8      	adds	r3, #168	@ 0xa8
 8005f7e:	443b      	add	r3, r7
 8005f80:	78fa      	ldrb	r2, [r7, #3]
 8005f82:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8005f86:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValueLen;
 8005f90:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005f94:	33a8      	adds	r3, #168	@ 0xa8
 8005f96:	443b      	add	r3, r7
 8005f98:	78ba      	ldrb	r2, [r7, #2]
 8005f9a:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8005f9e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8005fa8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005fac:	f107 0208 	add.w	r2, r7, #8
 8005fb0:	4413      	add	r3, r2
 8005fb2:	78ba      	ldrb	r2, [r7, #2]
 8005fb4:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 ff90 	bl	8006ede <memcpy>
  indx +=  charValueLen;
 8005fbe:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8005fc2:	78bb      	ldrb	r3, [r7, #2]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005fca:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8005fce:	2218      	movs	r2, #24
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 ff07 	bl	8006de6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005fd8:	233f      	movs	r3, #63	@ 0x3f
 8005fda:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8005fde:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8005fe2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 8005fe6:	f107 0308 	add.w	r3, r7, #8
 8005fea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 8005fee:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005ff2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 8005ff6:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 8005ffa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 8005ffe:	2301      	movs	r3, #1
 8006000:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8006004:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8006008:	2100      	movs	r1, #0
 800600a:	4618      	mov	r0, r3
 800600c:	f000 fab2 	bl	8006574 <hci_send_req>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	da01      	bge.n	800601a <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 8006016:	23ff      	movs	r3, #255	@ 0xff
 8006018:	e007      	b.n	800602a <aci_gatt_update_char_value+0x118>

  if (status) {
 800601a:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <aci_gatt_update_char_value+0x116>
    return status;
 8006022:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8006026:	e000      	b.n	800602a <aci_gatt_update_char_value+0x118>
  }

  return 0;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	37ac      	adds	r7, #172	@ 0xac
 800602e:	46bd      	mov	sp, r7
 8006030:	bd90      	pop	{r4, r7, pc}

08006032 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b08a      	sub	sp, #40	@ 0x28
 8006036:	af00      	add	r7, sp, #0
 8006038:	4603      	mov	r3, r0
 800603a:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 800603c:	88fb      	ldrh	r3, [r7, #6]
 800603e:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 8006040:	f107 0310 	add.w	r3, r7, #16
 8006044:	2218      	movs	r2, #24
 8006046:	2100      	movs	r1, #0
 8006048:	4618      	mov	r0, r3
 800604a:	f000 fecc 	bl	8006de6 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 800604e:	233f      	movs	r3, #63	@ 0x3f
 8006050:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8006052:	f240 1327 	movw	r3, #295	@ 0x127
 8006056:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 8006058:	f107 030c 	add.w	r3, r7, #12
 800605c:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 800605e:	2302      	movs	r3, #2
 8006060:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 8006062:	f107 030b 	add.w	r3, r7, #11
 8006066:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 8006068:	2301      	movs	r3, #1
 800606a:	627b      	str	r3, [r7, #36]	@ 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 800606c:	f107 0310 	add.w	r3, r7, #16
 8006070:	2100      	movs	r1, #0
 8006072:	4618      	mov	r0, r3
 8006074:	f000 fa7e 	bl	8006574 <hci_send_req>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	da01      	bge.n	8006082 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 800607e:	23ff      	movs	r3, #255	@ 0xff
 8006080:	e000      	b.n	8006084 <aci_gatt_allow_read+0x52>

    return status;
 8006082:	7afb      	ldrb	r3, [r7, #11]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3728      	adds	r7, #40	@ 0x28
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b0ac      	sub	sp, #176	@ 0xb0
 8006090:	af00      	add	r7, sp, #0
 8006092:	60ba      	str	r2, [r7, #8]
 8006094:	607b      	str	r3, [r7, #4]
 8006096:	4603      	mov	r3, r0
 8006098:	73fb      	strb	r3, [r7, #15]
 800609a:	460b      	mov	r3, r1
 800609c:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 800609e:	7bfb      	ldrb	r3, [r7, #15]
 80060a0:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80060a4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80060a8:	2218      	movs	r2, #24
 80060aa:	2100      	movs	r1, #0
 80060ac:	4618      	mov	r0, r3
 80060ae:	f000 fe9a 	bl	8006de6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80060b2:	233f      	movs	r3, #63	@ 0x3f
 80060b4:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 80060b8:	230d      	movs	r3, #13
 80060ba:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  rq.cparam = &cp;
 80060be:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80060c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  rq.clen = sizeof(cp);
 80060c6:	2301      	movs	r3, #1
 80060c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  rq.rparam = &rp;
 80060cc:	f107 0314 	add.w	r3, r7, #20
 80060d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  rq.rlen = sizeof(rp);
 80060d4:	2380      	movs	r3, #128	@ 0x80
 80060d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 80060da:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80060de:	2100      	movs	r1, #0
 80060e0:	4618      	mov	r0, r3
 80060e2:	f000 fa47 	bl	8006574 <hci_send_req>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	da01      	bge.n	80060f0 <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 80060ec:	23ff      	movs	r3, #255	@ 0xff
 80060ee:	e01e      	b.n	800612e <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 80060f0:	7d3b      	ldrb	r3, [r7, #20]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <aci_hal_read_config_data+0x6e>
    return rp.status;
 80060f6:	7d3b      	ldrb	r3, [r7, #20]
 80060f8:	e019      	b.n	800612e <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 80060fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	b2da      	uxtb	r2, r3
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	461a      	mov	r2, r3
 800610e:	89bb      	ldrh	r3, [r7, #12]
 8006110:	4293      	cmp	r3, r2
 8006112:	d201      	bcs.n	8006118 <aci_hal_read_config_data+0x8c>
 8006114:	89ba      	ldrh	r2, [r7, #12]
 8006116:	e002      	b.n	800611e <aci_hal_read_config_data+0x92>
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	461a      	mov	r2, r3
 800611e:	f107 0314 	add.w	r3, r7, #20
 8006122:	3301      	adds	r3, #1
 8006124:	4619      	mov	r1, r3
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fed9 	bl	8006ede <memcpy>
  
  return 0;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	37b0      	adds	r7, #176	@ 0xb0
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b08a      	sub	sp, #40	@ 0x28
 800613a:	af00      	add	r7, sp, #0
 800613c:	4603      	mov	r3, r0
 800613e:	460a      	mov	r2, r1
 8006140:	71fb      	strb	r3, [r7, #7]
 8006142:	4613      	mov	r3, r2
 8006144:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8006146:	79fb      	ldrb	r3, [r7, #7]
 8006148:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 800614a:	79bb      	ldrb	r3, [r7, #6]
 800614c:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800614e:	f107 0310 	add.w	r3, r7, #16
 8006152:	2218      	movs	r2, #24
 8006154:	2100      	movs	r1, #0
 8006156:	4618      	mov	r0, r3
 8006158:	f000 fe45 	bl	8006de6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800615c:	233f      	movs	r3, #63	@ 0x3f
 800615e:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8006160:	230f      	movs	r3, #15
 8006162:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8006164:	f107 030c 	add.w	r3, r7, #12
 8006168:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800616a:	2302      	movs	r3, #2
 800616c:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800616e:	f107 030b 	add.w	r3, r7, #11
 8006172:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8006174:	2301      	movs	r3, #1
 8006176:	627b      	str	r3, [r7, #36]	@ 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8006178:	f107 0310 	add.w	r3, r7, #16
 800617c:	2100      	movs	r1, #0
 800617e:	4618      	mov	r0, r3
 8006180:	f000 f9f8 	bl	8006574 <hci_send_req>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	da01      	bge.n	800618e <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800618a:	23ff      	movs	r3, #255	@ 0xff
 800618c:	e000      	b.n	8006190 <aci_hal_set_tx_power_level+0x5a>

  return status;
 800618e:	7afb      	ldrb	r3, [r7, #11]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3728      	adds	r7, #40	@ 0x28
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8006198:	b590      	push	{r4, r7, lr}
 800619a:	b089      	sub	sp, #36	@ 0x24
 800619c:	af02      	add	r7, sp, #8
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 80061a2:	f107 0410 	add.w	r4, r7, #16
 80061a6:	f107 0215 	add.w	r2, r7, #21
 80061aa:	f107 0112 	add.w	r1, r7, #18
 80061ae:	f107 0016 	add.w	r0, r7, #22
 80061b2:	f107 030e 	add.w	r3, r7, #14
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	4623      	mov	r3, r4
 80061ba:	f000 f853 	bl	8006264 <hci_le_read_local_version>
 80061be:	4603      	mov	r3, r0
 80061c0:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 80061c2:	7dfb      	ldrb	r3, [r7, #23]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d126      	bne.n	8006216 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 80061c8:	8a7b      	ldrh	r3, [r7, #18]
 80061ca:	0a1b      	lsrs	r3, r3, #8
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 80061d4:	8a7b      	ldrh	r3, [r7, #18]
 80061d6:	021b      	lsls	r3, r3, #8
 80061d8:	b29a      	uxth	r2, r3
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	881b      	ldrh	r3, [r3, #0]
 80061e2:	b21a      	sxth	r2, r3
 80061e4:	89fb      	ldrh	r3, [r7, #14]
 80061e6:	091b      	lsrs	r3, r3, #4
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	011b      	lsls	r3, r3, #4
 80061ec:	b21b      	sxth	r3, r3
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	b21b      	sxth	r3, r3
 80061f2:	4313      	orrs	r3, r2
 80061f4:	b21b      	sxth	r3, r3
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	881b      	ldrh	r3, [r3, #0]
 8006200:	b21a      	sxth	r2, r3
 8006202:	89fb      	ldrh	r3, [r7, #14]
 8006204:	b21b      	sxth	r3, r3
 8006206:	f003 030f 	and.w	r3, r3, #15
 800620a:	b21b      	sxth	r3, r3
 800620c:	4313      	orrs	r3, r2
 800620e:	b21b      	sxth	r3, r3
 8006210:	b29a      	uxth	r2, r3
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8006216:	7dfb      	ldrb	r3, [r7, #23]
}
 8006218:	4618      	mov	r0, r3
 800621a:	371c      	adds	r7, #28
 800621c:	46bd      	mov	sp, r7
 800621e:	bd90      	pop	{r4, r7, pc}

08006220 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b088      	sub	sp, #32
 8006224:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006226:	f107 0308 	add.w	r3, r7, #8
 800622a:	2218      	movs	r2, #24
 800622c:	2100      	movs	r1, #0
 800622e:	4618      	mov	r0, r3
 8006230:	f000 fdd9 	bl	8006de6 <memset>
  rq.ogf = OGF_HOST_CTL;
 8006234:	2303      	movs	r3, #3
 8006236:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8006238:	2303      	movs	r3, #3
 800623a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800623c:	1dfb      	adds	r3, r7, #7
 800623e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006240:	2301      	movs	r3, #1
 8006242:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8006244:	f107 0308 	add.w	r3, r7, #8
 8006248:	2100      	movs	r1, #0
 800624a:	4618      	mov	r0, r3
 800624c:	f000 f992 	bl	8006574 <hci_send_req>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	da01      	bge.n	800625a <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8006256:	23ff      	movs	r3, #255	@ 0xff
 8006258:	e000      	b.n	800625c <hci_reset+0x3c>
  
  return status;  
 800625a:	79fb      	ldrb	r3, [r7, #7]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3720      	adds	r7, #32
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b08e      	sub	sp, #56	@ 0x38
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006272:	f107 0314 	add.w	r3, r7, #20
 8006276:	2209      	movs	r2, #9
 8006278:	2100      	movs	r1, #0
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fdb3 	bl	8006de6 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006280:	f107 0320 	add.w	r3, r7, #32
 8006284:	2218      	movs	r2, #24
 8006286:	2100      	movs	r1, #0
 8006288:	4618      	mov	r0, r3
 800628a:	f000 fdac 	bl	8006de6 <memset>
  rq.ogf = OGF_INFO_PARAM;
 800628e:	2304      	movs	r3, #4
 8006290:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8006292:	2301      	movs	r3, #1
 8006294:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = NULL;
 8006296:	2300      	movs	r3, #0
 8006298:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = 0;
 800629a:	2300      	movs	r3, #0
 800629c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 800629e:	f107 0314 	add.w	r3, r7, #20
 80062a2:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 80062a4:	2309      	movs	r3, #9
 80062a6:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 80062a8:	f107 0320 	add.w	r3, r7, #32
 80062ac:	2100      	movs	r1, #0
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 f960 	bl	8006574 <hci_send_req>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	da01      	bge.n	80062be <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 80062ba:	23ff      	movs	r3, #255	@ 0xff
 80062bc:	e018      	b.n	80062f0 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 80062be:	7d3b      	ldrb	r3, [r7, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <hci_le_read_local_version+0x64>
    return resp.status;
 80062c4:	7d3b      	ldrb	r3, [r7, #20]
 80062c6:	e013      	b.n	80062f0 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 80062c8:	7d7a      	ldrb	r2, [r7, #21]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 80062ce:	8afa      	ldrh	r2, [r7, #22]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 80062d4:	7e3a      	ldrb	r2, [r7, #24]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 80062da:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80062de:	b29a      	uxth	r2, r3
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 80062e4:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062ec:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3738      	adds	r7, #56	@ 0x38
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b092      	sub	sp, #72	@ 0x48
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	4603      	mov	r3, r0
 8006300:	6039      	str	r1, [r7, #0]
 8006302:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8006304:	f107 0310 	add.w	r3, r7, #16
 8006308:	2220      	movs	r2, #32
 800630a:	2100      	movs	r1, #0
 800630c:	4618      	mov	r0, r3
 800630e:	f000 fd6a 	bl	8006de6 <memset>
  scan_resp_cp.length = length;
 8006312:	79fb      	ldrb	r3, [r7, #7]
 8006314:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8006316:	79fb      	ldrb	r3, [r7, #7]
 8006318:	2b1f      	cmp	r3, #31
 800631a:	bf28      	it	cs
 800631c:	231f      	movcs	r3, #31
 800631e:	b2db      	uxtb	r3, r3
 8006320:	461a      	mov	r2, r3
 8006322:	f107 0310 	add.w	r3, r7, #16
 8006326:	3301      	adds	r3, #1
 8006328:	6839      	ldr	r1, [r7, #0]
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fdd7 	bl	8006ede <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006330:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006334:	2218      	movs	r2, #24
 8006336:	2100      	movs	r1, #0
 8006338:	4618      	mov	r0, r3
 800633a:	f000 fd54 	bl	8006de6 <memset>
  rq.ogf = OGF_LE_CTL;
 800633e:	2308      	movs	r3, #8
 8006340:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8006342:	2309      	movs	r3, #9
 8006344:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &scan_resp_cp;
 8006346:	f107 0310 	add.w	r3, r7, #16
 800634a:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800634c:	2320      	movs	r3, #32
 800634e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 8006350:	f107 030f 	add.w	r3, r7, #15
 8006354:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 8006356:	2301      	movs	r3, #1
 8006358:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800635a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800635e:	2100      	movs	r1, #0
 8006360:	4618      	mov	r0, r3
 8006362:	f000 f907 	bl	8006574 <hci_send_req>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	da01      	bge.n	8006370 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800636c:	23ff      	movs	r3, #255	@ 0xff
 800636e:	e000      	b.n	8006372 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8006370:	7bfb      	ldrb	r3, [r7, #15]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3748      	adds	r7, #72	@ 0x48
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800637a:	b480      	push	{r7}
 800637c:	b085      	sub	sp, #20
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	3308      	adds	r3, #8
 8006386:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	2b04      	cmp	r3, #4
 800638e:	d001      	beq.n	8006394 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8006390:	2301      	movs	r3, #1
 8006392:	e00c      	b.n	80063ae <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	3302      	adds	r3, #2
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	461a      	mov	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80063a2:	3b03      	subs	r3, #3
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d001      	beq.n	80063ac <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 80063a8:	2302      	movs	r3, #2
 80063aa:	e000      	b.n	80063ae <verify_packet+0x34>
  
  return 0;      
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
	...

080063bc <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b0a6      	sub	sp, #152	@ 0x98
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	607b      	str	r3, [r7, #4]
 80063c4:	4603      	mov	r3, r0
 80063c6:	81fb      	strh	r3, [r7, #14]
 80063c8:	460b      	mov	r3, r1
 80063ca:	81bb      	strh	r3, [r7, #12]
 80063cc:	4613      	mov	r3, r2
 80063ce:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 80063d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80063d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063d8:	b21a      	sxth	r2, r3
 80063da:	89fb      	ldrh	r3, [r7, #14]
 80063dc:	029b      	lsls	r3, r3, #10
 80063de:	b21b      	sxth	r3, r3
 80063e0:	4313      	orrs	r3, r2
 80063e2:	b21b      	sxth	r3, r3
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 80063e8:	7afb      	ldrb	r3, [r7, #11]
 80063ea:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 80063ec:	2301      	movs	r3, #1
 80063ee:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80063f0:	f107 0318 	add.w	r3, r7, #24
 80063f4:	3301      	adds	r3, #1
 80063f6:	461a      	mov	r2, r3
 80063f8:	f107 0314 	add.w	r3, r7, #20
 80063fc:	8819      	ldrh	r1, [r3, #0]
 80063fe:	789b      	ldrb	r3, [r3, #2]
 8006400:	8011      	strh	r1, [r2, #0]
 8006402:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8006404:	f107 0318 	add.w	r3, r7, #24
 8006408:	3304      	adds	r3, #4
 800640a:	7afa      	ldrb	r2, [r7, #11]
 800640c:	6879      	ldr	r1, [r7, #4]
 800640e:	4618      	mov	r0, r3
 8006410:	f000 fd65 	bl	8006ede <memcpy>
  
  if (hciContext.io.Send)
 8006414:	4b08      	ldr	r3, [pc, #32]	@ (8006438 <send_cmd+0x7c>)
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d009      	beq.n	8006430 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800641c:	4b06      	ldr	r3, [pc, #24]	@ (8006438 <send_cmd+0x7c>)
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	7afa      	ldrb	r2, [r7, #11]
 8006422:	b292      	uxth	r2, r2
 8006424:	3204      	adds	r2, #4
 8006426:	b291      	uxth	r1, r2
 8006428:	f107 0218 	add.w	r2, r7, #24
 800642c:	4610      	mov	r0, r2
 800642e:	4798      	blx	r3
  }
}
 8006430:	bf00      	nop
 8006432:	3798      	adds	r7, #152	@ 0x98
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	200005dc 	.word	0x200005dc

0800643c <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8006446:	e00a      	b.n	800645e <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8006448:	f107 030c 	add.w	r3, r7, #12
 800644c:	4619      	mov	r1, r3
 800644e:	6838      	ldr	r0, [r7, #0]
 8006450:	f000 fae8 	bl	8006a24 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4619      	mov	r1, r3
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fa4f 	bl	80068fc <list_insert_head>
  while (!list_is_empty(src_list))
 800645e:	6838      	ldr	r0, [r7, #0]
 8006460:	f000 fa2a 	bl	80068b8 <list_is_empty>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d0ee      	beq.n	8006448 <move_list+0xc>
  }
}
 800646a:	bf00      	nop
 800646c:	bf00      	nop
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800647a:	e009      	b.n	8006490 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800647c:	1d3b      	adds	r3, r7, #4
 800647e:	4619      	mov	r1, r3
 8006480:	4809      	ldr	r0, [pc, #36]	@ (80064a8 <free_event_list+0x34>)
 8006482:	f000 faa8 	bl	80069d6 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4619      	mov	r1, r3
 800648a:	4808      	ldr	r0, [pc, #32]	@ (80064ac <free_event_list+0x38>)
 800648c:	f000 fa5c 	bl	8006948 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8006490:	4806      	ldr	r0, [pc, #24]	@ (80064ac <free_event_list+0x38>)
 8006492:	f000 faee 	bl	8006a72 <list_get_size>
 8006496:	4603      	mov	r3, r0
 8006498:	2b01      	cmp	r3, #1
 800649a:	ddef      	ble.n	800647c <free_event_list+0x8>
  }
}
 800649c:	bf00      	nop
 800649e:	bf00      	nop
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	20000318 	.word	0x20000318
 80064ac:	20000310 	.word	0x20000310

080064b0 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 80064c0:	4a18      	ldr	r2, [pc, #96]	@ (8006524 <hci_init+0x74>)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 80064c6:	4818      	ldr	r0, [pc, #96]	@ (8006528 <hci_init+0x78>)
 80064c8:	f000 f9e6 	bl	8006898 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 80064cc:	4817      	ldr	r0, [pc, #92]	@ (800652c <hci_init+0x7c>)
 80064ce:	f000 f9e3 	bl	8006898 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 80064d2:	f7fc fae9 	bl	8002aa8 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80064d6:	2300      	movs	r3, #0
 80064d8:	73fb      	strb	r3, [r7, #15]
 80064da:	e00c      	b.n	80064f6 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
 80064de:	228c      	movs	r2, #140	@ 0x8c
 80064e0:	fb02 f303 	mul.w	r3, r2, r3
 80064e4:	4a12      	ldr	r2, [pc, #72]	@ (8006530 <hci_init+0x80>)
 80064e6:	4413      	add	r3, r2
 80064e8:	4619      	mov	r1, r3
 80064ea:	480f      	ldr	r0, [pc, #60]	@ (8006528 <hci_init+0x78>)
 80064ec:	f000 fa2c 	bl	8006948 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
 80064f2:	3301      	adds	r3, #1
 80064f4:	73fb      	strb	r3, [r7, #15]
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
 80064f8:	2b04      	cmp	r3, #4
 80064fa:	d9ef      	bls.n	80064dc <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 80064fc:	4b09      	ldr	r3, [pc, #36]	@ (8006524 <hci_init+0x74>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <hci_init+0x5c>
 8006504:	4b07      	ldr	r3, [pc, #28]	@ (8006524 <hci_init+0x74>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2000      	movs	r0, #0
 800650a:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800650c:	4b05      	ldr	r3, [pc, #20]	@ (8006524 <hci_init+0x74>)
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <hci_init+0x6a>
 8006514:	4b03      	ldr	r3, [pc, #12]	@ (8006524 <hci_init+0x74>)
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	4798      	blx	r3
}
 800651a:	bf00      	nop
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	200005dc 	.word	0x200005dc
 8006528:	20000310 	.word	0x20000310
 800652c:	20000318 	.word	0x20000318
 8006530:	20000320 	.word	0x20000320

08006534 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a0b      	ldr	r2, [pc, #44]	@ (8006570 <hci_register_io_bus+0x3c>)
 8006542:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	4a09      	ldr	r2, [pc, #36]	@ (8006570 <hci_register_io_bus+0x3c>)
 800654a:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	4a07      	ldr	r2, [pc, #28]	@ (8006570 <hci_register_io_bus+0x3c>)
 8006552:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	4a05      	ldr	r2, [pc, #20]	@ (8006570 <hci_register_io_bus+0x3c>)
 800655a:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	4a03      	ldr	r2, [pc, #12]	@ (8006570 <hci_register_io_bus+0x3c>)
 8006562:	6093      	str	r3, [r2, #8]
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	200005dc 	.word	0x200005dc

08006574 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b08e      	sub	sp, #56	@ 0x38
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	460b      	mov	r3, r1
 800657e:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	885b      	ldrh	r3, [r3, #2]
 8006584:	b21b      	sxth	r3, r3
 8006586:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800658a:	b21a      	sxth	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	029b      	lsls	r3, r3, #10
 8006592:	b21b      	sxth	r3, r3
 8006594:	4313      	orrs	r3, r2
 8006596:	b21b      	sxth	r3, r3
 8006598:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800659a:	2300      	movs	r3, #0
 800659c:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800659e:	f107 0308 	add.w	r3, r7, #8
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 f978 	bl	8006898 <list_init_head>

  free_event_list();
 80065a8:	f7ff ff64 	bl	8006474 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	8818      	ldrh	r0, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	8859      	ldrh	r1, [r3, #2]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f7ff fefd 	bl	80063bc <send_cmd>
  
  if (async)
 80065c2:	78fb      	ldrb	r3, [r7, #3]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <hci_send_req+0x58>
  {
    return 0;
 80065c8:	2300      	movs	r3, #0
 80065ca:	e0e2      	b.n	8006792 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 80065cc:	f7fd f8ec 	bl	80037a8 <HAL_GetTick>
 80065d0:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80065d2:	f7fd f8e9 	bl	80037a8 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80065e0:	f200 80b3 	bhi.w	800674a <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80065e4:	486d      	ldr	r0, [pc, #436]	@ (800679c <hci_send_req+0x228>)
 80065e6:	f000 f967 	bl	80068b8 <list_is_empty>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d000      	beq.n	80065f2 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80065f0:	e7ef      	b.n	80065d2 <hci_send_req+0x5e>
      {
        break;
 80065f2:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 80065f4:	f107 0310 	add.w	r3, r7, #16
 80065f8:	4619      	mov	r1, r3
 80065fa:	4868      	ldr	r0, [pc, #416]	@ (800679c <hci_send_req+0x228>)
 80065fc:	f000 f9eb 	bl	80069d6 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	3308      	adds	r3, #8
 8006604:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8006606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	2b04      	cmp	r3, #4
 800660c:	d17f      	bne.n	800670e <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 800660e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006610:	3301      	adds	r3, #1
 8006612:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	3308      	adds	r3, #8
 8006618:	3303      	adds	r3, #3
 800661a:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006622:	3b03      	subs	r3, #3
 8006624:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8006626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	2b3e      	cmp	r3, #62	@ 0x3e
 800662c:	d04c      	beq.n	80066c8 <hci_send_req+0x154>
 800662e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006630:	dc68      	bgt.n	8006704 <hci_send_req+0x190>
 8006632:	2b10      	cmp	r3, #16
 8006634:	f000 808b 	beq.w	800674e <hci_send_req+0x1da>
 8006638:	2b10      	cmp	r3, #16
 800663a:	dc63      	bgt.n	8006704 <hci_send_req+0x190>
 800663c:	2b0e      	cmp	r3, #14
 800663e:	d023      	beq.n	8006688 <hci_send_req+0x114>
 8006640:	2b0f      	cmp	r3, #15
 8006642:	d15f      	bne.n	8006704 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8006644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006646:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	885b      	ldrh	r3, [r3, #2]
 800664c:	b29b      	uxth	r3, r3
 800664e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006650:	429a      	cmp	r2, r3
 8006652:	d17e      	bne.n	8006752 <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	2b0f      	cmp	r3, #15
 800665a:	d004      	beq.n	8006666 <hci_send_req+0xf2>
          if (cs->status) {
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d051      	beq.n	8006708 <hci_send_req+0x194>
            goto failed;
 8006664:	e078      	b.n	8006758 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	695a      	ldr	r2, [r3, #20]
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	429a      	cmp	r2, r3
 800666e:	bf28      	it	cs
 8006670:	461a      	movcs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6918      	ldr	r0, [r3, #16]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	461a      	mov	r2, r3
 8006680:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006682:	f000 fc2c 	bl	8006ede <memcpy>
        goto done;
 8006686:	e078      	b.n	800677a <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8006688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668a:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006692:	b29b      	uxth	r3, r3
 8006694:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006696:	429a      	cmp	r2, r3
 8006698:	d15d      	bne.n	8006756 <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800669a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669c:	3303      	adds	r3, #3
 800669e:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	3b03      	subs	r3, #3
 80066a4:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	695a      	ldr	r2, [r3, #20]
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	bf28      	it	cs
 80066b0:	461a      	movcs	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6918      	ldr	r0, [r3, #16]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	461a      	mov	r2, r3
 80066c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80066c2:	f000 fc0c 	bl	8006ede <memcpy>
        goto done;
 80066c6:	e058      	b.n	800677a <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 80066c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ca:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	461a      	mov	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d118      	bne.n	800670c <hci_send_req+0x198>
          break;
      
        len -= 1;
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	3b01      	subs	r3, #1
 80066de:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	695a      	ldr	r2, [r3, #20]
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	bf28      	it	cs
 80066ea:	461a      	movcs	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6918      	ldr	r0, [r3, #16]
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	1c59      	adds	r1, r3, #1
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	461a      	mov	r2, r3
 80066fe:	f000 fbee 	bl	8006ede <memcpy>
        goto done;
 8006702:	e03a      	b.n	800677a <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8006704:	bf00      	nop
 8006706:	e002      	b.n	800670e <hci_send_req+0x19a>
          break;
 8006708:	bf00      	nop
 800670a:	e000      	b.n	800670e <hci_send_req+0x19a>
          break;
 800670c:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800670e:	4824      	ldr	r0, [pc, #144]	@ (80067a0 <hci_send_req+0x22c>)
 8006710:	f000 f8d2 	bl	80068b8 <list_is_empty>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00d      	beq.n	8006736 <hci_send_req+0x1c2>
 800671a:	4820      	ldr	r0, [pc, #128]	@ (800679c <hci_send_req+0x228>)
 800671c:	f000 f8cc 	bl	80068b8 <list_is_empty>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d007      	beq.n	8006736 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	4619      	mov	r1, r3
 800672a:	481d      	ldr	r0, [pc, #116]	@ (80067a0 <hci_send_req+0x22c>)
 800672c:	f000 f90c 	bl	8006948 <list_insert_tail>
      hciReadPacket=NULL;
 8006730:	2300      	movs	r3, #0
 8006732:	613b      	str	r3, [r7, #16]
 8006734:	e008      	b.n	8006748 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	f107 0308 	add.w	r3, r7, #8
 800673c:	4611      	mov	r1, r2
 800673e:	4618      	mov	r0, r3
 8006740:	f000 f902 	bl	8006948 <list_insert_tail>
      hciReadPacket=NULL;
 8006744:	2300      	movs	r3, #0
 8006746:	613b      	str	r3, [r7, #16]
  {
 8006748:	e740      	b.n	80065cc <hci_send_req+0x58>
        goto failed;
 800674a:	bf00      	nop
 800674c:	e004      	b.n	8006758 <hci_send_req+0x1e4>
        goto failed;
 800674e:	bf00      	nop
 8006750:	e002      	b.n	8006758 <hci_send_req+0x1e4>
          goto failed;
 8006752:	bf00      	nop
 8006754:	e000      	b.n	8006758 <hci_send_req+0x1e4>
          goto failed;
 8006756:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d004      	beq.n	8006768 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	4619      	mov	r1, r3
 8006762:	480f      	ldr	r0, [pc, #60]	@ (80067a0 <hci_send_req+0x22c>)
 8006764:	f000 f8ca 	bl	80068fc <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8006768:	f107 0308 	add.w	r3, r7, #8
 800676c:	4619      	mov	r1, r3
 800676e:	480b      	ldr	r0, [pc, #44]	@ (800679c <hci_send_req+0x228>)
 8006770:	f7ff fe64 	bl	800643c <move_list>

  return -1;
 8006774:	f04f 33ff 	mov.w	r3, #4294967295
 8006778:	e00b      	b.n	8006792 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	4619      	mov	r1, r3
 800677e:	4808      	ldr	r0, [pc, #32]	@ (80067a0 <hci_send_req+0x22c>)
 8006780:	f000 f8bc 	bl	80068fc <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8006784:	f107 0308 	add.w	r3, r7, #8
 8006788:	4619      	mov	r1, r3
 800678a:	4804      	ldr	r0, [pc, #16]	@ (800679c <hci_send_req+0x228>)
 800678c:	f7ff fe56 	bl	800643c <move_list>

  return 0;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3738      	adds	r7, #56	@ 0x38
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	20000318 	.word	0x20000318
 80067a0:	20000310 	.word	0x20000310

080067a4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 80067aa:	2300      	movs	r3, #0
 80067ac:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80067ae:	e013      	b.n	80067d8 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 80067b0:	1d3b      	adds	r3, r7, #4
 80067b2:	4619      	mov	r1, r3
 80067b4:	480e      	ldr	r0, [pc, #56]	@ (80067f0 <hci_user_evt_proc+0x4c>)
 80067b6:	f000 f90e 	bl	80069d6 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80067ba:	4b0e      	ldr	r3, [pc, #56]	@ (80067f4 <hci_user_evt_proc+0x50>)
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d005      	beq.n	80067ce <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 80067c2:	4b0c      	ldr	r3, [pc, #48]	@ (80067f4 <hci_user_evt_proc+0x50>)
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	3208      	adds	r2, #8
 80067ca:	4610      	mov	r0, r2
 80067cc:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4619      	mov	r1, r3
 80067d2:	4809      	ldr	r0, [pc, #36]	@ (80067f8 <hci_user_evt_proc+0x54>)
 80067d4:	f000 f8b8 	bl	8006948 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80067d8:	4805      	ldr	r0, [pc, #20]	@ (80067f0 <hci_user_evt_proc+0x4c>)
 80067da:	f000 f86d 	bl	80068b8 <list_is_empty>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0e5      	beq.n	80067b0 <hci_user_evt_proc+0xc>
  }
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	20000318 	.word	0x20000318
 80067f4:	200005dc 	.word	0x200005dc
 80067f8:	20000310 	.word	0x20000310

080067fc <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8006804:	2300      	movs	r3, #0
 8006806:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8006808:	2300      	movs	r3, #0
 800680a:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800680c:	481f      	ldr	r0, [pc, #124]	@ (800688c <hci_notify_asynch_evt+0x90>)
 800680e:	f000 f853 	bl	80068b8 <list_is_empty>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d132      	bne.n	800687e <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8006818:	f107 030c 	add.w	r3, r7, #12
 800681c:	4619      	mov	r1, r3
 800681e:	481b      	ldr	r0, [pc, #108]	@ (800688c <hci_notify_asynch_evt+0x90>)
 8006820:	f000 f8d9 	bl	80069d6 <list_remove_head>
    
    if (hciContext.io.Receive)
 8006824:	4b1a      	ldr	r3, [pc, #104]	@ (8006890 <hci_notify_asynch_evt+0x94>)
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d02a      	beq.n	8006882 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800682c:	4b18      	ldr	r3, [pc, #96]	@ (8006890 <hci_notify_asynch_evt+0x94>)
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	3208      	adds	r2, #8
 8006834:	2180      	movs	r1, #128	@ 0x80
 8006836:	4610      	mov	r0, r2
 8006838:	4798      	blx	r3
 800683a:	4603      	mov	r3, r0
 800683c:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800683e:	7cfb      	ldrb	r3, [r7, #19]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d016      	beq.n	8006872 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	7cfa      	ldrb	r2, [r7, #19]
 8006848:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4618      	mov	r0, r3
 8006850:	f7ff fd93 	bl	800637a <verify_packet>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d105      	bne.n	8006866 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4619      	mov	r1, r3
 800685e:	480d      	ldr	r0, [pc, #52]	@ (8006894 <hci_notify_asynch_evt+0x98>)
 8006860:	f000 f872 	bl	8006948 <list_insert_tail>
 8006864:	e00d      	b.n	8006882 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	4619      	mov	r1, r3
 800686a:	4808      	ldr	r0, [pc, #32]	@ (800688c <hci_notify_asynch_evt+0x90>)
 800686c:	f000 f846 	bl	80068fc <list_insert_head>
 8006870:	e007      	b.n	8006882 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	4619      	mov	r1, r3
 8006876:	4805      	ldr	r0, [pc, #20]	@ (800688c <hci_notify_asynch_evt+0x90>)
 8006878:	f000 f840 	bl	80068fc <list_insert_head>
 800687c:	e001      	b.n	8006882 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800687e:	2301      	movs	r3, #1
 8006880:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8006882:	697b      	ldr	r3, [r7, #20]

}
 8006884:	4618      	mov	r0, r3
 8006886:	3718      	adds	r7, #24
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	20000310 	.word	0x20000310
 8006890:	200005dc 	.word	0x200005dc
 8006894:	20000318 	.word	0x20000318

08006898 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	605a      	str	r2, [r3, #4]
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b087      	sub	sp, #28
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80068c0:	f3ef 8310 	mrs	r3, PRIMASK
 80068c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80068c6:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80068c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80068ca:	b672      	cpsid	i
}
 80068cc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d102      	bne.n	80068de <list_is_empty+0x26>
  {
    return_value = 1;
 80068d8:	2301      	movs	r3, #1
 80068da:	75fb      	strb	r3, [r7, #23]
 80068dc:	e001      	b.n	80068e2 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 80068de:	2300      	movs	r3, #0
 80068e0:	75fb      	strb	r3, [r7, #23]
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f383 8810 	msr	PRIMASK, r3
}
 80068ec:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 80068ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	371c      	adds	r7, #28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006906:	f3ef 8310 	mrs	r3, PRIMASK
 800690a:	60fb      	str	r3, [r7, #12]
  return(result);
 800690c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800690e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006910:	b672      	cpsid	i
}
 8006912:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	605a      	str	r2, [r3, #4]
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f383 8810 	msr	PRIMASK, r3
}
 800693a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800693c:	bf00      	nop
 800693e:	371c      	adds	r7, #28
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006952:	f3ef 8310 	mrs	r3, PRIMASK
 8006956:	60fb      	str	r3, [r7, #12]
  return(result);
 8006958:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800695a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800695c:	b672      	cpsid	i
}
 800695e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	601a      	str	r2, [r3, #0]
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f383 8810 	msr	PRIMASK, r3
}
 8006986:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006988:	bf00      	nop
 800698a:	371c      	adds	r7, #28
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8006994:	b480      	push	{r7}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800699c:	f3ef 8310 	mrs	r3, PRIMASK
 80069a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80069a2:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80069a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80069a6:	b672      	cpsid	i
}
 80069a8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	6812      	ldr	r2, [r2, #0]
 80069b2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	6852      	ldr	r2, [r2, #4]
 80069bc:	605a      	str	r2, [r3, #4]
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	f383 8810 	msr	PRIMASK, r3
}
 80069c8:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80069ca:	bf00      	nop
 80069cc:	371c      	adds	r7, #28
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b086      	sub	sp, #24
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80069e0:	f3ef 8310 	mrs	r3, PRIMASK
 80069e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80069e6:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80069e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80069ea:	b672      	cpsid	i
}
 80069ec:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7ff ffca 	bl	8006994 <list_remove_node>
  (*node)->next = NULL;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2200      	movs	r2, #0
 8006a06:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	605a      	str	r2, [r3, #4]
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	f383 8810 	msr	PRIMASK, r3
}
 8006a1a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006a1c:	bf00      	nop
 8006a1e:	3718      	adds	r7, #24
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a32:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a34:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006a36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a38:	b672      	cpsid	i
}
 8006a3a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7ff ffa3 	bl	8006994 <list_remove_node>
  (*node)->next = NULL;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2200      	movs	r2, #0
 8006a54:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	605a      	str	r2, [r3, #4]
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f383 8810 	msr	PRIMASK, r3
}
 8006a68:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006a6a:	bf00      	nop
 8006a6c:	3718      	adds	r7, #24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8006a72:	b480      	push	{r7}
 8006a74:	b089      	sub	sp, #36	@ 0x24
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  int size = 0;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a82:	613b      	str	r3, [r7, #16]
  return(result);
 8006a84:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006a86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a88:	b672      	cpsid	i
}
 8006a8a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8006a92:	e005      	b.n	8006aa0 <list_get_size+0x2e>
  {
    size++;
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	3301      	adds	r3, #1
 8006a98:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d1f5      	bne.n	8006a94 <list_get_size+0x22>
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f383 8810 	msr	PRIMASK, r3
}
 8006ab2:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8006ab4:	69fb      	ldr	r3, [r7, #28]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3724      	adds	r7, #36	@ 0x24
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
	...

08006ac4 <srand>:
 8006ac4:	b538      	push	{r3, r4, r5, lr}
 8006ac6:	4b10      	ldr	r3, [pc, #64]	@ (8006b08 <srand+0x44>)
 8006ac8:	681d      	ldr	r5, [r3, #0]
 8006aca:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006acc:	4604      	mov	r4, r0
 8006ace:	b9b3      	cbnz	r3, 8006afe <srand+0x3a>
 8006ad0:	2018      	movs	r0, #24
 8006ad2:	f000 fa7b 	bl	8006fcc <malloc>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	6328      	str	r0, [r5, #48]	@ 0x30
 8006ada:	b920      	cbnz	r0, 8006ae6 <srand+0x22>
 8006adc:	4b0b      	ldr	r3, [pc, #44]	@ (8006b0c <srand+0x48>)
 8006ade:	480c      	ldr	r0, [pc, #48]	@ (8006b10 <srand+0x4c>)
 8006ae0:	2146      	movs	r1, #70	@ 0x46
 8006ae2:	f000 fa0b 	bl	8006efc <__assert_func>
 8006ae6:	490b      	ldr	r1, [pc, #44]	@ (8006b14 <srand+0x50>)
 8006ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8006b18 <srand+0x54>)
 8006aea:	e9c0 1300 	strd	r1, r3, [r0]
 8006aee:	4b0b      	ldr	r3, [pc, #44]	@ (8006b1c <srand+0x58>)
 8006af0:	6083      	str	r3, [r0, #8]
 8006af2:	230b      	movs	r3, #11
 8006af4:	8183      	strh	r3, [r0, #12]
 8006af6:	2100      	movs	r1, #0
 8006af8:	2001      	movs	r0, #1
 8006afa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006afe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006b00:	2200      	movs	r2, #0
 8006b02:	611c      	str	r4, [r3, #16]
 8006b04:	615a      	str	r2, [r3, #20]
 8006b06:	bd38      	pop	{r3, r4, r5, pc}
 8006b08:	20000030 	.word	0x20000030
 8006b0c:	08007ef8 	.word	0x08007ef8
 8006b10:	08007f0f 	.word	0x08007f0f
 8006b14:	abcd330e 	.word	0xabcd330e
 8006b18:	e66d1234 	.word	0xe66d1234
 8006b1c:	0005deec 	.word	0x0005deec

08006b20 <rand>:
 8006b20:	4b16      	ldr	r3, [pc, #88]	@ (8006b7c <rand+0x5c>)
 8006b22:	b510      	push	{r4, lr}
 8006b24:	681c      	ldr	r4, [r3, #0]
 8006b26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006b28:	b9b3      	cbnz	r3, 8006b58 <rand+0x38>
 8006b2a:	2018      	movs	r0, #24
 8006b2c:	f000 fa4e 	bl	8006fcc <malloc>
 8006b30:	4602      	mov	r2, r0
 8006b32:	6320      	str	r0, [r4, #48]	@ 0x30
 8006b34:	b920      	cbnz	r0, 8006b40 <rand+0x20>
 8006b36:	4b12      	ldr	r3, [pc, #72]	@ (8006b80 <rand+0x60>)
 8006b38:	4812      	ldr	r0, [pc, #72]	@ (8006b84 <rand+0x64>)
 8006b3a:	2152      	movs	r1, #82	@ 0x52
 8006b3c:	f000 f9de 	bl	8006efc <__assert_func>
 8006b40:	4911      	ldr	r1, [pc, #68]	@ (8006b88 <rand+0x68>)
 8006b42:	4b12      	ldr	r3, [pc, #72]	@ (8006b8c <rand+0x6c>)
 8006b44:	e9c0 1300 	strd	r1, r3, [r0]
 8006b48:	4b11      	ldr	r3, [pc, #68]	@ (8006b90 <rand+0x70>)
 8006b4a:	6083      	str	r3, [r0, #8]
 8006b4c:	230b      	movs	r3, #11
 8006b4e:	8183      	strh	r3, [r0, #12]
 8006b50:	2100      	movs	r1, #0
 8006b52:	2001      	movs	r0, #1
 8006b54:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006b58:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006b5a:	480e      	ldr	r0, [pc, #56]	@ (8006b94 <rand+0x74>)
 8006b5c:	690b      	ldr	r3, [r1, #16]
 8006b5e:	694c      	ldr	r4, [r1, #20]
 8006b60:	4a0d      	ldr	r2, [pc, #52]	@ (8006b98 <rand+0x78>)
 8006b62:	4358      	muls	r0, r3
 8006b64:	fb02 0004 	mla	r0, r2, r4, r0
 8006b68:	fba3 3202 	umull	r3, r2, r3, r2
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	eb40 0002 	adc.w	r0, r0, r2
 8006b72:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006b76:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006b7a:	bd10      	pop	{r4, pc}
 8006b7c:	20000030 	.word	0x20000030
 8006b80:	08007ef8 	.word	0x08007ef8
 8006b84:	08007f0f 	.word	0x08007f0f
 8006b88:	abcd330e 	.word	0xabcd330e
 8006b8c:	e66d1234 	.word	0xe66d1234
 8006b90:	0005deec 	.word	0x0005deec
 8006b94:	5851f42d 	.word	0x5851f42d
 8006b98:	4c957f2d 	.word	0x4c957f2d

08006b9c <std>:
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	b510      	push	{r4, lr}
 8006ba0:	4604      	mov	r4, r0
 8006ba2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ba6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006baa:	6083      	str	r3, [r0, #8]
 8006bac:	8181      	strh	r1, [r0, #12]
 8006bae:	6643      	str	r3, [r0, #100]	@ 0x64
 8006bb0:	81c2      	strh	r2, [r0, #14]
 8006bb2:	6183      	str	r3, [r0, #24]
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	2208      	movs	r2, #8
 8006bb8:	305c      	adds	r0, #92	@ 0x5c
 8006bba:	f000 f914 	bl	8006de6 <memset>
 8006bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf4 <std+0x58>)
 8006bc0:	6263      	str	r3, [r4, #36]	@ 0x24
 8006bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf8 <std+0x5c>)
 8006bc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006bfc <std+0x60>)
 8006bc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006bca:	4b0d      	ldr	r3, [pc, #52]	@ (8006c00 <std+0x64>)
 8006bcc:	6323      	str	r3, [r4, #48]	@ 0x30
 8006bce:	4b0d      	ldr	r3, [pc, #52]	@ (8006c04 <std+0x68>)
 8006bd0:	6224      	str	r4, [r4, #32]
 8006bd2:	429c      	cmp	r4, r3
 8006bd4:	d006      	beq.n	8006be4 <std+0x48>
 8006bd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006bda:	4294      	cmp	r4, r2
 8006bdc:	d002      	beq.n	8006be4 <std+0x48>
 8006bde:	33d0      	adds	r3, #208	@ 0xd0
 8006be0:	429c      	cmp	r4, r3
 8006be2:	d105      	bne.n	8006bf0 <std+0x54>
 8006be4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bec:	f000 b974 	b.w	8006ed8 <__retarget_lock_init_recursive>
 8006bf0:	bd10      	pop	{r4, pc}
 8006bf2:	bf00      	nop
 8006bf4:	08006d61 	.word	0x08006d61
 8006bf8:	08006d83 	.word	0x08006d83
 8006bfc:	08006dbb 	.word	0x08006dbb
 8006c00:	08006ddf 	.word	0x08006ddf
 8006c04:	200005fc 	.word	0x200005fc

08006c08 <stdio_exit_handler>:
 8006c08:	4a02      	ldr	r2, [pc, #8]	@ (8006c14 <stdio_exit_handler+0xc>)
 8006c0a:	4903      	ldr	r1, [pc, #12]	@ (8006c18 <stdio_exit_handler+0x10>)
 8006c0c:	4803      	ldr	r0, [pc, #12]	@ (8006c1c <stdio_exit_handler+0x14>)
 8006c0e:	f000 b869 	b.w	8006ce4 <_fwalk_sglue>
 8006c12:	bf00      	nop
 8006c14:	20000024 	.word	0x20000024
 8006c18:	0800780d 	.word	0x0800780d
 8006c1c:	20000034 	.word	0x20000034

08006c20 <cleanup_stdio>:
 8006c20:	6841      	ldr	r1, [r0, #4]
 8006c22:	4b0c      	ldr	r3, [pc, #48]	@ (8006c54 <cleanup_stdio+0x34>)
 8006c24:	4299      	cmp	r1, r3
 8006c26:	b510      	push	{r4, lr}
 8006c28:	4604      	mov	r4, r0
 8006c2a:	d001      	beq.n	8006c30 <cleanup_stdio+0x10>
 8006c2c:	f000 fdee 	bl	800780c <_fflush_r>
 8006c30:	68a1      	ldr	r1, [r4, #8]
 8006c32:	4b09      	ldr	r3, [pc, #36]	@ (8006c58 <cleanup_stdio+0x38>)
 8006c34:	4299      	cmp	r1, r3
 8006c36:	d002      	beq.n	8006c3e <cleanup_stdio+0x1e>
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f000 fde7 	bl	800780c <_fflush_r>
 8006c3e:	68e1      	ldr	r1, [r4, #12]
 8006c40:	4b06      	ldr	r3, [pc, #24]	@ (8006c5c <cleanup_stdio+0x3c>)
 8006c42:	4299      	cmp	r1, r3
 8006c44:	d004      	beq.n	8006c50 <cleanup_stdio+0x30>
 8006c46:	4620      	mov	r0, r4
 8006c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c4c:	f000 bdde 	b.w	800780c <_fflush_r>
 8006c50:	bd10      	pop	{r4, pc}
 8006c52:	bf00      	nop
 8006c54:	200005fc 	.word	0x200005fc
 8006c58:	20000664 	.word	0x20000664
 8006c5c:	200006cc 	.word	0x200006cc

08006c60 <global_stdio_init.part.0>:
 8006c60:	b510      	push	{r4, lr}
 8006c62:	4b0b      	ldr	r3, [pc, #44]	@ (8006c90 <global_stdio_init.part.0+0x30>)
 8006c64:	4c0b      	ldr	r4, [pc, #44]	@ (8006c94 <global_stdio_init.part.0+0x34>)
 8006c66:	4a0c      	ldr	r2, [pc, #48]	@ (8006c98 <global_stdio_init.part.0+0x38>)
 8006c68:	601a      	str	r2, [r3, #0]
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	2104      	movs	r1, #4
 8006c70:	f7ff ff94 	bl	8006b9c <std>
 8006c74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c78:	2201      	movs	r2, #1
 8006c7a:	2109      	movs	r1, #9
 8006c7c:	f7ff ff8e 	bl	8006b9c <std>
 8006c80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c84:	2202      	movs	r2, #2
 8006c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c8a:	2112      	movs	r1, #18
 8006c8c:	f7ff bf86 	b.w	8006b9c <std>
 8006c90:	20000734 	.word	0x20000734
 8006c94:	200005fc 	.word	0x200005fc
 8006c98:	08006c09 	.word	0x08006c09

08006c9c <__sfp_lock_acquire>:
 8006c9c:	4801      	ldr	r0, [pc, #4]	@ (8006ca4 <__sfp_lock_acquire+0x8>)
 8006c9e:	f000 b91c 	b.w	8006eda <__retarget_lock_acquire_recursive>
 8006ca2:	bf00      	nop
 8006ca4:	2000073d 	.word	0x2000073d

08006ca8 <__sfp_lock_release>:
 8006ca8:	4801      	ldr	r0, [pc, #4]	@ (8006cb0 <__sfp_lock_release+0x8>)
 8006caa:	f000 b917 	b.w	8006edc <__retarget_lock_release_recursive>
 8006cae:	bf00      	nop
 8006cb0:	2000073d 	.word	0x2000073d

08006cb4 <__sinit>:
 8006cb4:	b510      	push	{r4, lr}
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	f7ff fff0 	bl	8006c9c <__sfp_lock_acquire>
 8006cbc:	6a23      	ldr	r3, [r4, #32]
 8006cbe:	b11b      	cbz	r3, 8006cc8 <__sinit+0x14>
 8006cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cc4:	f7ff bff0 	b.w	8006ca8 <__sfp_lock_release>
 8006cc8:	4b04      	ldr	r3, [pc, #16]	@ (8006cdc <__sinit+0x28>)
 8006cca:	6223      	str	r3, [r4, #32]
 8006ccc:	4b04      	ldr	r3, [pc, #16]	@ (8006ce0 <__sinit+0x2c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1f5      	bne.n	8006cc0 <__sinit+0xc>
 8006cd4:	f7ff ffc4 	bl	8006c60 <global_stdio_init.part.0>
 8006cd8:	e7f2      	b.n	8006cc0 <__sinit+0xc>
 8006cda:	bf00      	nop
 8006cdc:	08006c21 	.word	0x08006c21
 8006ce0:	20000734 	.word	0x20000734

08006ce4 <_fwalk_sglue>:
 8006ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ce8:	4607      	mov	r7, r0
 8006cea:	4688      	mov	r8, r1
 8006cec:	4614      	mov	r4, r2
 8006cee:	2600      	movs	r6, #0
 8006cf0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cf4:	f1b9 0901 	subs.w	r9, r9, #1
 8006cf8:	d505      	bpl.n	8006d06 <_fwalk_sglue+0x22>
 8006cfa:	6824      	ldr	r4, [r4, #0]
 8006cfc:	2c00      	cmp	r4, #0
 8006cfe:	d1f7      	bne.n	8006cf0 <_fwalk_sglue+0xc>
 8006d00:	4630      	mov	r0, r6
 8006d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d06:	89ab      	ldrh	r3, [r5, #12]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d907      	bls.n	8006d1c <_fwalk_sglue+0x38>
 8006d0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d10:	3301      	adds	r3, #1
 8006d12:	d003      	beq.n	8006d1c <_fwalk_sglue+0x38>
 8006d14:	4629      	mov	r1, r5
 8006d16:	4638      	mov	r0, r7
 8006d18:	47c0      	blx	r8
 8006d1a:	4306      	orrs	r6, r0
 8006d1c:	3568      	adds	r5, #104	@ 0x68
 8006d1e:	e7e9      	b.n	8006cf4 <_fwalk_sglue+0x10>

08006d20 <siprintf>:
 8006d20:	b40e      	push	{r1, r2, r3}
 8006d22:	b500      	push	{lr}
 8006d24:	b09c      	sub	sp, #112	@ 0x70
 8006d26:	ab1d      	add	r3, sp, #116	@ 0x74
 8006d28:	9002      	str	r0, [sp, #8]
 8006d2a:	9006      	str	r0, [sp, #24]
 8006d2c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006d30:	4809      	ldr	r0, [pc, #36]	@ (8006d58 <siprintf+0x38>)
 8006d32:	9107      	str	r1, [sp, #28]
 8006d34:	9104      	str	r1, [sp, #16]
 8006d36:	4909      	ldr	r1, [pc, #36]	@ (8006d5c <siprintf+0x3c>)
 8006d38:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d3c:	9105      	str	r1, [sp, #20]
 8006d3e:	6800      	ldr	r0, [r0, #0]
 8006d40:	9301      	str	r3, [sp, #4]
 8006d42:	a902      	add	r1, sp, #8
 8006d44:	f000 fa54 	bl	80071f0 <_svfiprintf_r>
 8006d48:	9b02      	ldr	r3, [sp, #8]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	701a      	strb	r2, [r3, #0]
 8006d4e:	b01c      	add	sp, #112	@ 0x70
 8006d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d54:	b003      	add	sp, #12
 8006d56:	4770      	bx	lr
 8006d58:	20000030 	.word	0x20000030
 8006d5c:	ffff0208 	.word	0xffff0208

08006d60 <__sread>:
 8006d60:	b510      	push	{r4, lr}
 8006d62:	460c      	mov	r4, r1
 8006d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d68:	f000 f868 	bl	8006e3c <_read_r>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	bfab      	itete	ge
 8006d70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d72:	89a3      	ldrhlt	r3, [r4, #12]
 8006d74:	181b      	addge	r3, r3, r0
 8006d76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d7a:	bfac      	ite	ge
 8006d7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d7e:	81a3      	strhlt	r3, [r4, #12]
 8006d80:	bd10      	pop	{r4, pc}

08006d82 <__swrite>:
 8006d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d86:	461f      	mov	r7, r3
 8006d88:	898b      	ldrh	r3, [r1, #12]
 8006d8a:	05db      	lsls	r3, r3, #23
 8006d8c:	4605      	mov	r5, r0
 8006d8e:	460c      	mov	r4, r1
 8006d90:	4616      	mov	r6, r2
 8006d92:	d505      	bpl.n	8006da0 <__swrite+0x1e>
 8006d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d98:	2302      	movs	r3, #2
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f000 f83c 	bl	8006e18 <_lseek_r>
 8006da0:	89a3      	ldrh	r3, [r4, #12]
 8006da2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006da6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006daa:	81a3      	strh	r3, [r4, #12]
 8006dac:	4632      	mov	r2, r6
 8006dae:	463b      	mov	r3, r7
 8006db0:	4628      	mov	r0, r5
 8006db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006db6:	f000 b853 	b.w	8006e60 <_write_r>

08006dba <__sseek>:
 8006dba:	b510      	push	{r4, lr}
 8006dbc:	460c      	mov	r4, r1
 8006dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dc2:	f000 f829 	bl	8006e18 <_lseek_r>
 8006dc6:	1c43      	adds	r3, r0, #1
 8006dc8:	89a3      	ldrh	r3, [r4, #12]
 8006dca:	bf15      	itete	ne
 8006dcc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006dce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006dd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006dd6:	81a3      	strheq	r3, [r4, #12]
 8006dd8:	bf18      	it	ne
 8006dda:	81a3      	strhne	r3, [r4, #12]
 8006ddc:	bd10      	pop	{r4, pc}

08006dde <__sclose>:
 8006dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de2:	f000 b809 	b.w	8006df8 <_close_r>

08006de6 <memset>:
 8006de6:	4402      	add	r2, r0
 8006de8:	4603      	mov	r3, r0
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d100      	bne.n	8006df0 <memset+0xa>
 8006dee:	4770      	bx	lr
 8006df0:	f803 1b01 	strb.w	r1, [r3], #1
 8006df4:	e7f9      	b.n	8006dea <memset+0x4>
	...

08006df8 <_close_r>:
 8006df8:	b538      	push	{r3, r4, r5, lr}
 8006dfa:	4d06      	ldr	r5, [pc, #24]	@ (8006e14 <_close_r+0x1c>)
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	4604      	mov	r4, r0
 8006e00:	4608      	mov	r0, r1
 8006e02:	602b      	str	r3, [r5, #0]
 8006e04:	f7fc f9d2 	bl	80031ac <_close>
 8006e08:	1c43      	adds	r3, r0, #1
 8006e0a:	d102      	bne.n	8006e12 <_close_r+0x1a>
 8006e0c:	682b      	ldr	r3, [r5, #0]
 8006e0e:	b103      	cbz	r3, 8006e12 <_close_r+0x1a>
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	bd38      	pop	{r3, r4, r5, pc}
 8006e14:	20000738 	.word	0x20000738

08006e18 <_lseek_r>:
 8006e18:	b538      	push	{r3, r4, r5, lr}
 8006e1a:	4d07      	ldr	r5, [pc, #28]	@ (8006e38 <_lseek_r+0x20>)
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	4608      	mov	r0, r1
 8006e20:	4611      	mov	r1, r2
 8006e22:	2200      	movs	r2, #0
 8006e24:	602a      	str	r2, [r5, #0]
 8006e26:	461a      	mov	r2, r3
 8006e28:	f7fc f9e7 	bl	80031fa <_lseek>
 8006e2c:	1c43      	adds	r3, r0, #1
 8006e2e:	d102      	bne.n	8006e36 <_lseek_r+0x1e>
 8006e30:	682b      	ldr	r3, [r5, #0]
 8006e32:	b103      	cbz	r3, 8006e36 <_lseek_r+0x1e>
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	bd38      	pop	{r3, r4, r5, pc}
 8006e38:	20000738 	.word	0x20000738

08006e3c <_read_r>:
 8006e3c:	b538      	push	{r3, r4, r5, lr}
 8006e3e:	4d07      	ldr	r5, [pc, #28]	@ (8006e5c <_read_r+0x20>)
 8006e40:	4604      	mov	r4, r0
 8006e42:	4608      	mov	r0, r1
 8006e44:	4611      	mov	r1, r2
 8006e46:	2200      	movs	r2, #0
 8006e48:	602a      	str	r2, [r5, #0]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	f7fc f975 	bl	800313a <_read>
 8006e50:	1c43      	adds	r3, r0, #1
 8006e52:	d102      	bne.n	8006e5a <_read_r+0x1e>
 8006e54:	682b      	ldr	r3, [r5, #0]
 8006e56:	b103      	cbz	r3, 8006e5a <_read_r+0x1e>
 8006e58:	6023      	str	r3, [r4, #0]
 8006e5a:	bd38      	pop	{r3, r4, r5, pc}
 8006e5c:	20000738 	.word	0x20000738

08006e60 <_write_r>:
 8006e60:	b538      	push	{r3, r4, r5, lr}
 8006e62:	4d07      	ldr	r5, [pc, #28]	@ (8006e80 <_write_r+0x20>)
 8006e64:	4604      	mov	r4, r0
 8006e66:	4608      	mov	r0, r1
 8006e68:	4611      	mov	r1, r2
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	602a      	str	r2, [r5, #0]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	f7fc f980 	bl	8003174 <_write>
 8006e74:	1c43      	adds	r3, r0, #1
 8006e76:	d102      	bne.n	8006e7e <_write_r+0x1e>
 8006e78:	682b      	ldr	r3, [r5, #0]
 8006e7a:	b103      	cbz	r3, 8006e7e <_write_r+0x1e>
 8006e7c:	6023      	str	r3, [r4, #0]
 8006e7e:	bd38      	pop	{r3, r4, r5, pc}
 8006e80:	20000738 	.word	0x20000738

08006e84 <__errno>:
 8006e84:	4b01      	ldr	r3, [pc, #4]	@ (8006e8c <__errno+0x8>)
 8006e86:	6818      	ldr	r0, [r3, #0]
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	20000030 	.word	0x20000030

08006e90 <__libc_init_array>:
 8006e90:	b570      	push	{r4, r5, r6, lr}
 8006e92:	4d0d      	ldr	r5, [pc, #52]	@ (8006ec8 <__libc_init_array+0x38>)
 8006e94:	4c0d      	ldr	r4, [pc, #52]	@ (8006ecc <__libc_init_array+0x3c>)
 8006e96:	1b64      	subs	r4, r4, r5
 8006e98:	10a4      	asrs	r4, r4, #2
 8006e9a:	2600      	movs	r6, #0
 8006e9c:	42a6      	cmp	r6, r4
 8006e9e:	d109      	bne.n	8006eb4 <__libc_init_array+0x24>
 8006ea0:	4d0b      	ldr	r5, [pc, #44]	@ (8006ed0 <__libc_init_array+0x40>)
 8006ea2:	4c0c      	ldr	r4, [pc, #48]	@ (8006ed4 <__libc_init_array+0x44>)
 8006ea4:	f000 fff0 	bl	8007e88 <_init>
 8006ea8:	1b64      	subs	r4, r4, r5
 8006eaa:	10a4      	asrs	r4, r4, #2
 8006eac:	2600      	movs	r6, #0
 8006eae:	42a6      	cmp	r6, r4
 8006eb0:	d105      	bne.n	8006ebe <__libc_init_array+0x2e>
 8006eb2:	bd70      	pop	{r4, r5, r6, pc}
 8006eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb8:	4798      	blx	r3
 8006eba:	3601      	adds	r6, #1
 8006ebc:	e7ee      	b.n	8006e9c <__libc_init_array+0xc>
 8006ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec2:	4798      	blx	r3
 8006ec4:	3601      	adds	r6, #1
 8006ec6:	e7f2      	b.n	8006eae <__libc_init_array+0x1e>
 8006ec8:	08007fe0 	.word	0x08007fe0
 8006ecc:	08007fe0 	.word	0x08007fe0
 8006ed0:	08007fe0 	.word	0x08007fe0
 8006ed4:	08007fe4 	.word	0x08007fe4

08006ed8 <__retarget_lock_init_recursive>:
 8006ed8:	4770      	bx	lr

08006eda <__retarget_lock_acquire_recursive>:
 8006eda:	4770      	bx	lr

08006edc <__retarget_lock_release_recursive>:
 8006edc:	4770      	bx	lr

08006ede <memcpy>:
 8006ede:	440a      	add	r2, r1
 8006ee0:	4291      	cmp	r1, r2
 8006ee2:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ee6:	d100      	bne.n	8006eea <memcpy+0xc>
 8006ee8:	4770      	bx	lr
 8006eea:	b510      	push	{r4, lr}
 8006eec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ef0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ef4:	4291      	cmp	r1, r2
 8006ef6:	d1f9      	bne.n	8006eec <memcpy+0xe>
 8006ef8:	bd10      	pop	{r4, pc}
	...

08006efc <__assert_func>:
 8006efc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006efe:	4614      	mov	r4, r2
 8006f00:	461a      	mov	r2, r3
 8006f02:	4b09      	ldr	r3, [pc, #36]	@ (8006f28 <__assert_func+0x2c>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4605      	mov	r5, r0
 8006f08:	68d8      	ldr	r0, [r3, #12]
 8006f0a:	b954      	cbnz	r4, 8006f22 <__assert_func+0x26>
 8006f0c:	4b07      	ldr	r3, [pc, #28]	@ (8006f2c <__assert_func+0x30>)
 8006f0e:	461c      	mov	r4, r3
 8006f10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f14:	9100      	str	r1, [sp, #0]
 8006f16:	462b      	mov	r3, r5
 8006f18:	4905      	ldr	r1, [pc, #20]	@ (8006f30 <__assert_func+0x34>)
 8006f1a:	f000 fc9f 	bl	800785c <fiprintf>
 8006f1e:	f000 fcd9 	bl	80078d4 <abort>
 8006f22:	4b04      	ldr	r3, [pc, #16]	@ (8006f34 <__assert_func+0x38>)
 8006f24:	e7f4      	b.n	8006f10 <__assert_func+0x14>
 8006f26:	bf00      	nop
 8006f28:	20000030 	.word	0x20000030
 8006f2c:	08007fa2 	.word	0x08007fa2
 8006f30:	08007f74 	.word	0x08007f74
 8006f34:	08007f67 	.word	0x08007f67

08006f38 <_free_r>:
 8006f38:	b538      	push	{r3, r4, r5, lr}
 8006f3a:	4605      	mov	r5, r0
 8006f3c:	2900      	cmp	r1, #0
 8006f3e:	d041      	beq.n	8006fc4 <_free_r+0x8c>
 8006f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f44:	1f0c      	subs	r4, r1, #4
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	bfb8      	it	lt
 8006f4a:	18e4      	addlt	r4, r4, r3
 8006f4c:	f000 f8e8 	bl	8007120 <__malloc_lock>
 8006f50:	4a1d      	ldr	r2, [pc, #116]	@ (8006fc8 <_free_r+0x90>)
 8006f52:	6813      	ldr	r3, [r2, #0]
 8006f54:	b933      	cbnz	r3, 8006f64 <_free_r+0x2c>
 8006f56:	6063      	str	r3, [r4, #4]
 8006f58:	6014      	str	r4, [r2, #0]
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f60:	f000 b8e4 	b.w	800712c <__malloc_unlock>
 8006f64:	42a3      	cmp	r3, r4
 8006f66:	d908      	bls.n	8006f7a <_free_r+0x42>
 8006f68:	6820      	ldr	r0, [r4, #0]
 8006f6a:	1821      	adds	r1, r4, r0
 8006f6c:	428b      	cmp	r3, r1
 8006f6e:	bf01      	itttt	eq
 8006f70:	6819      	ldreq	r1, [r3, #0]
 8006f72:	685b      	ldreq	r3, [r3, #4]
 8006f74:	1809      	addeq	r1, r1, r0
 8006f76:	6021      	streq	r1, [r4, #0]
 8006f78:	e7ed      	b.n	8006f56 <_free_r+0x1e>
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	b10b      	cbz	r3, 8006f84 <_free_r+0x4c>
 8006f80:	42a3      	cmp	r3, r4
 8006f82:	d9fa      	bls.n	8006f7a <_free_r+0x42>
 8006f84:	6811      	ldr	r1, [r2, #0]
 8006f86:	1850      	adds	r0, r2, r1
 8006f88:	42a0      	cmp	r0, r4
 8006f8a:	d10b      	bne.n	8006fa4 <_free_r+0x6c>
 8006f8c:	6820      	ldr	r0, [r4, #0]
 8006f8e:	4401      	add	r1, r0
 8006f90:	1850      	adds	r0, r2, r1
 8006f92:	4283      	cmp	r3, r0
 8006f94:	6011      	str	r1, [r2, #0]
 8006f96:	d1e0      	bne.n	8006f5a <_free_r+0x22>
 8006f98:	6818      	ldr	r0, [r3, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	6053      	str	r3, [r2, #4]
 8006f9e:	4408      	add	r0, r1
 8006fa0:	6010      	str	r0, [r2, #0]
 8006fa2:	e7da      	b.n	8006f5a <_free_r+0x22>
 8006fa4:	d902      	bls.n	8006fac <_free_r+0x74>
 8006fa6:	230c      	movs	r3, #12
 8006fa8:	602b      	str	r3, [r5, #0]
 8006faa:	e7d6      	b.n	8006f5a <_free_r+0x22>
 8006fac:	6820      	ldr	r0, [r4, #0]
 8006fae:	1821      	adds	r1, r4, r0
 8006fb0:	428b      	cmp	r3, r1
 8006fb2:	bf04      	itt	eq
 8006fb4:	6819      	ldreq	r1, [r3, #0]
 8006fb6:	685b      	ldreq	r3, [r3, #4]
 8006fb8:	6063      	str	r3, [r4, #4]
 8006fba:	bf04      	itt	eq
 8006fbc:	1809      	addeq	r1, r1, r0
 8006fbe:	6021      	streq	r1, [r4, #0]
 8006fc0:	6054      	str	r4, [r2, #4]
 8006fc2:	e7ca      	b.n	8006f5a <_free_r+0x22>
 8006fc4:	bd38      	pop	{r3, r4, r5, pc}
 8006fc6:	bf00      	nop
 8006fc8:	20000744 	.word	0x20000744

08006fcc <malloc>:
 8006fcc:	4b02      	ldr	r3, [pc, #8]	@ (8006fd8 <malloc+0xc>)
 8006fce:	4601      	mov	r1, r0
 8006fd0:	6818      	ldr	r0, [r3, #0]
 8006fd2:	f000 b825 	b.w	8007020 <_malloc_r>
 8006fd6:	bf00      	nop
 8006fd8:	20000030 	.word	0x20000030

08006fdc <sbrk_aligned>:
 8006fdc:	b570      	push	{r4, r5, r6, lr}
 8006fde:	4e0f      	ldr	r6, [pc, #60]	@ (800701c <sbrk_aligned+0x40>)
 8006fe0:	460c      	mov	r4, r1
 8006fe2:	6831      	ldr	r1, [r6, #0]
 8006fe4:	4605      	mov	r5, r0
 8006fe6:	b911      	cbnz	r1, 8006fee <sbrk_aligned+0x12>
 8006fe8:	f000 fc64 	bl	80078b4 <_sbrk_r>
 8006fec:	6030      	str	r0, [r6, #0]
 8006fee:	4621      	mov	r1, r4
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	f000 fc5f 	bl	80078b4 <_sbrk_r>
 8006ff6:	1c43      	adds	r3, r0, #1
 8006ff8:	d103      	bne.n	8007002 <sbrk_aligned+0x26>
 8006ffa:	f04f 34ff 	mov.w	r4, #4294967295
 8006ffe:	4620      	mov	r0, r4
 8007000:	bd70      	pop	{r4, r5, r6, pc}
 8007002:	1cc4      	adds	r4, r0, #3
 8007004:	f024 0403 	bic.w	r4, r4, #3
 8007008:	42a0      	cmp	r0, r4
 800700a:	d0f8      	beq.n	8006ffe <sbrk_aligned+0x22>
 800700c:	1a21      	subs	r1, r4, r0
 800700e:	4628      	mov	r0, r5
 8007010:	f000 fc50 	bl	80078b4 <_sbrk_r>
 8007014:	3001      	adds	r0, #1
 8007016:	d1f2      	bne.n	8006ffe <sbrk_aligned+0x22>
 8007018:	e7ef      	b.n	8006ffa <sbrk_aligned+0x1e>
 800701a:	bf00      	nop
 800701c:	20000740 	.word	0x20000740

08007020 <_malloc_r>:
 8007020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007024:	1ccd      	adds	r5, r1, #3
 8007026:	f025 0503 	bic.w	r5, r5, #3
 800702a:	3508      	adds	r5, #8
 800702c:	2d0c      	cmp	r5, #12
 800702e:	bf38      	it	cc
 8007030:	250c      	movcc	r5, #12
 8007032:	2d00      	cmp	r5, #0
 8007034:	4606      	mov	r6, r0
 8007036:	db01      	blt.n	800703c <_malloc_r+0x1c>
 8007038:	42a9      	cmp	r1, r5
 800703a:	d904      	bls.n	8007046 <_malloc_r+0x26>
 800703c:	230c      	movs	r3, #12
 800703e:	6033      	str	r3, [r6, #0]
 8007040:	2000      	movs	r0, #0
 8007042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007046:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800711c <_malloc_r+0xfc>
 800704a:	f000 f869 	bl	8007120 <__malloc_lock>
 800704e:	f8d8 3000 	ldr.w	r3, [r8]
 8007052:	461c      	mov	r4, r3
 8007054:	bb44      	cbnz	r4, 80070a8 <_malloc_r+0x88>
 8007056:	4629      	mov	r1, r5
 8007058:	4630      	mov	r0, r6
 800705a:	f7ff ffbf 	bl	8006fdc <sbrk_aligned>
 800705e:	1c43      	adds	r3, r0, #1
 8007060:	4604      	mov	r4, r0
 8007062:	d158      	bne.n	8007116 <_malloc_r+0xf6>
 8007064:	f8d8 4000 	ldr.w	r4, [r8]
 8007068:	4627      	mov	r7, r4
 800706a:	2f00      	cmp	r7, #0
 800706c:	d143      	bne.n	80070f6 <_malloc_r+0xd6>
 800706e:	2c00      	cmp	r4, #0
 8007070:	d04b      	beq.n	800710a <_malloc_r+0xea>
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	4639      	mov	r1, r7
 8007076:	4630      	mov	r0, r6
 8007078:	eb04 0903 	add.w	r9, r4, r3
 800707c:	f000 fc1a 	bl	80078b4 <_sbrk_r>
 8007080:	4581      	cmp	r9, r0
 8007082:	d142      	bne.n	800710a <_malloc_r+0xea>
 8007084:	6821      	ldr	r1, [r4, #0]
 8007086:	1a6d      	subs	r5, r5, r1
 8007088:	4629      	mov	r1, r5
 800708a:	4630      	mov	r0, r6
 800708c:	f7ff ffa6 	bl	8006fdc <sbrk_aligned>
 8007090:	3001      	adds	r0, #1
 8007092:	d03a      	beq.n	800710a <_malloc_r+0xea>
 8007094:	6823      	ldr	r3, [r4, #0]
 8007096:	442b      	add	r3, r5
 8007098:	6023      	str	r3, [r4, #0]
 800709a:	f8d8 3000 	ldr.w	r3, [r8]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	bb62      	cbnz	r2, 80070fc <_malloc_r+0xdc>
 80070a2:	f8c8 7000 	str.w	r7, [r8]
 80070a6:	e00f      	b.n	80070c8 <_malloc_r+0xa8>
 80070a8:	6822      	ldr	r2, [r4, #0]
 80070aa:	1b52      	subs	r2, r2, r5
 80070ac:	d420      	bmi.n	80070f0 <_malloc_r+0xd0>
 80070ae:	2a0b      	cmp	r2, #11
 80070b0:	d917      	bls.n	80070e2 <_malloc_r+0xc2>
 80070b2:	1961      	adds	r1, r4, r5
 80070b4:	42a3      	cmp	r3, r4
 80070b6:	6025      	str	r5, [r4, #0]
 80070b8:	bf18      	it	ne
 80070ba:	6059      	strne	r1, [r3, #4]
 80070bc:	6863      	ldr	r3, [r4, #4]
 80070be:	bf08      	it	eq
 80070c0:	f8c8 1000 	streq.w	r1, [r8]
 80070c4:	5162      	str	r2, [r4, r5]
 80070c6:	604b      	str	r3, [r1, #4]
 80070c8:	4630      	mov	r0, r6
 80070ca:	f000 f82f 	bl	800712c <__malloc_unlock>
 80070ce:	f104 000b 	add.w	r0, r4, #11
 80070d2:	1d23      	adds	r3, r4, #4
 80070d4:	f020 0007 	bic.w	r0, r0, #7
 80070d8:	1ac2      	subs	r2, r0, r3
 80070da:	bf1c      	itt	ne
 80070dc:	1a1b      	subne	r3, r3, r0
 80070de:	50a3      	strne	r3, [r4, r2]
 80070e0:	e7af      	b.n	8007042 <_malloc_r+0x22>
 80070e2:	6862      	ldr	r2, [r4, #4]
 80070e4:	42a3      	cmp	r3, r4
 80070e6:	bf0c      	ite	eq
 80070e8:	f8c8 2000 	streq.w	r2, [r8]
 80070ec:	605a      	strne	r2, [r3, #4]
 80070ee:	e7eb      	b.n	80070c8 <_malloc_r+0xa8>
 80070f0:	4623      	mov	r3, r4
 80070f2:	6864      	ldr	r4, [r4, #4]
 80070f4:	e7ae      	b.n	8007054 <_malloc_r+0x34>
 80070f6:	463c      	mov	r4, r7
 80070f8:	687f      	ldr	r7, [r7, #4]
 80070fa:	e7b6      	b.n	800706a <_malloc_r+0x4a>
 80070fc:	461a      	mov	r2, r3
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	42a3      	cmp	r3, r4
 8007102:	d1fb      	bne.n	80070fc <_malloc_r+0xdc>
 8007104:	2300      	movs	r3, #0
 8007106:	6053      	str	r3, [r2, #4]
 8007108:	e7de      	b.n	80070c8 <_malloc_r+0xa8>
 800710a:	230c      	movs	r3, #12
 800710c:	6033      	str	r3, [r6, #0]
 800710e:	4630      	mov	r0, r6
 8007110:	f000 f80c 	bl	800712c <__malloc_unlock>
 8007114:	e794      	b.n	8007040 <_malloc_r+0x20>
 8007116:	6005      	str	r5, [r0, #0]
 8007118:	e7d6      	b.n	80070c8 <_malloc_r+0xa8>
 800711a:	bf00      	nop
 800711c:	20000744 	.word	0x20000744

08007120 <__malloc_lock>:
 8007120:	4801      	ldr	r0, [pc, #4]	@ (8007128 <__malloc_lock+0x8>)
 8007122:	f7ff beda 	b.w	8006eda <__retarget_lock_acquire_recursive>
 8007126:	bf00      	nop
 8007128:	2000073c 	.word	0x2000073c

0800712c <__malloc_unlock>:
 800712c:	4801      	ldr	r0, [pc, #4]	@ (8007134 <__malloc_unlock+0x8>)
 800712e:	f7ff bed5 	b.w	8006edc <__retarget_lock_release_recursive>
 8007132:	bf00      	nop
 8007134:	2000073c 	.word	0x2000073c

08007138 <__ssputs_r>:
 8007138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800713c:	688e      	ldr	r6, [r1, #8]
 800713e:	461f      	mov	r7, r3
 8007140:	42be      	cmp	r6, r7
 8007142:	680b      	ldr	r3, [r1, #0]
 8007144:	4682      	mov	sl, r0
 8007146:	460c      	mov	r4, r1
 8007148:	4690      	mov	r8, r2
 800714a:	d82d      	bhi.n	80071a8 <__ssputs_r+0x70>
 800714c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007150:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007154:	d026      	beq.n	80071a4 <__ssputs_r+0x6c>
 8007156:	6965      	ldr	r5, [r4, #20]
 8007158:	6909      	ldr	r1, [r1, #16]
 800715a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800715e:	eba3 0901 	sub.w	r9, r3, r1
 8007162:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007166:	1c7b      	adds	r3, r7, #1
 8007168:	444b      	add	r3, r9
 800716a:	106d      	asrs	r5, r5, #1
 800716c:	429d      	cmp	r5, r3
 800716e:	bf38      	it	cc
 8007170:	461d      	movcc	r5, r3
 8007172:	0553      	lsls	r3, r2, #21
 8007174:	d527      	bpl.n	80071c6 <__ssputs_r+0x8e>
 8007176:	4629      	mov	r1, r5
 8007178:	f7ff ff52 	bl	8007020 <_malloc_r>
 800717c:	4606      	mov	r6, r0
 800717e:	b360      	cbz	r0, 80071da <__ssputs_r+0xa2>
 8007180:	6921      	ldr	r1, [r4, #16]
 8007182:	464a      	mov	r2, r9
 8007184:	f7ff feab 	bl	8006ede <memcpy>
 8007188:	89a3      	ldrh	r3, [r4, #12]
 800718a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800718e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007192:	81a3      	strh	r3, [r4, #12]
 8007194:	6126      	str	r6, [r4, #16]
 8007196:	6165      	str	r5, [r4, #20]
 8007198:	444e      	add	r6, r9
 800719a:	eba5 0509 	sub.w	r5, r5, r9
 800719e:	6026      	str	r6, [r4, #0]
 80071a0:	60a5      	str	r5, [r4, #8]
 80071a2:	463e      	mov	r6, r7
 80071a4:	42be      	cmp	r6, r7
 80071a6:	d900      	bls.n	80071aa <__ssputs_r+0x72>
 80071a8:	463e      	mov	r6, r7
 80071aa:	6820      	ldr	r0, [r4, #0]
 80071ac:	4632      	mov	r2, r6
 80071ae:	4641      	mov	r1, r8
 80071b0:	f000 fb66 	bl	8007880 <memmove>
 80071b4:	68a3      	ldr	r3, [r4, #8]
 80071b6:	1b9b      	subs	r3, r3, r6
 80071b8:	60a3      	str	r3, [r4, #8]
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	4433      	add	r3, r6
 80071be:	6023      	str	r3, [r4, #0]
 80071c0:	2000      	movs	r0, #0
 80071c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071c6:	462a      	mov	r2, r5
 80071c8:	f000 fb8b 	bl	80078e2 <_realloc_r>
 80071cc:	4606      	mov	r6, r0
 80071ce:	2800      	cmp	r0, #0
 80071d0:	d1e0      	bne.n	8007194 <__ssputs_r+0x5c>
 80071d2:	6921      	ldr	r1, [r4, #16]
 80071d4:	4650      	mov	r0, sl
 80071d6:	f7ff feaf 	bl	8006f38 <_free_r>
 80071da:	230c      	movs	r3, #12
 80071dc:	f8ca 3000 	str.w	r3, [sl]
 80071e0:	89a3      	ldrh	r3, [r4, #12]
 80071e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071e6:	81a3      	strh	r3, [r4, #12]
 80071e8:	f04f 30ff 	mov.w	r0, #4294967295
 80071ec:	e7e9      	b.n	80071c2 <__ssputs_r+0x8a>
	...

080071f0 <_svfiprintf_r>:
 80071f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f4:	4698      	mov	r8, r3
 80071f6:	898b      	ldrh	r3, [r1, #12]
 80071f8:	061b      	lsls	r3, r3, #24
 80071fa:	b09d      	sub	sp, #116	@ 0x74
 80071fc:	4607      	mov	r7, r0
 80071fe:	460d      	mov	r5, r1
 8007200:	4614      	mov	r4, r2
 8007202:	d510      	bpl.n	8007226 <_svfiprintf_r+0x36>
 8007204:	690b      	ldr	r3, [r1, #16]
 8007206:	b973      	cbnz	r3, 8007226 <_svfiprintf_r+0x36>
 8007208:	2140      	movs	r1, #64	@ 0x40
 800720a:	f7ff ff09 	bl	8007020 <_malloc_r>
 800720e:	6028      	str	r0, [r5, #0]
 8007210:	6128      	str	r0, [r5, #16]
 8007212:	b930      	cbnz	r0, 8007222 <_svfiprintf_r+0x32>
 8007214:	230c      	movs	r3, #12
 8007216:	603b      	str	r3, [r7, #0]
 8007218:	f04f 30ff 	mov.w	r0, #4294967295
 800721c:	b01d      	add	sp, #116	@ 0x74
 800721e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007222:	2340      	movs	r3, #64	@ 0x40
 8007224:	616b      	str	r3, [r5, #20]
 8007226:	2300      	movs	r3, #0
 8007228:	9309      	str	r3, [sp, #36]	@ 0x24
 800722a:	2320      	movs	r3, #32
 800722c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007230:	f8cd 800c 	str.w	r8, [sp, #12]
 8007234:	2330      	movs	r3, #48	@ 0x30
 8007236:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80073d4 <_svfiprintf_r+0x1e4>
 800723a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800723e:	f04f 0901 	mov.w	r9, #1
 8007242:	4623      	mov	r3, r4
 8007244:	469a      	mov	sl, r3
 8007246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800724a:	b10a      	cbz	r2, 8007250 <_svfiprintf_r+0x60>
 800724c:	2a25      	cmp	r2, #37	@ 0x25
 800724e:	d1f9      	bne.n	8007244 <_svfiprintf_r+0x54>
 8007250:	ebba 0b04 	subs.w	fp, sl, r4
 8007254:	d00b      	beq.n	800726e <_svfiprintf_r+0x7e>
 8007256:	465b      	mov	r3, fp
 8007258:	4622      	mov	r2, r4
 800725a:	4629      	mov	r1, r5
 800725c:	4638      	mov	r0, r7
 800725e:	f7ff ff6b 	bl	8007138 <__ssputs_r>
 8007262:	3001      	adds	r0, #1
 8007264:	f000 80a7 	beq.w	80073b6 <_svfiprintf_r+0x1c6>
 8007268:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800726a:	445a      	add	r2, fp
 800726c:	9209      	str	r2, [sp, #36]	@ 0x24
 800726e:	f89a 3000 	ldrb.w	r3, [sl]
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 809f 	beq.w	80073b6 <_svfiprintf_r+0x1c6>
 8007278:	2300      	movs	r3, #0
 800727a:	f04f 32ff 	mov.w	r2, #4294967295
 800727e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007282:	f10a 0a01 	add.w	sl, sl, #1
 8007286:	9304      	str	r3, [sp, #16]
 8007288:	9307      	str	r3, [sp, #28]
 800728a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800728e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007290:	4654      	mov	r4, sl
 8007292:	2205      	movs	r2, #5
 8007294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007298:	484e      	ldr	r0, [pc, #312]	@ (80073d4 <_svfiprintf_r+0x1e4>)
 800729a:	f7f8 ffa9 	bl	80001f0 <memchr>
 800729e:	9a04      	ldr	r2, [sp, #16]
 80072a0:	b9d8      	cbnz	r0, 80072da <_svfiprintf_r+0xea>
 80072a2:	06d0      	lsls	r0, r2, #27
 80072a4:	bf44      	itt	mi
 80072a6:	2320      	movmi	r3, #32
 80072a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072ac:	0711      	lsls	r1, r2, #28
 80072ae:	bf44      	itt	mi
 80072b0:	232b      	movmi	r3, #43	@ 0x2b
 80072b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072b6:	f89a 3000 	ldrb.w	r3, [sl]
 80072ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80072bc:	d015      	beq.n	80072ea <_svfiprintf_r+0xfa>
 80072be:	9a07      	ldr	r2, [sp, #28]
 80072c0:	4654      	mov	r4, sl
 80072c2:	2000      	movs	r0, #0
 80072c4:	f04f 0c0a 	mov.w	ip, #10
 80072c8:	4621      	mov	r1, r4
 80072ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072ce:	3b30      	subs	r3, #48	@ 0x30
 80072d0:	2b09      	cmp	r3, #9
 80072d2:	d94b      	bls.n	800736c <_svfiprintf_r+0x17c>
 80072d4:	b1b0      	cbz	r0, 8007304 <_svfiprintf_r+0x114>
 80072d6:	9207      	str	r2, [sp, #28]
 80072d8:	e014      	b.n	8007304 <_svfiprintf_r+0x114>
 80072da:	eba0 0308 	sub.w	r3, r0, r8
 80072de:	fa09 f303 	lsl.w	r3, r9, r3
 80072e2:	4313      	orrs	r3, r2
 80072e4:	9304      	str	r3, [sp, #16]
 80072e6:	46a2      	mov	sl, r4
 80072e8:	e7d2      	b.n	8007290 <_svfiprintf_r+0xa0>
 80072ea:	9b03      	ldr	r3, [sp, #12]
 80072ec:	1d19      	adds	r1, r3, #4
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	9103      	str	r1, [sp, #12]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	bfbb      	ittet	lt
 80072f6:	425b      	neglt	r3, r3
 80072f8:	f042 0202 	orrlt.w	r2, r2, #2
 80072fc:	9307      	strge	r3, [sp, #28]
 80072fe:	9307      	strlt	r3, [sp, #28]
 8007300:	bfb8      	it	lt
 8007302:	9204      	strlt	r2, [sp, #16]
 8007304:	7823      	ldrb	r3, [r4, #0]
 8007306:	2b2e      	cmp	r3, #46	@ 0x2e
 8007308:	d10a      	bne.n	8007320 <_svfiprintf_r+0x130>
 800730a:	7863      	ldrb	r3, [r4, #1]
 800730c:	2b2a      	cmp	r3, #42	@ 0x2a
 800730e:	d132      	bne.n	8007376 <_svfiprintf_r+0x186>
 8007310:	9b03      	ldr	r3, [sp, #12]
 8007312:	1d1a      	adds	r2, r3, #4
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	9203      	str	r2, [sp, #12]
 8007318:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800731c:	3402      	adds	r4, #2
 800731e:	9305      	str	r3, [sp, #20]
 8007320:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80073e4 <_svfiprintf_r+0x1f4>
 8007324:	7821      	ldrb	r1, [r4, #0]
 8007326:	2203      	movs	r2, #3
 8007328:	4650      	mov	r0, sl
 800732a:	f7f8 ff61 	bl	80001f0 <memchr>
 800732e:	b138      	cbz	r0, 8007340 <_svfiprintf_r+0x150>
 8007330:	9b04      	ldr	r3, [sp, #16]
 8007332:	eba0 000a 	sub.w	r0, r0, sl
 8007336:	2240      	movs	r2, #64	@ 0x40
 8007338:	4082      	lsls	r2, r0
 800733a:	4313      	orrs	r3, r2
 800733c:	3401      	adds	r4, #1
 800733e:	9304      	str	r3, [sp, #16]
 8007340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007344:	4824      	ldr	r0, [pc, #144]	@ (80073d8 <_svfiprintf_r+0x1e8>)
 8007346:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800734a:	2206      	movs	r2, #6
 800734c:	f7f8 ff50 	bl	80001f0 <memchr>
 8007350:	2800      	cmp	r0, #0
 8007352:	d036      	beq.n	80073c2 <_svfiprintf_r+0x1d2>
 8007354:	4b21      	ldr	r3, [pc, #132]	@ (80073dc <_svfiprintf_r+0x1ec>)
 8007356:	bb1b      	cbnz	r3, 80073a0 <_svfiprintf_r+0x1b0>
 8007358:	9b03      	ldr	r3, [sp, #12]
 800735a:	3307      	adds	r3, #7
 800735c:	f023 0307 	bic.w	r3, r3, #7
 8007360:	3308      	adds	r3, #8
 8007362:	9303      	str	r3, [sp, #12]
 8007364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007366:	4433      	add	r3, r6
 8007368:	9309      	str	r3, [sp, #36]	@ 0x24
 800736a:	e76a      	b.n	8007242 <_svfiprintf_r+0x52>
 800736c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007370:	460c      	mov	r4, r1
 8007372:	2001      	movs	r0, #1
 8007374:	e7a8      	b.n	80072c8 <_svfiprintf_r+0xd8>
 8007376:	2300      	movs	r3, #0
 8007378:	3401      	adds	r4, #1
 800737a:	9305      	str	r3, [sp, #20]
 800737c:	4619      	mov	r1, r3
 800737e:	f04f 0c0a 	mov.w	ip, #10
 8007382:	4620      	mov	r0, r4
 8007384:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007388:	3a30      	subs	r2, #48	@ 0x30
 800738a:	2a09      	cmp	r2, #9
 800738c:	d903      	bls.n	8007396 <_svfiprintf_r+0x1a6>
 800738e:	2b00      	cmp	r3, #0
 8007390:	d0c6      	beq.n	8007320 <_svfiprintf_r+0x130>
 8007392:	9105      	str	r1, [sp, #20]
 8007394:	e7c4      	b.n	8007320 <_svfiprintf_r+0x130>
 8007396:	fb0c 2101 	mla	r1, ip, r1, r2
 800739a:	4604      	mov	r4, r0
 800739c:	2301      	movs	r3, #1
 800739e:	e7f0      	b.n	8007382 <_svfiprintf_r+0x192>
 80073a0:	ab03      	add	r3, sp, #12
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	462a      	mov	r2, r5
 80073a6:	4b0e      	ldr	r3, [pc, #56]	@ (80073e0 <_svfiprintf_r+0x1f0>)
 80073a8:	a904      	add	r1, sp, #16
 80073aa:	4638      	mov	r0, r7
 80073ac:	f3af 8000 	nop.w
 80073b0:	1c42      	adds	r2, r0, #1
 80073b2:	4606      	mov	r6, r0
 80073b4:	d1d6      	bne.n	8007364 <_svfiprintf_r+0x174>
 80073b6:	89ab      	ldrh	r3, [r5, #12]
 80073b8:	065b      	lsls	r3, r3, #25
 80073ba:	f53f af2d 	bmi.w	8007218 <_svfiprintf_r+0x28>
 80073be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073c0:	e72c      	b.n	800721c <_svfiprintf_r+0x2c>
 80073c2:	ab03      	add	r3, sp, #12
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	462a      	mov	r2, r5
 80073c8:	4b05      	ldr	r3, [pc, #20]	@ (80073e0 <_svfiprintf_r+0x1f0>)
 80073ca:	a904      	add	r1, sp, #16
 80073cc:	4638      	mov	r0, r7
 80073ce:	f000 f879 	bl	80074c4 <_printf_i>
 80073d2:	e7ed      	b.n	80073b0 <_svfiprintf_r+0x1c0>
 80073d4:	08007fa3 	.word	0x08007fa3
 80073d8:	08007fad 	.word	0x08007fad
 80073dc:	00000000 	.word	0x00000000
 80073e0:	08007139 	.word	0x08007139
 80073e4:	08007fa9 	.word	0x08007fa9

080073e8 <_printf_common>:
 80073e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073ec:	4616      	mov	r6, r2
 80073ee:	4698      	mov	r8, r3
 80073f0:	688a      	ldr	r2, [r1, #8]
 80073f2:	690b      	ldr	r3, [r1, #16]
 80073f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80073f8:	4293      	cmp	r3, r2
 80073fa:	bfb8      	it	lt
 80073fc:	4613      	movlt	r3, r2
 80073fe:	6033      	str	r3, [r6, #0]
 8007400:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007404:	4607      	mov	r7, r0
 8007406:	460c      	mov	r4, r1
 8007408:	b10a      	cbz	r2, 800740e <_printf_common+0x26>
 800740a:	3301      	adds	r3, #1
 800740c:	6033      	str	r3, [r6, #0]
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	0699      	lsls	r1, r3, #26
 8007412:	bf42      	ittt	mi
 8007414:	6833      	ldrmi	r3, [r6, #0]
 8007416:	3302      	addmi	r3, #2
 8007418:	6033      	strmi	r3, [r6, #0]
 800741a:	6825      	ldr	r5, [r4, #0]
 800741c:	f015 0506 	ands.w	r5, r5, #6
 8007420:	d106      	bne.n	8007430 <_printf_common+0x48>
 8007422:	f104 0a19 	add.w	sl, r4, #25
 8007426:	68e3      	ldr	r3, [r4, #12]
 8007428:	6832      	ldr	r2, [r6, #0]
 800742a:	1a9b      	subs	r3, r3, r2
 800742c:	42ab      	cmp	r3, r5
 800742e:	dc26      	bgt.n	800747e <_printf_common+0x96>
 8007430:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007434:	6822      	ldr	r2, [r4, #0]
 8007436:	3b00      	subs	r3, #0
 8007438:	bf18      	it	ne
 800743a:	2301      	movne	r3, #1
 800743c:	0692      	lsls	r2, r2, #26
 800743e:	d42b      	bmi.n	8007498 <_printf_common+0xb0>
 8007440:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007444:	4641      	mov	r1, r8
 8007446:	4638      	mov	r0, r7
 8007448:	47c8      	blx	r9
 800744a:	3001      	adds	r0, #1
 800744c:	d01e      	beq.n	800748c <_printf_common+0xa4>
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	6922      	ldr	r2, [r4, #16]
 8007452:	f003 0306 	and.w	r3, r3, #6
 8007456:	2b04      	cmp	r3, #4
 8007458:	bf02      	ittt	eq
 800745a:	68e5      	ldreq	r5, [r4, #12]
 800745c:	6833      	ldreq	r3, [r6, #0]
 800745e:	1aed      	subeq	r5, r5, r3
 8007460:	68a3      	ldr	r3, [r4, #8]
 8007462:	bf0c      	ite	eq
 8007464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007468:	2500      	movne	r5, #0
 800746a:	4293      	cmp	r3, r2
 800746c:	bfc4      	itt	gt
 800746e:	1a9b      	subgt	r3, r3, r2
 8007470:	18ed      	addgt	r5, r5, r3
 8007472:	2600      	movs	r6, #0
 8007474:	341a      	adds	r4, #26
 8007476:	42b5      	cmp	r5, r6
 8007478:	d11a      	bne.n	80074b0 <_printf_common+0xc8>
 800747a:	2000      	movs	r0, #0
 800747c:	e008      	b.n	8007490 <_printf_common+0xa8>
 800747e:	2301      	movs	r3, #1
 8007480:	4652      	mov	r2, sl
 8007482:	4641      	mov	r1, r8
 8007484:	4638      	mov	r0, r7
 8007486:	47c8      	blx	r9
 8007488:	3001      	adds	r0, #1
 800748a:	d103      	bne.n	8007494 <_printf_common+0xac>
 800748c:	f04f 30ff 	mov.w	r0, #4294967295
 8007490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007494:	3501      	adds	r5, #1
 8007496:	e7c6      	b.n	8007426 <_printf_common+0x3e>
 8007498:	18e1      	adds	r1, r4, r3
 800749a:	1c5a      	adds	r2, r3, #1
 800749c:	2030      	movs	r0, #48	@ 0x30
 800749e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80074a2:	4422      	add	r2, r4
 80074a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80074a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80074ac:	3302      	adds	r3, #2
 80074ae:	e7c7      	b.n	8007440 <_printf_common+0x58>
 80074b0:	2301      	movs	r3, #1
 80074b2:	4622      	mov	r2, r4
 80074b4:	4641      	mov	r1, r8
 80074b6:	4638      	mov	r0, r7
 80074b8:	47c8      	blx	r9
 80074ba:	3001      	adds	r0, #1
 80074bc:	d0e6      	beq.n	800748c <_printf_common+0xa4>
 80074be:	3601      	adds	r6, #1
 80074c0:	e7d9      	b.n	8007476 <_printf_common+0x8e>
	...

080074c4 <_printf_i>:
 80074c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074c8:	7e0f      	ldrb	r7, [r1, #24]
 80074ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80074cc:	2f78      	cmp	r7, #120	@ 0x78
 80074ce:	4691      	mov	r9, r2
 80074d0:	4680      	mov	r8, r0
 80074d2:	460c      	mov	r4, r1
 80074d4:	469a      	mov	sl, r3
 80074d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80074da:	d807      	bhi.n	80074ec <_printf_i+0x28>
 80074dc:	2f62      	cmp	r7, #98	@ 0x62
 80074de:	d80a      	bhi.n	80074f6 <_printf_i+0x32>
 80074e0:	2f00      	cmp	r7, #0
 80074e2:	f000 80d2 	beq.w	800768a <_printf_i+0x1c6>
 80074e6:	2f58      	cmp	r7, #88	@ 0x58
 80074e8:	f000 80b9 	beq.w	800765e <_printf_i+0x19a>
 80074ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80074f4:	e03a      	b.n	800756c <_printf_i+0xa8>
 80074f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80074fa:	2b15      	cmp	r3, #21
 80074fc:	d8f6      	bhi.n	80074ec <_printf_i+0x28>
 80074fe:	a101      	add	r1, pc, #4	@ (adr r1, 8007504 <_printf_i+0x40>)
 8007500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007504:	0800755d 	.word	0x0800755d
 8007508:	08007571 	.word	0x08007571
 800750c:	080074ed 	.word	0x080074ed
 8007510:	080074ed 	.word	0x080074ed
 8007514:	080074ed 	.word	0x080074ed
 8007518:	080074ed 	.word	0x080074ed
 800751c:	08007571 	.word	0x08007571
 8007520:	080074ed 	.word	0x080074ed
 8007524:	080074ed 	.word	0x080074ed
 8007528:	080074ed 	.word	0x080074ed
 800752c:	080074ed 	.word	0x080074ed
 8007530:	08007671 	.word	0x08007671
 8007534:	0800759b 	.word	0x0800759b
 8007538:	0800762b 	.word	0x0800762b
 800753c:	080074ed 	.word	0x080074ed
 8007540:	080074ed 	.word	0x080074ed
 8007544:	08007693 	.word	0x08007693
 8007548:	080074ed 	.word	0x080074ed
 800754c:	0800759b 	.word	0x0800759b
 8007550:	080074ed 	.word	0x080074ed
 8007554:	080074ed 	.word	0x080074ed
 8007558:	08007633 	.word	0x08007633
 800755c:	6833      	ldr	r3, [r6, #0]
 800755e:	1d1a      	adds	r2, r3, #4
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6032      	str	r2, [r6, #0]
 8007564:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007568:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800756c:	2301      	movs	r3, #1
 800756e:	e09d      	b.n	80076ac <_printf_i+0x1e8>
 8007570:	6833      	ldr	r3, [r6, #0]
 8007572:	6820      	ldr	r0, [r4, #0]
 8007574:	1d19      	adds	r1, r3, #4
 8007576:	6031      	str	r1, [r6, #0]
 8007578:	0606      	lsls	r6, r0, #24
 800757a:	d501      	bpl.n	8007580 <_printf_i+0xbc>
 800757c:	681d      	ldr	r5, [r3, #0]
 800757e:	e003      	b.n	8007588 <_printf_i+0xc4>
 8007580:	0645      	lsls	r5, r0, #25
 8007582:	d5fb      	bpl.n	800757c <_printf_i+0xb8>
 8007584:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007588:	2d00      	cmp	r5, #0
 800758a:	da03      	bge.n	8007594 <_printf_i+0xd0>
 800758c:	232d      	movs	r3, #45	@ 0x2d
 800758e:	426d      	negs	r5, r5
 8007590:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007594:	4859      	ldr	r0, [pc, #356]	@ (80076fc <_printf_i+0x238>)
 8007596:	230a      	movs	r3, #10
 8007598:	e011      	b.n	80075be <_printf_i+0xfa>
 800759a:	6821      	ldr	r1, [r4, #0]
 800759c:	6833      	ldr	r3, [r6, #0]
 800759e:	0608      	lsls	r0, r1, #24
 80075a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80075a4:	d402      	bmi.n	80075ac <_printf_i+0xe8>
 80075a6:	0649      	lsls	r1, r1, #25
 80075a8:	bf48      	it	mi
 80075aa:	b2ad      	uxthmi	r5, r5
 80075ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80075ae:	4853      	ldr	r0, [pc, #332]	@ (80076fc <_printf_i+0x238>)
 80075b0:	6033      	str	r3, [r6, #0]
 80075b2:	bf14      	ite	ne
 80075b4:	230a      	movne	r3, #10
 80075b6:	2308      	moveq	r3, #8
 80075b8:	2100      	movs	r1, #0
 80075ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80075be:	6866      	ldr	r6, [r4, #4]
 80075c0:	60a6      	str	r6, [r4, #8]
 80075c2:	2e00      	cmp	r6, #0
 80075c4:	bfa2      	ittt	ge
 80075c6:	6821      	ldrge	r1, [r4, #0]
 80075c8:	f021 0104 	bicge.w	r1, r1, #4
 80075cc:	6021      	strge	r1, [r4, #0]
 80075ce:	b90d      	cbnz	r5, 80075d4 <_printf_i+0x110>
 80075d0:	2e00      	cmp	r6, #0
 80075d2:	d04b      	beq.n	800766c <_printf_i+0x1a8>
 80075d4:	4616      	mov	r6, r2
 80075d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80075da:	fb03 5711 	mls	r7, r3, r1, r5
 80075de:	5dc7      	ldrb	r7, [r0, r7]
 80075e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075e4:	462f      	mov	r7, r5
 80075e6:	42bb      	cmp	r3, r7
 80075e8:	460d      	mov	r5, r1
 80075ea:	d9f4      	bls.n	80075d6 <_printf_i+0x112>
 80075ec:	2b08      	cmp	r3, #8
 80075ee:	d10b      	bne.n	8007608 <_printf_i+0x144>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	07df      	lsls	r7, r3, #31
 80075f4:	d508      	bpl.n	8007608 <_printf_i+0x144>
 80075f6:	6923      	ldr	r3, [r4, #16]
 80075f8:	6861      	ldr	r1, [r4, #4]
 80075fa:	4299      	cmp	r1, r3
 80075fc:	bfde      	ittt	le
 80075fe:	2330      	movle	r3, #48	@ 0x30
 8007600:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007604:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007608:	1b92      	subs	r2, r2, r6
 800760a:	6122      	str	r2, [r4, #16]
 800760c:	f8cd a000 	str.w	sl, [sp]
 8007610:	464b      	mov	r3, r9
 8007612:	aa03      	add	r2, sp, #12
 8007614:	4621      	mov	r1, r4
 8007616:	4640      	mov	r0, r8
 8007618:	f7ff fee6 	bl	80073e8 <_printf_common>
 800761c:	3001      	adds	r0, #1
 800761e:	d14a      	bne.n	80076b6 <_printf_i+0x1f2>
 8007620:	f04f 30ff 	mov.w	r0, #4294967295
 8007624:	b004      	add	sp, #16
 8007626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	f043 0320 	orr.w	r3, r3, #32
 8007630:	6023      	str	r3, [r4, #0]
 8007632:	4833      	ldr	r0, [pc, #204]	@ (8007700 <_printf_i+0x23c>)
 8007634:	2778      	movs	r7, #120	@ 0x78
 8007636:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	6831      	ldr	r1, [r6, #0]
 800763e:	061f      	lsls	r7, r3, #24
 8007640:	f851 5b04 	ldr.w	r5, [r1], #4
 8007644:	d402      	bmi.n	800764c <_printf_i+0x188>
 8007646:	065f      	lsls	r7, r3, #25
 8007648:	bf48      	it	mi
 800764a:	b2ad      	uxthmi	r5, r5
 800764c:	6031      	str	r1, [r6, #0]
 800764e:	07d9      	lsls	r1, r3, #31
 8007650:	bf44      	itt	mi
 8007652:	f043 0320 	orrmi.w	r3, r3, #32
 8007656:	6023      	strmi	r3, [r4, #0]
 8007658:	b11d      	cbz	r5, 8007662 <_printf_i+0x19e>
 800765a:	2310      	movs	r3, #16
 800765c:	e7ac      	b.n	80075b8 <_printf_i+0xf4>
 800765e:	4827      	ldr	r0, [pc, #156]	@ (80076fc <_printf_i+0x238>)
 8007660:	e7e9      	b.n	8007636 <_printf_i+0x172>
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	f023 0320 	bic.w	r3, r3, #32
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	e7f6      	b.n	800765a <_printf_i+0x196>
 800766c:	4616      	mov	r6, r2
 800766e:	e7bd      	b.n	80075ec <_printf_i+0x128>
 8007670:	6833      	ldr	r3, [r6, #0]
 8007672:	6825      	ldr	r5, [r4, #0]
 8007674:	6961      	ldr	r1, [r4, #20]
 8007676:	1d18      	adds	r0, r3, #4
 8007678:	6030      	str	r0, [r6, #0]
 800767a:	062e      	lsls	r6, r5, #24
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	d501      	bpl.n	8007684 <_printf_i+0x1c0>
 8007680:	6019      	str	r1, [r3, #0]
 8007682:	e002      	b.n	800768a <_printf_i+0x1c6>
 8007684:	0668      	lsls	r0, r5, #25
 8007686:	d5fb      	bpl.n	8007680 <_printf_i+0x1bc>
 8007688:	8019      	strh	r1, [r3, #0]
 800768a:	2300      	movs	r3, #0
 800768c:	6123      	str	r3, [r4, #16]
 800768e:	4616      	mov	r6, r2
 8007690:	e7bc      	b.n	800760c <_printf_i+0x148>
 8007692:	6833      	ldr	r3, [r6, #0]
 8007694:	1d1a      	adds	r2, r3, #4
 8007696:	6032      	str	r2, [r6, #0]
 8007698:	681e      	ldr	r6, [r3, #0]
 800769a:	6862      	ldr	r2, [r4, #4]
 800769c:	2100      	movs	r1, #0
 800769e:	4630      	mov	r0, r6
 80076a0:	f7f8 fda6 	bl	80001f0 <memchr>
 80076a4:	b108      	cbz	r0, 80076aa <_printf_i+0x1e6>
 80076a6:	1b80      	subs	r0, r0, r6
 80076a8:	6060      	str	r0, [r4, #4]
 80076aa:	6863      	ldr	r3, [r4, #4]
 80076ac:	6123      	str	r3, [r4, #16]
 80076ae:	2300      	movs	r3, #0
 80076b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076b4:	e7aa      	b.n	800760c <_printf_i+0x148>
 80076b6:	6923      	ldr	r3, [r4, #16]
 80076b8:	4632      	mov	r2, r6
 80076ba:	4649      	mov	r1, r9
 80076bc:	4640      	mov	r0, r8
 80076be:	47d0      	blx	sl
 80076c0:	3001      	adds	r0, #1
 80076c2:	d0ad      	beq.n	8007620 <_printf_i+0x15c>
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	079b      	lsls	r3, r3, #30
 80076c8:	d413      	bmi.n	80076f2 <_printf_i+0x22e>
 80076ca:	68e0      	ldr	r0, [r4, #12]
 80076cc:	9b03      	ldr	r3, [sp, #12]
 80076ce:	4298      	cmp	r0, r3
 80076d0:	bfb8      	it	lt
 80076d2:	4618      	movlt	r0, r3
 80076d4:	e7a6      	b.n	8007624 <_printf_i+0x160>
 80076d6:	2301      	movs	r3, #1
 80076d8:	4632      	mov	r2, r6
 80076da:	4649      	mov	r1, r9
 80076dc:	4640      	mov	r0, r8
 80076de:	47d0      	blx	sl
 80076e0:	3001      	adds	r0, #1
 80076e2:	d09d      	beq.n	8007620 <_printf_i+0x15c>
 80076e4:	3501      	adds	r5, #1
 80076e6:	68e3      	ldr	r3, [r4, #12]
 80076e8:	9903      	ldr	r1, [sp, #12]
 80076ea:	1a5b      	subs	r3, r3, r1
 80076ec:	42ab      	cmp	r3, r5
 80076ee:	dcf2      	bgt.n	80076d6 <_printf_i+0x212>
 80076f0:	e7eb      	b.n	80076ca <_printf_i+0x206>
 80076f2:	2500      	movs	r5, #0
 80076f4:	f104 0619 	add.w	r6, r4, #25
 80076f8:	e7f5      	b.n	80076e6 <_printf_i+0x222>
 80076fa:	bf00      	nop
 80076fc:	08007fb4 	.word	0x08007fb4
 8007700:	08007fc5 	.word	0x08007fc5

08007704 <__sflush_r>:
 8007704:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800770c:	0716      	lsls	r6, r2, #28
 800770e:	4605      	mov	r5, r0
 8007710:	460c      	mov	r4, r1
 8007712:	d454      	bmi.n	80077be <__sflush_r+0xba>
 8007714:	684b      	ldr	r3, [r1, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	dc02      	bgt.n	8007720 <__sflush_r+0x1c>
 800771a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800771c:	2b00      	cmp	r3, #0
 800771e:	dd48      	ble.n	80077b2 <__sflush_r+0xae>
 8007720:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007722:	2e00      	cmp	r6, #0
 8007724:	d045      	beq.n	80077b2 <__sflush_r+0xae>
 8007726:	2300      	movs	r3, #0
 8007728:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800772c:	682f      	ldr	r7, [r5, #0]
 800772e:	6a21      	ldr	r1, [r4, #32]
 8007730:	602b      	str	r3, [r5, #0]
 8007732:	d030      	beq.n	8007796 <__sflush_r+0x92>
 8007734:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007736:	89a3      	ldrh	r3, [r4, #12]
 8007738:	0759      	lsls	r1, r3, #29
 800773a:	d505      	bpl.n	8007748 <__sflush_r+0x44>
 800773c:	6863      	ldr	r3, [r4, #4]
 800773e:	1ad2      	subs	r2, r2, r3
 8007740:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007742:	b10b      	cbz	r3, 8007748 <__sflush_r+0x44>
 8007744:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007746:	1ad2      	subs	r2, r2, r3
 8007748:	2300      	movs	r3, #0
 800774a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800774c:	6a21      	ldr	r1, [r4, #32]
 800774e:	4628      	mov	r0, r5
 8007750:	47b0      	blx	r6
 8007752:	1c43      	adds	r3, r0, #1
 8007754:	89a3      	ldrh	r3, [r4, #12]
 8007756:	d106      	bne.n	8007766 <__sflush_r+0x62>
 8007758:	6829      	ldr	r1, [r5, #0]
 800775a:	291d      	cmp	r1, #29
 800775c:	d82b      	bhi.n	80077b6 <__sflush_r+0xb2>
 800775e:	4a2a      	ldr	r2, [pc, #168]	@ (8007808 <__sflush_r+0x104>)
 8007760:	410a      	asrs	r2, r1
 8007762:	07d6      	lsls	r6, r2, #31
 8007764:	d427      	bmi.n	80077b6 <__sflush_r+0xb2>
 8007766:	2200      	movs	r2, #0
 8007768:	6062      	str	r2, [r4, #4]
 800776a:	04d9      	lsls	r1, r3, #19
 800776c:	6922      	ldr	r2, [r4, #16]
 800776e:	6022      	str	r2, [r4, #0]
 8007770:	d504      	bpl.n	800777c <__sflush_r+0x78>
 8007772:	1c42      	adds	r2, r0, #1
 8007774:	d101      	bne.n	800777a <__sflush_r+0x76>
 8007776:	682b      	ldr	r3, [r5, #0]
 8007778:	b903      	cbnz	r3, 800777c <__sflush_r+0x78>
 800777a:	6560      	str	r0, [r4, #84]	@ 0x54
 800777c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800777e:	602f      	str	r7, [r5, #0]
 8007780:	b1b9      	cbz	r1, 80077b2 <__sflush_r+0xae>
 8007782:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007786:	4299      	cmp	r1, r3
 8007788:	d002      	beq.n	8007790 <__sflush_r+0x8c>
 800778a:	4628      	mov	r0, r5
 800778c:	f7ff fbd4 	bl	8006f38 <_free_r>
 8007790:	2300      	movs	r3, #0
 8007792:	6363      	str	r3, [r4, #52]	@ 0x34
 8007794:	e00d      	b.n	80077b2 <__sflush_r+0xae>
 8007796:	2301      	movs	r3, #1
 8007798:	4628      	mov	r0, r5
 800779a:	47b0      	blx	r6
 800779c:	4602      	mov	r2, r0
 800779e:	1c50      	adds	r0, r2, #1
 80077a0:	d1c9      	bne.n	8007736 <__sflush_r+0x32>
 80077a2:	682b      	ldr	r3, [r5, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d0c6      	beq.n	8007736 <__sflush_r+0x32>
 80077a8:	2b1d      	cmp	r3, #29
 80077aa:	d001      	beq.n	80077b0 <__sflush_r+0xac>
 80077ac:	2b16      	cmp	r3, #22
 80077ae:	d11e      	bne.n	80077ee <__sflush_r+0xea>
 80077b0:	602f      	str	r7, [r5, #0]
 80077b2:	2000      	movs	r0, #0
 80077b4:	e022      	b.n	80077fc <__sflush_r+0xf8>
 80077b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077ba:	b21b      	sxth	r3, r3
 80077bc:	e01b      	b.n	80077f6 <__sflush_r+0xf2>
 80077be:	690f      	ldr	r7, [r1, #16]
 80077c0:	2f00      	cmp	r7, #0
 80077c2:	d0f6      	beq.n	80077b2 <__sflush_r+0xae>
 80077c4:	0793      	lsls	r3, r2, #30
 80077c6:	680e      	ldr	r6, [r1, #0]
 80077c8:	bf08      	it	eq
 80077ca:	694b      	ldreq	r3, [r1, #20]
 80077cc:	600f      	str	r7, [r1, #0]
 80077ce:	bf18      	it	ne
 80077d0:	2300      	movne	r3, #0
 80077d2:	eba6 0807 	sub.w	r8, r6, r7
 80077d6:	608b      	str	r3, [r1, #8]
 80077d8:	f1b8 0f00 	cmp.w	r8, #0
 80077dc:	dde9      	ble.n	80077b2 <__sflush_r+0xae>
 80077de:	6a21      	ldr	r1, [r4, #32]
 80077e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80077e2:	4643      	mov	r3, r8
 80077e4:	463a      	mov	r2, r7
 80077e6:	4628      	mov	r0, r5
 80077e8:	47b0      	blx	r6
 80077ea:	2800      	cmp	r0, #0
 80077ec:	dc08      	bgt.n	8007800 <__sflush_r+0xfc>
 80077ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077f6:	81a3      	strh	r3, [r4, #12]
 80077f8:	f04f 30ff 	mov.w	r0, #4294967295
 80077fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007800:	4407      	add	r7, r0
 8007802:	eba8 0800 	sub.w	r8, r8, r0
 8007806:	e7e7      	b.n	80077d8 <__sflush_r+0xd4>
 8007808:	dfbffffe 	.word	0xdfbffffe

0800780c <_fflush_r>:
 800780c:	b538      	push	{r3, r4, r5, lr}
 800780e:	690b      	ldr	r3, [r1, #16]
 8007810:	4605      	mov	r5, r0
 8007812:	460c      	mov	r4, r1
 8007814:	b913      	cbnz	r3, 800781c <_fflush_r+0x10>
 8007816:	2500      	movs	r5, #0
 8007818:	4628      	mov	r0, r5
 800781a:	bd38      	pop	{r3, r4, r5, pc}
 800781c:	b118      	cbz	r0, 8007826 <_fflush_r+0x1a>
 800781e:	6a03      	ldr	r3, [r0, #32]
 8007820:	b90b      	cbnz	r3, 8007826 <_fflush_r+0x1a>
 8007822:	f7ff fa47 	bl	8006cb4 <__sinit>
 8007826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d0f3      	beq.n	8007816 <_fflush_r+0xa>
 800782e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007830:	07d0      	lsls	r0, r2, #31
 8007832:	d404      	bmi.n	800783e <_fflush_r+0x32>
 8007834:	0599      	lsls	r1, r3, #22
 8007836:	d402      	bmi.n	800783e <_fflush_r+0x32>
 8007838:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800783a:	f7ff fb4e 	bl	8006eda <__retarget_lock_acquire_recursive>
 800783e:	4628      	mov	r0, r5
 8007840:	4621      	mov	r1, r4
 8007842:	f7ff ff5f 	bl	8007704 <__sflush_r>
 8007846:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007848:	07da      	lsls	r2, r3, #31
 800784a:	4605      	mov	r5, r0
 800784c:	d4e4      	bmi.n	8007818 <_fflush_r+0xc>
 800784e:	89a3      	ldrh	r3, [r4, #12]
 8007850:	059b      	lsls	r3, r3, #22
 8007852:	d4e1      	bmi.n	8007818 <_fflush_r+0xc>
 8007854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007856:	f7ff fb41 	bl	8006edc <__retarget_lock_release_recursive>
 800785a:	e7dd      	b.n	8007818 <_fflush_r+0xc>

0800785c <fiprintf>:
 800785c:	b40e      	push	{r1, r2, r3}
 800785e:	b503      	push	{r0, r1, lr}
 8007860:	4601      	mov	r1, r0
 8007862:	ab03      	add	r3, sp, #12
 8007864:	4805      	ldr	r0, [pc, #20]	@ (800787c <fiprintf+0x20>)
 8007866:	f853 2b04 	ldr.w	r2, [r3], #4
 800786a:	6800      	ldr	r0, [r0, #0]
 800786c:	9301      	str	r3, [sp, #4]
 800786e:	f000 f88f 	bl	8007990 <_vfiprintf_r>
 8007872:	b002      	add	sp, #8
 8007874:	f85d eb04 	ldr.w	lr, [sp], #4
 8007878:	b003      	add	sp, #12
 800787a:	4770      	bx	lr
 800787c:	20000030 	.word	0x20000030

08007880 <memmove>:
 8007880:	4288      	cmp	r0, r1
 8007882:	b510      	push	{r4, lr}
 8007884:	eb01 0402 	add.w	r4, r1, r2
 8007888:	d902      	bls.n	8007890 <memmove+0x10>
 800788a:	4284      	cmp	r4, r0
 800788c:	4623      	mov	r3, r4
 800788e:	d807      	bhi.n	80078a0 <memmove+0x20>
 8007890:	1e43      	subs	r3, r0, #1
 8007892:	42a1      	cmp	r1, r4
 8007894:	d008      	beq.n	80078a8 <memmove+0x28>
 8007896:	f811 2b01 	ldrb.w	r2, [r1], #1
 800789a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800789e:	e7f8      	b.n	8007892 <memmove+0x12>
 80078a0:	4402      	add	r2, r0
 80078a2:	4601      	mov	r1, r0
 80078a4:	428a      	cmp	r2, r1
 80078a6:	d100      	bne.n	80078aa <memmove+0x2a>
 80078a8:	bd10      	pop	{r4, pc}
 80078aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078b2:	e7f7      	b.n	80078a4 <memmove+0x24>

080078b4 <_sbrk_r>:
 80078b4:	b538      	push	{r3, r4, r5, lr}
 80078b6:	4d06      	ldr	r5, [pc, #24]	@ (80078d0 <_sbrk_r+0x1c>)
 80078b8:	2300      	movs	r3, #0
 80078ba:	4604      	mov	r4, r0
 80078bc:	4608      	mov	r0, r1
 80078be:	602b      	str	r3, [r5, #0]
 80078c0:	f7fb fca8 	bl	8003214 <_sbrk>
 80078c4:	1c43      	adds	r3, r0, #1
 80078c6:	d102      	bne.n	80078ce <_sbrk_r+0x1a>
 80078c8:	682b      	ldr	r3, [r5, #0]
 80078ca:	b103      	cbz	r3, 80078ce <_sbrk_r+0x1a>
 80078cc:	6023      	str	r3, [r4, #0]
 80078ce:	bd38      	pop	{r3, r4, r5, pc}
 80078d0:	20000738 	.word	0x20000738

080078d4 <abort>:
 80078d4:	b508      	push	{r3, lr}
 80078d6:	2006      	movs	r0, #6
 80078d8:	f000 fa2e 	bl	8007d38 <raise>
 80078dc:	2001      	movs	r0, #1
 80078de:	f7fb fc21 	bl	8003124 <_exit>

080078e2 <_realloc_r>:
 80078e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e6:	4680      	mov	r8, r0
 80078e8:	4615      	mov	r5, r2
 80078ea:	460c      	mov	r4, r1
 80078ec:	b921      	cbnz	r1, 80078f8 <_realloc_r+0x16>
 80078ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078f2:	4611      	mov	r1, r2
 80078f4:	f7ff bb94 	b.w	8007020 <_malloc_r>
 80078f8:	b92a      	cbnz	r2, 8007906 <_realloc_r+0x24>
 80078fa:	f7ff fb1d 	bl	8006f38 <_free_r>
 80078fe:	2400      	movs	r4, #0
 8007900:	4620      	mov	r0, r4
 8007902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007906:	f000 fa33 	bl	8007d70 <_malloc_usable_size_r>
 800790a:	4285      	cmp	r5, r0
 800790c:	4606      	mov	r6, r0
 800790e:	d802      	bhi.n	8007916 <_realloc_r+0x34>
 8007910:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007914:	d8f4      	bhi.n	8007900 <_realloc_r+0x1e>
 8007916:	4629      	mov	r1, r5
 8007918:	4640      	mov	r0, r8
 800791a:	f7ff fb81 	bl	8007020 <_malloc_r>
 800791e:	4607      	mov	r7, r0
 8007920:	2800      	cmp	r0, #0
 8007922:	d0ec      	beq.n	80078fe <_realloc_r+0x1c>
 8007924:	42b5      	cmp	r5, r6
 8007926:	462a      	mov	r2, r5
 8007928:	4621      	mov	r1, r4
 800792a:	bf28      	it	cs
 800792c:	4632      	movcs	r2, r6
 800792e:	f7ff fad6 	bl	8006ede <memcpy>
 8007932:	4621      	mov	r1, r4
 8007934:	4640      	mov	r0, r8
 8007936:	f7ff faff 	bl	8006f38 <_free_r>
 800793a:	463c      	mov	r4, r7
 800793c:	e7e0      	b.n	8007900 <_realloc_r+0x1e>

0800793e <__sfputc_r>:
 800793e:	6893      	ldr	r3, [r2, #8]
 8007940:	3b01      	subs	r3, #1
 8007942:	2b00      	cmp	r3, #0
 8007944:	b410      	push	{r4}
 8007946:	6093      	str	r3, [r2, #8]
 8007948:	da08      	bge.n	800795c <__sfputc_r+0x1e>
 800794a:	6994      	ldr	r4, [r2, #24]
 800794c:	42a3      	cmp	r3, r4
 800794e:	db01      	blt.n	8007954 <__sfputc_r+0x16>
 8007950:	290a      	cmp	r1, #10
 8007952:	d103      	bne.n	800795c <__sfputc_r+0x1e>
 8007954:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007958:	f000 b932 	b.w	8007bc0 <__swbuf_r>
 800795c:	6813      	ldr	r3, [r2, #0]
 800795e:	1c58      	adds	r0, r3, #1
 8007960:	6010      	str	r0, [r2, #0]
 8007962:	7019      	strb	r1, [r3, #0]
 8007964:	4608      	mov	r0, r1
 8007966:	f85d 4b04 	ldr.w	r4, [sp], #4
 800796a:	4770      	bx	lr

0800796c <__sfputs_r>:
 800796c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796e:	4606      	mov	r6, r0
 8007970:	460f      	mov	r7, r1
 8007972:	4614      	mov	r4, r2
 8007974:	18d5      	adds	r5, r2, r3
 8007976:	42ac      	cmp	r4, r5
 8007978:	d101      	bne.n	800797e <__sfputs_r+0x12>
 800797a:	2000      	movs	r0, #0
 800797c:	e007      	b.n	800798e <__sfputs_r+0x22>
 800797e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007982:	463a      	mov	r2, r7
 8007984:	4630      	mov	r0, r6
 8007986:	f7ff ffda 	bl	800793e <__sfputc_r>
 800798a:	1c43      	adds	r3, r0, #1
 800798c:	d1f3      	bne.n	8007976 <__sfputs_r+0xa>
 800798e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007990 <_vfiprintf_r>:
 8007990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007994:	460d      	mov	r5, r1
 8007996:	b09d      	sub	sp, #116	@ 0x74
 8007998:	4614      	mov	r4, r2
 800799a:	4698      	mov	r8, r3
 800799c:	4606      	mov	r6, r0
 800799e:	b118      	cbz	r0, 80079a8 <_vfiprintf_r+0x18>
 80079a0:	6a03      	ldr	r3, [r0, #32]
 80079a2:	b90b      	cbnz	r3, 80079a8 <_vfiprintf_r+0x18>
 80079a4:	f7ff f986 	bl	8006cb4 <__sinit>
 80079a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079aa:	07d9      	lsls	r1, r3, #31
 80079ac:	d405      	bmi.n	80079ba <_vfiprintf_r+0x2a>
 80079ae:	89ab      	ldrh	r3, [r5, #12]
 80079b0:	059a      	lsls	r2, r3, #22
 80079b2:	d402      	bmi.n	80079ba <_vfiprintf_r+0x2a>
 80079b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80079b6:	f7ff fa90 	bl	8006eda <__retarget_lock_acquire_recursive>
 80079ba:	89ab      	ldrh	r3, [r5, #12]
 80079bc:	071b      	lsls	r3, r3, #28
 80079be:	d501      	bpl.n	80079c4 <_vfiprintf_r+0x34>
 80079c0:	692b      	ldr	r3, [r5, #16]
 80079c2:	b99b      	cbnz	r3, 80079ec <_vfiprintf_r+0x5c>
 80079c4:	4629      	mov	r1, r5
 80079c6:	4630      	mov	r0, r6
 80079c8:	f000 f938 	bl	8007c3c <__swsetup_r>
 80079cc:	b170      	cbz	r0, 80079ec <_vfiprintf_r+0x5c>
 80079ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079d0:	07dc      	lsls	r4, r3, #31
 80079d2:	d504      	bpl.n	80079de <_vfiprintf_r+0x4e>
 80079d4:	f04f 30ff 	mov.w	r0, #4294967295
 80079d8:	b01d      	add	sp, #116	@ 0x74
 80079da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079de:	89ab      	ldrh	r3, [r5, #12]
 80079e0:	0598      	lsls	r0, r3, #22
 80079e2:	d4f7      	bmi.n	80079d4 <_vfiprintf_r+0x44>
 80079e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80079e6:	f7ff fa79 	bl	8006edc <__retarget_lock_release_recursive>
 80079ea:	e7f3      	b.n	80079d4 <_vfiprintf_r+0x44>
 80079ec:	2300      	movs	r3, #0
 80079ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80079f0:	2320      	movs	r3, #32
 80079f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80079f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80079fa:	2330      	movs	r3, #48	@ 0x30
 80079fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007bac <_vfiprintf_r+0x21c>
 8007a00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a04:	f04f 0901 	mov.w	r9, #1
 8007a08:	4623      	mov	r3, r4
 8007a0a:	469a      	mov	sl, r3
 8007a0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a10:	b10a      	cbz	r2, 8007a16 <_vfiprintf_r+0x86>
 8007a12:	2a25      	cmp	r2, #37	@ 0x25
 8007a14:	d1f9      	bne.n	8007a0a <_vfiprintf_r+0x7a>
 8007a16:	ebba 0b04 	subs.w	fp, sl, r4
 8007a1a:	d00b      	beq.n	8007a34 <_vfiprintf_r+0xa4>
 8007a1c:	465b      	mov	r3, fp
 8007a1e:	4622      	mov	r2, r4
 8007a20:	4629      	mov	r1, r5
 8007a22:	4630      	mov	r0, r6
 8007a24:	f7ff ffa2 	bl	800796c <__sfputs_r>
 8007a28:	3001      	adds	r0, #1
 8007a2a:	f000 80a7 	beq.w	8007b7c <_vfiprintf_r+0x1ec>
 8007a2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a30:	445a      	add	r2, fp
 8007a32:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a34:	f89a 3000 	ldrb.w	r3, [sl]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f000 809f 	beq.w	8007b7c <_vfiprintf_r+0x1ec>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	f04f 32ff 	mov.w	r2, #4294967295
 8007a44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a48:	f10a 0a01 	add.w	sl, sl, #1
 8007a4c:	9304      	str	r3, [sp, #16]
 8007a4e:	9307      	str	r3, [sp, #28]
 8007a50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a54:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a56:	4654      	mov	r4, sl
 8007a58:	2205      	movs	r2, #5
 8007a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a5e:	4853      	ldr	r0, [pc, #332]	@ (8007bac <_vfiprintf_r+0x21c>)
 8007a60:	f7f8 fbc6 	bl	80001f0 <memchr>
 8007a64:	9a04      	ldr	r2, [sp, #16]
 8007a66:	b9d8      	cbnz	r0, 8007aa0 <_vfiprintf_r+0x110>
 8007a68:	06d1      	lsls	r1, r2, #27
 8007a6a:	bf44      	itt	mi
 8007a6c:	2320      	movmi	r3, #32
 8007a6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a72:	0713      	lsls	r3, r2, #28
 8007a74:	bf44      	itt	mi
 8007a76:	232b      	movmi	r3, #43	@ 0x2b
 8007a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a80:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a82:	d015      	beq.n	8007ab0 <_vfiprintf_r+0x120>
 8007a84:	9a07      	ldr	r2, [sp, #28]
 8007a86:	4654      	mov	r4, sl
 8007a88:	2000      	movs	r0, #0
 8007a8a:	f04f 0c0a 	mov.w	ip, #10
 8007a8e:	4621      	mov	r1, r4
 8007a90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a94:	3b30      	subs	r3, #48	@ 0x30
 8007a96:	2b09      	cmp	r3, #9
 8007a98:	d94b      	bls.n	8007b32 <_vfiprintf_r+0x1a2>
 8007a9a:	b1b0      	cbz	r0, 8007aca <_vfiprintf_r+0x13a>
 8007a9c:	9207      	str	r2, [sp, #28]
 8007a9e:	e014      	b.n	8007aca <_vfiprintf_r+0x13a>
 8007aa0:	eba0 0308 	sub.w	r3, r0, r8
 8007aa4:	fa09 f303 	lsl.w	r3, r9, r3
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	9304      	str	r3, [sp, #16]
 8007aac:	46a2      	mov	sl, r4
 8007aae:	e7d2      	b.n	8007a56 <_vfiprintf_r+0xc6>
 8007ab0:	9b03      	ldr	r3, [sp, #12]
 8007ab2:	1d19      	adds	r1, r3, #4
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	9103      	str	r1, [sp, #12]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	bfbb      	ittet	lt
 8007abc:	425b      	neglt	r3, r3
 8007abe:	f042 0202 	orrlt.w	r2, r2, #2
 8007ac2:	9307      	strge	r3, [sp, #28]
 8007ac4:	9307      	strlt	r3, [sp, #28]
 8007ac6:	bfb8      	it	lt
 8007ac8:	9204      	strlt	r2, [sp, #16]
 8007aca:	7823      	ldrb	r3, [r4, #0]
 8007acc:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ace:	d10a      	bne.n	8007ae6 <_vfiprintf_r+0x156>
 8007ad0:	7863      	ldrb	r3, [r4, #1]
 8007ad2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ad4:	d132      	bne.n	8007b3c <_vfiprintf_r+0x1ac>
 8007ad6:	9b03      	ldr	r3, [sp, #12]
 8007ad8:	1d1a      	adds	r2, r3, #4
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	9203      	str	r2, [sp, #12]
 8007ade:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ae2:	3402      	adds	r4, #2
 8007ae4:	9305      	str	r3, [sp, #20]
 8007ae6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007bbc <_vfiprintf_r+0x22c>
 8007aea:	7821      	ldrb	r1, [r4, #0]
 8007aec:	2203      	movs	r2, #3
 8007aee:	4650      	mov	r0, sl
 8007af0:	f7f8 fb7e 	bl	80001f0 <memchr>
 8007af4:	b138      	cbz	r0, 8007b06 <_vfiprintf_r+0x176>
 8007af6:	9b04      	ldr	r3, [sp, #16]
 8007af8:	eba0 000a 	sub.w	r0, r0, sl
 8007afc:	2240      	movs	r2, #64	@ 0x40
 8007afe:	4082      	lsls	r2, r0
 8007b00:	4313      	orrs	r3, r2
 8007b02:	3401      	adds	r4, #1
 8007b04:	9304      	str	r3, [sp, #16]
 8007b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b0a:	4829      	ldr	r0, [pc, #164]	@ (8007bb0 <_vfiprintf_r+0x220>)
 8007b0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b10:	2206      	movs	r2, #6
 8007b12:	f7f8 fb6d 	bl	80001f0 <memchr>
 8007b16:	2800      	cmp	r0, #0
 8007b18:	d03f      	beq.n	8007b9a <_vfiprintf_r+0x20a>
 8007b1a:	4b26      	ldr	r3, [pc, #152]	@ (8007bb4 <_vfiprintf_r+0x224>)
 8007b1c:	bb1b      	cbnz	r3, 8007b66 <_vfiprintf_r+0x1d6>
 8007b1e:	9b03      	ldr	r3, [sp, #12]
 8007b20:	3307      	adds	r3, #7
 8007b22:	f023 0307 	bic.w	r3, r3, #7
 8007b26:	3308      	adds	r3, #8
 8007b28:	9303      	str	r3, [sp, #12]
 8007b2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b2c:	443b      	add	r3, r7
 8007b2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b30:	e76a      	b.n	8007a08 <_vfiprintf_r+0x78>
 8007b32:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b36:	460c      	mov	r4, r1
 8007b38:	2001      	movs	r0, #1
 8007b3a:	e7a8      	b.n	8007a8e <_vfiprintf_r+0xfe>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	3401      	adds	r4, #1
 8007b40:	9305      	str	r3, [sp, #20]
 8007b42:	4619      	mov	r1, r3
 8007b44:	f04f 0c0a 	mov.w	ip, #10
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b4e:	3a30      	subs	r2, #48	@ 0x30
 8007b50:	2a09      	cmp	r2, #9
 8007b52:	d903      	bls.n	8007b5c <_vfiprintf_r+0x1cc>
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d0c6      	beq.n	8007ae6 <_vfiprintf_r+0x156>
 8007b58:	9105      	str	r1, [sp, #20]
 8007b5a:	e7c4      	b.n	8007ae6 <_vfiprintf_r+0x156>
 8007b5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b60:	4604      	mov	r4, r0
 8007b62:	2301      	movs	r3, #1
 8007b64:	e7f0      	b.n	8007b48 <_vfiprintf_r+0x1b8>
 8007b66:	ab03      	add	r3, sp, #12
 8007b68:	9300      	str	r3, [sp, #0]
 8007b6a:	462a      	mov	r2, r5
 8007b6c:	4b12      	ldr	r3, [pc, #72]	@ (8007bb8 <_vfiprintf_r+0x228>)
 8007b6e:	a904      	add	r1, sp, #16
 8007b70:	4630      	mov	r0, r6
 8007b72:	f3af 8000 	nop.w
 8007b76:	4607      	mov	r7, r0
 8007b78:	1c78      	adds	r0, r7, #1
 8007b7a:	d1d6      	bne.n	8007b2a <_vfiprintf_r+0x19a>
 8007b7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b7e:	07d9      	lsls	r1, r3, #31
 8007b80:	d405      	bmi.n	8007b8e <_vfiprintf_r+0x1fe>
 8007b82:	89ab      	ldrh	r3, [r5, #12]
 8007b84:	059a      	lsls	r2, r3, #22
 8007b86:	d402      	bmi.n	8007b8e <_vfiprintf_r+0x1fe>
 8007b88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b8a:	f7ff f9a7 	bl	8006edc <__retarget_lock_release_recursive>
 8007b8e:	89ab      	ldrh	r3, [r5, #12]
 8007b90:	065b      	lsls	r3, r3, #25
 8007b92:	f53f af1f 	bmi.w	80079d4 <_vfiprintf_r+0x44>
 8007b96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b98:	e71e      	b.n	80079d8 <_vfiprintf_r+0x48>
 8007b9a:	ab03      	add	r3, sp, #12
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	462a      	mov	r2, r5
 8007ba0:	4b05      	ldr	r3, [pc, #20]	@ (8007bb8 <_vfiprintf_r+0x228>)
 8007ba2:	a904      	add	r1, sp, #16
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	f7ff fc8d 	bl	80074c4 <_printf_i>
 8007baa:	e7e4      	b.n	8007b76 <_vfiprintf_r+0x1e6>
 8007bac:	08007fa3 	.word	0x08007fa3
 8007bb0:	08007fad 	.word	0x08007fad
 8007bb4:	00000000 	.word	0x00000000
 8007bb8:	0800796d 	.word	0x0800796d
 8007bbc:	08007fa9 	.word	0x08007fa9

08007bc0 <__swbuf_r>:
 8007bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc2:	460e      	mov	r6, r1
 8007bc4:	4614      	mov	r4, r2
 8007bc6:	4605      	mov	r5, r0
 8007bc8:	b118      	cbz	r0, 8007bd2 <__swbuf_r+0x12>
 8007bca:	6a03      	ldr	r3, [r0, #32]
 8007bcc:	b90b      	cbnz	r3, 8007bd2 <__swbuf_r+0x12>
 8007bce:	f7ff f871 	bl	8006cb4 <__sinit>
 8007bd2:	69a3      	ldr	r3, [r4, #24]
 8007bd4:	60a3      	str	r3, [r4, #8]
 8007bd6:	89a3      	ldrh	r3, [r4, #12]
 8007bd8:	071a      	lsls	r2, r3, #28
 8007bda:	d501      	bpl.n	8007be0 <__swbuf_r+0x20>
 8007bdc:	6923      	ldr	r3, [r4, #16]
 8007bde:	b943      	cbnz	r3, 8007bf2 <__swbuf_r+0x32>
 8007be0:	4621      	mov	r1, r4
 8007be2:	4628      	mov	r0, r5
 8007be4:	f000 f82a 	bl	8007c3c <__swsetup_r>
 8007be8:	b118      	cbz	r0, 8007bf2 <__swbuf_r+0x32>
 8007bea:	f04f 37ff 	mov.w	r7, #4294967295
 8007bee:	4638      	mov	r0, r7
 8007bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bf2:	6823      	ldr	r3, [r4, #0]
 8007bf4:	6922      	ldr	r2, [r4, #16]
 8007bf6:	1a98      	subs	r0, r3, r2
 8007bf8:	6963      	ldr	r3, [r4, #20]
 8007bfa:	b2f6      	uxtb	r6, r6
 8007bfc:	4283      	cmp	r3, r0
 8007bfe:	4637      	mov	r7, r6
 8007c00:	dc05      	bgt.n	8007c0e <__swbuf_r+0x4e>
 8007c02:	4621      	mov	r1, r4
 8007c04:	4628      	mov	r0, r5
 8007c06:	f7ff fe01 	bl	800780c <_fflush_r>
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	d1ed      	bne.n	8007bea <__swbuf_r+0x2a>
 8007c0e:	68a3      	ldr	r3, [r4, #8]
 8007c10:	3b01      	subs	r3, #1
 8007c12:	60a3      	str	r3, [r4, #8]
 8007c14:	6823      	ldr	r3, [r4, #0]
 8007c16:	1c5a      	adds	r2, r3, #1
 8007c18:	6022      	str	r2, [r4, #0]
 8007c1a:	701e      	strb	r6, [r3, #0]
 8007c1c:	6962      	ldr	r2, [r4, #20]
 8007c1e:	1c43      	adds	r3, r0, #1
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d004      	beq.n	8007c2e <__swbuf_r+0x6e>
 8007c24:	89a3      	ldrh	r3, [r4, #12]
 8007c26:	07db      	lsls	r3, r3, #31
 8007c28:	d5e1      	bpl.n	8007bee <__swbuf_r+0x2e>
 8007c2a:	2e0a      	cmp	r6, #10
 8007c2c:	d1df      	bne.n	8007bee <__swbuf_r+0x2e>
 8007c2e:	4621      	mov	r1, r4
 8007c30:	4628      	mov	r0, r5
 8007c32:	f7ff fdeb 	bl	800780c <_fflush_r>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d0d9      	beq.n	8007bee <__swbuf_r+0x2e>
 8007c3a:	e7d6      	b.n	8007bea <__swbuf_r+0x2a>

08007c3c <__swsetup_r>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	4b29      	ldr	r3, [pc, #164]	@ (8007ce4 <__swsetup_r+0xa8>)
 8007c40:	4605      	mov	r5, r0
 8007c42:	6818      	ldr	r0, [r3, #0]
 8007c44:	460c      	mov	r4, r1
 8007c46:	b118      	cbz	r0, 8007c50 <__swsetup_r+0x14>
 8007c48:	6a03      	ldr	r3, [r0, #32]
 8007c4a:	b90b      	cbnz	r3, 8007c50 <__swsetup_r+0x14>
 8007c4c:	f7ff f832 	bl	8006cb4 <__sinit>
 8007c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c54:	0719      	lsls	r1, r3, #28
 8007c56:	d422      	bmi.n	8007c9e <__swsetup_r+0x62>
 8007c58:	06da      	lsls	r2, r3, #27
 8007c5a:	d407      	bmi.n	8007c6c <__swsetup_r+0x30>
 8007c5c:	2209      	movs	r2, #9
 8007c5e:	602a      	str	r2, [r5, #0]
 8007c60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c64:	81a3      	strh	r3, [r4, #12]
 8007c66:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6a:	e033      	b.n	8007cd4 <__swsetup_r+0x98>
 8007c6c:	0758      	lsls	r0, r3, #29
 8007c6e:	d512      	bpl.n	8007c96 <__swsetup_r+0x5a>
 8007c70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c72:	b141      	cbz	r1, 8007c86 <__swsetup_r+0x4a>
 8007c74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c78:	4299      	cmp	r1, r3
 8007c7a:	d002      	beq.n	8007c82 <__swsetup_r+0x46>
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	f7ff f95b 	bl	8006f38 <_free_r>
 8007c82:	2300      	movs	r3, #0
 8007c84:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c86:	89a3      	ldrh	r3, [r4, #12]
 8007c88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007c8c:	81a3      	strh	r3, [r4, #12]
 8007c8e:	2300      	movs	r3, #0
 8007c90:	6063      	str	r3, [r4, #4]
 8007c92:	6923      	ldr	r3, [r4, #16]
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	89a3      	ldrh	r3, [r4, #12]
 8007c98:	f043 0308 	orr.w	r3, r3, #8
 8007c9c:	81a3      	strh	r3, [r4, #12]
 8007c9e:	6923      	ldr	r3, [r4, #16]
 8007ca0:	b94b      	cbnz	r3, 8007cb6 <__swsetup_r+0x7a>
 8007ca2:	89a3      	ldrh	r3, [r4, #12]
 8007ca4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ca8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cac:	d003      	beq.n	8007cb6 <__swsetup_r+0x7a>
 8007cae:	4621      	mov	r1, r4
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	f000 f88b 	bl	8007dcc <__smakebuf_r>
 8007cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cba:	f013 0201 	ands.w	r2, r3, #1
 8007cbe:	d00a      	beq.n	8007cd6 <__swsetup_r+0x9a>
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	60a2      	str	r2, [r4, #8]
 8007cc4:	6962      	ldr	r2, [r4, #20]
 8007cc6:	4252      	negs	r2, r2
 8007cc8:	61a2      	str	r2, [r4, #24]
 8007cca:	6922      	ldr	r2, [r4, #16]
 8007ccc:	b942      	cbnz	r2, 8007ce0 <__swsetup_r+0xa4>
 8007cce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007cd2:	d1c5      	bne.n	8007c60 <__swsetup_r+0x24>
 8007cd4:	bd38      	pop	{r3, r4, r5, pc}
 8007cd6:	0799      	lsls	r1, r3, #30
 8007cd8:	bf58      	it	pl
 8007cda:	6962      	ldrpl	r2, [r4, #20]
 8007cdc:	60a2      	str	r2, [r4, #8]
 8007cde:	e7f4      	b.n	8007cca <__swsetup_r+0x8e>
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	e7f7      	b.n	8007cd4 <__swsetup_r+0x98>
 8007ce4:	20000030 	.word	0x20000030

08007ce8 <_raise_r>:
 8007ce8:	291f      	cmp	r1, #31
 8007cea:	b538      	push	{r3, r4, r5, lr}
 8007cec:	4605      	mov	r5, r0
 8007cee:	460c      	mov	r4, r1
 8007cf0:	d904      	bls.n	8007cfc <_raise_r+0x14>
 8007cf2:	2316      	movs	r3, #22
 8007cf4:	6003      	str	r3, [r0, #0]
 8007cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8007cfa:	bd38      	pop	{r3, r4, r5, pc}
 8007cfc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007cfe:	b112      	cbz	r2, 8007d06 <_raise_r+0x1e>
 8007d00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d04:	b94b      	cbnz	r3, 8007d1a <_raise_r+0x32>
 8007d06:	4628      	mov	r0, r5
 8007d08:	f000 f830 	bl	8007d6c <_getpid_r>
 8007d0c:	4622      	mov	r2, r4
 8007d0e:	4601      	mov	r1, r0
 8007d10:	4628      	mov	r0, r5
 8007d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d16:	f000 b817 	b.w	8007d48 <_kill_r>
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d00a      	beq.n	8007d34 <_raise_r+0x4c>
 8007d1e:	1c59      	adds	r1, r3, #1
 8007d20:	d103      	bne.n	8007d2a <_raise_r+0x42>
 8007d22:	2316      	movs	r3, #22
 8007d24:	6003      	str	r3, [r0, #0]
 8007d26:	2001      	movs	r0, #1
 8007d28:	e7e7      	b.n	8007cfa <_raise_r+0x12>
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007d30:	4620      	mov	r0, r4
 8007d32:	4798      	blx	r3
 8007d34:	2000      	movs	r0, #0
 8007d36:	e7e0      	b.n	8007cfa <_raise_r+0x12>

08007d38 <raise>:
 8007d38:	4b02      	ldr	r3, [pc, #8]	@ (8007d44 <raise+0xc>)
 8007d3a:	4601      	mov	r1, r0
 8007d3c:	6818      	ldr	r0, [r3, #0]
 8007d3e:	f7ff bfd3 	b.w	8007ce8 <_raise_r>
 8007d42:	bf00      	nop
 8007d44:	20000030 	.word	0x20000030

08007d48 <_kill_r>:
 8007d48:	b538      	push	{r3, r4, r5, lr}
 8007d4a:	4d07      	ldr	r5, [pc, #28]	@ (8007d68 <_kill_r+0x20>)
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	4604      	mov	r4, r0
 8007d50:	4608      	mov	r0, r1
 8007d52:	4611      	mov	r1, r2
 8007d54:	602b      	str	r3, [r5, #0]
 8007d56:	f7fb f9d5 	bl	8003104 <_kill>
 8007d5a:	1c43      	adds	r3, r0, #1
 8007d5c:	d102      	bne.n	8007d64 <_kill_r+0x1c>
 8007d5e:	682b      	ldr	r3, [r5, #0]
 8007d60:	b103      	cbz	r3, 8007d64 <_kill_r+0x1c>
 8007d62:	6023      	str	r3, [r4, #0]
 8007d64:	bd38      	pop	{r3, r4, r5, pc}
 8007d66:	bf00      	nop
 8007d68:	20000738 	.word	0x20000738

08007d6c <_getpid_r>:
 8007d6c:	f7fb b9c2 	b.w	80030f4 <_getpid>

08007d70 <_malloc_usable_size_r>:
 8007d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d74:	1f18      	subs	r0, r3, #4
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	bfbc      	itt	lt
 8007d7a:	580b      	ldrlt	r3, [r1, r0]
 8007d7c:	18c0      	addlt	r0, r0, r3
 8007d7e:	4770      	bx	lr

08007d80 <__swhatbuf_r>:
 8007d80:	b570      	push	{r4, r5, r6, lr}
 8007d82:	460c      	mov	r4, r1
 8007d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d88:	2900      	cmp	r1, #0
 8007d8a:	b096      	sub	sp, #88	@ 0x58
 8007d8c:	4615      	mov	r5, r2
 8007d8e:	461e      	mov	r6, r3
 8007d90:	da0d      	bge.n	8007dae <__swhatbuf_r+0x2e>
 8007d92:	89a3      	ldrh	r3, [r4, #12]
 8007d94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007d98:	f04f 0100 	mov.w	r1, #0
 8007d9c:	bf14      	ite	ne
 8007d9e:	2340      	movne	r3, #64	@ 0x40
 8007da0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007da4:	2000      	movs	r0, #0
 8007da6:	6031      	str	r1, [r6, #0]
 8007da8:	602b      	str	r3, [r5, #0]
 8007daa:	b016      	add	sp, #88	@ 0x58
 8007dac:	bd70      	pop	{r4, r5, r6, pc}
 8007dae:	466a      	mov	r2, sp
 8007db0:	f000 f848 	bl	8007e44 <_fstat_r>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	dbec      	blt.n	8007d92 <__swhatbuf_r+0x12>
 8007db8:	9901      	ldr	r1, [sp, #4]
 8007dba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007dbe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007dc2:	4259      	negs	r1, r3
 8007dc4:	4159      	adcs	r1, r3
 8007dc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007dca:	e7eb      	b.n	8007da4 <__swhatbuf_r+0x24>

08007dcc <__smakebuf_r>:
 8007dcc:	898b      	ldrh	r3, [r1, #12]
 8007dce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dd0:	079d      	lsls	r5, r3, #30
 8007dd2:	4606      	mov	r6, r0
 8007dd4:	460c      	mov	r4, r1
 8007dd6:	d507      	bpl.n	8007de8 <__smakebuf_r+0x1c>
 8007dd8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	6123      	str	r3, [r4, #16]
 8007de0:	2301      	movs	r3, #1
 8007de2:	6163      	str	r3, [r4, #20]
 8007de4:	b003      	add	sp, #12
 8007de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007de8:	ab01      	add	r3, sp, #4
 8007dea:	466a      	mov	r2, sp
 8007dec:	f7ff ffc8 	bl	8007d80 <__swhatbuf_r>
 8007df0:	9f00      	ldr	r7, [sp, #0]
 8007df2:	4605      	mov	r5, r0
 8007df4:	4639      	mov	r1, r7
 8007df6:	4630      	mov	r0, r6
 8007df8:	f7ff f912 	bl	8007020 <_malloc_r>
 8007dfc:	b948      	cbnz	r0, 8007e12 <__smakebuf_r+0x46>
 8007dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e02:	059a      	lsls	r2, r3, #22
 8007e04:	d4ee      	bmi.n	8007de4 <__smakebuf_r+0x18>
 8007e06:	f023 0303 	bic.w	r3, r3, #3
 8007e0a:	f043 0302 	orr.w	r3, r3, #2
 8007e0e:	81a3      	strh	r3, [r4, #12]
 8007e10:	e7e2      	b.n	8007dd8 <__smakebuf_r+0xc>
 8007e12:	89a3      	ldrh	r3, [r4, #12]
 8007e14:	6020      	str	r0, [r4, #0]
 8007e16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e1a:	81a3      	strh	r3, [r4, #12]
 8007e1c:	9b01      	ldr	r3, [sp, #4]
 8007e1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007e22:	b15b      	cbz	r3, 8007e3c <__smakebuf_r+0x70>
 8007e24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e28:	4630      	mov	r0, r6
 8007e2a:	f000 f81d 	bl	8007e68 <_isatty_r>
 8007e2e:	b128      	cbz	r0, 8007e3c <__smakebuf_r+0x70>
 8007e30:	89a3      	ldrh	r3, [r4, #12]
 8007e32:	f023 0303 	bic.w	r3, r3, #3
 8007e36:	f043 0301 	orr.w	r3, r3, #1
 8007e3a:	81a3      	strh	r3, [r4, #12]
 8007e3c:	89a3      	ldrh	r3, [r4, #12]
 8007e3e:	431d      	orrs	r5, r3
 8007e40:	81a5      	strh	r5, [r4, #12]
 8007e42:	e7cf      	b.n	8007de4 <__smakebuf_r+0x18>

08007e44 <_fstat_r>:
 8007e44:	b538      	push	{r3, r4, r5, lr}
 8007e46:	4d07      	ldr	r5, [pc, #28]	@ (8007e64 <_fstat_r+0x20>)
 8007e48:	2300      	movs	r3, #0
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	4608      	mov	r0, r1
 8007e4e:	4611      	mov	r1, r2
 8007e50:	602b      	str	r3, [r5, #0]
 8007e52:	f7fb f9b7 	bl	80031c4 <_fstat>
 8007e56:	1c43      	adds	r3, r0, #1
 8007e58:	d102      	bne.n	8007e60 <_fstat_r+0x1c>
 8007e5a:	682b      	ldr	r3, [r5, #0]
 8007e5c:	b103      	cbz	r3, 8007e60 <_fstat_r+0x1c>
 8007e5e:	6023      	str	r3, [r4, #0]
 8007e60:	bd38      	pop	{r3, r4, r5, pc}
 8007e62:	bf00      	nop
 8007e64:	20000738 	.word	0x20000738

08007e68 <_isatty_r>:
 8007e68:	b538      	push	{r3, r4, r5, lr}
 8007e6a:	4d06      	ldr	r5, [pc, #24]	@ (8007e84 <_isatty_r+0x1c>)
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	4604      	mov	r4, r0
 8007e70:	4608      	mov	r0, r1
 8007e72:	602b      	str	r3, [r5, #0]
 8007e74:	f7fb f9b6 	bl	80031e4 <_isatty>
 8007e78:	1c43      	adds	r3, r0, #1
 8007e7a:	d102      	bne.n	8007e82 <_isatty_r+0x1a>
 8007e7c:	682b      	ldr	r3, [r5, #0]
 8007e7e:	b103      	cbz	r3, 8007e82 <_isatty_r+0x1a>
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	bd38      	pop	{r3, r4, r5, pc}
 8007e84:	20000738 	.word	0x20000738

08007e88 <_init>:
 8007e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8a:	bf00      	nop
 8007e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e8e:	bc08      	pop	{r3}
 8007e90:	469e      	mov	lr, r3
 8007e92:	4770      	bx	lr

08007e94 <_fini>:
 8007e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e96:	bf00      	nop
 8007e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e9a:	bc08      	pop	{r3}
 8007e9c:	469e      	mov	lr, r3
 8007e9e:	4770      	bx	lr
