
BlueTooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08006e8c  08006e8c  00007e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e0  080070e0  00009088  2**0
                  CONTENTS
  4 .ARM          00000008  080070e0  080070e0  000080e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070e8  080070e8  00009088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070e8  080070e8  000080e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070ec  080070ec  000080ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  080070f0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  20000088  08007178  00009088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f8  08007178  000096f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016428  00000000  00000000  000090b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a95  00000000  00000000  0001f4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  00022f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff8  00000000  00000000  00024470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c578  00000000  00000000  00025468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019824  00000000  00000000  000419e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000958c0  00000000  00000000  0005b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0ac4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b24  00000000  00000000  000f0b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000f662c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006e74 	.word	0x08006e74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08006e74 	.word	0x08006e74

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08c      	sub	sp, #48	@ 0x30
 8000574:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

	/* USER CODE END BlueNRG_MS_Init_PreTreatment */

	/* Initialize the peripherals and the BLE Stack */
	uint8_t SERVER_BDADDR[] = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000576:	4a52      	ldr	r2, [pc, #328]	@ (80006c0 <MX_BlueNRG_MS_Init+0x150>)
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000580:	6018      	str	r0, [r3, #0]
 8000582:	3304      	adds	r3, #4
 8000584:	8019      	strh	r1, [r3, #0]

	uint8_t  hwVersion;
	uint16_t fwVersion;
	int ret;

	User_Init();
 8000586:	f000 f8bd 	bl	8000704 <User_Init>

	/* Get the User Button initial state */
	user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 800058a:	2000      	movs	r0, #0
 800058c:	f002 f988 	bl	80028a0 <BSP_PB_GetState>
 8000590:	4603      	mov	r3, r0
 8000592:	b2da      	uxtb	r2, r3
 8000594:	4b4b      	ldr	r3, [pc, #300]	@ (80006c4 <MX_BlueNRG_MS_Init+0x154>)
 8000596:	701a      	strb	r2, [r3, #0]

	hci_init(user_notify, NULL);
 8000598:	2100      	movs	r1, #0
 800059a:	484b      	ldr	r0, [pc, #300]	@ (80006c8 <MX_BlueNRG_MS_Init+0x158>)
 800059c:	f005 f974 	bl	8005888 <hci_init>

	/* get the BlueNRG HW and FW versions */
	getBlueNRGVersion(&hwVersion, &fwVersion);
 80005a0:	1cba      	adds	r2, r7, #2
 80005a2:	1d7b      	adds	r3, r7, #5
 80005a4:	4611      	mov	r1, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f004 ffe3 	bl	8005572 <getBlueNRGVersion>
	* Reset BlueNRG again otherwise we won't
	* be able to change its MAC address.
	* aci_hal_write_config_data() must be the first
	* command after reset otherwise it will fail.
	*/
	hci_reset();
 80005ac:	f005 f825 	bl	80055fa <hci_reset>

	HAL_Delay(100);
 80005b0:	2064      	movs	r0, #100	@ 0x64
 80005b2:	f002 fb1b 	bl	8002bec <HAL_Delay>

	printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 80005b6:	797b      	ldrb	r3, [r7, #5]
 80005b8:	4619      	mov	r1, r3
 80005ba:	887b      	ldrh	r3, [r7, #2]
 80005bc:	461a      	mov	r2, r3
 80005be:	4843      	ldr	r0, [pc, #268]	@ (80006cc <MX_BlueNRG_MS_Init+0x15c>)
 80005c0:	f005 fdee 	bl	80061a0 <iprintf>

	if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 80005c4:	797b      	ldrb	r3, [r7, #5]
 80005c6:	2b30      	cmp	r3, #48	@ 0x30
 80005c8:	d902      	bls.n	80005d0 <MX_BlueNRG_MS_Init+0x60>
		bnrg_expansion_board = IDB05A1;
 80005ca:	4b41      	ldr	r3, [pc, #260]	@ (80006d0 <MX_BlueNRG_MS_Init+0x160>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
	}

	BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	f107 0214 	add.w	r2, r7, #20
 80005d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005dc:	6018      	str	r0, [r3, #0]
 80005de:	3304      	adds	r3, #4
 80005e0:	8019      	strh	r1, [r3, #0]

	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	461a      	mov	r2, r3
 80005e8:	2106      	movs	r1, #6
 80005ea:	2000      	movs	r0, #0
 80005ec:	f004 ff2b 	bl	8005446 <aci_hal_write_config_data>
 80005f0:	4603      	mov	r3, r0
 80005f2:	61fb      	str	r3, [r7, #28]
								  CONFIG_DATA_PUBADDR_LEN,
								  bdaddr);
	if (ret) {
 80005f4:	69fb      	ldr	r3, [r7, #28]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d003      	beq.n	8000602 <MX_BlueNRG_MS_Init+0x92>
		printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 80005fa:	69f9      	ldr	r1, [r7, #28]
 80005fc:	4835      	ldr	r0, [pc, #212]	@ (80006d4 <MX_BlueNRG_MS_Init+0x164>)
 80005fe:	f005 fdcf 	bl	80061a0 <iprintf>
	}

	ret = aci_gatt_init();
 8000602:	f004 fcd4 	bl	8004fae <aci_gatt_init>
 8000606:	4603      	mov	r3, r0
 8000608:	61fb      	str	r3, [r7, #28]
	if (ret) {
 800060a:	69fb      	ldr	r3, [r7, #28]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d002      	beq.n	8000616 <MX_BlueNRG_MS_Init+0xa6>
		printf("GATT_Init failed.\n");
 8000610:	4831      	ldr	r0, [pc, #196]	@ (80006d8 <MX_BlueNRG_MS_Init+0x168>)
 8000612:	f005 fe35 	bl	8006280 <puts>
	}

	if (bnrg_expansion_board == IDB05A1) {
 8000616:	4b2e      	ldr	r3, [pc, #184]	@ (80006d0 <MX_BlueNRG_MS_Init+0x160>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d10f      	bne.n	800063e <MX_BlueNRG_MS_Init+0xce>
		ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800061e:	f107 020a 	add.w	r2, r7, #10
 8000622:	1dbb      	adds	r3, r7, #6
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	4613      	mov	r3, r2
 800062e:	2207      	movs	r2, #7
 8000630:	2100      	movs	r1, #0
 8000632:	2001      	movs	r0, #1
 8000634:	f004 fae0 	bl	8004bf8 <aci_gap_init_IDB05A1>
 8000638:	4603      	mov	r3, r0
 800063a:	61fb      	str	r3, [r7, #28]
 800063c:	e009      	b.n	8000652 <MX_BlueNRG_MS_Init+0xe2>
	}
	else {
		ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800063e:	1dbb      	adds	r3, r7, #6
 8000640:	f107 0208 	add.w	r2, r7, #8
 8000644:	f107 010a 	add.w	r1, r7, #10
 8000648:	2001      	movs	r0, #1
 800064a:	f004 fb25 	bl	8004c98 <aci_gap_init_IDB04A1>
 800064e:	4603      	mov	r3, r0
 8000650:	61fb      	str	r3, [r7, #28]
	}

	if (ret != BLE_STATUS_SUCCESS) {
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d002      	beq.n	800065e <MX_BlueNRG_MS_Init+0xee>
		printf("GAP_Init failed.\n");
 8000658:	4820      	ldr	r0, [pc, #128]	@ (80006dc <MX_BlueNRG_MS_Init+0x16c>)
 800065a:	f005 fe11 	bl	8006280 <puts>
	}

	ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 800065e:	2301      	movs	r3, #1
 8000660:	9303      	str	r3, [sp, #12]
 8000662:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <MX_BlueNRG_MS_Init+0x170>)
 8000664:	9302      	str	r3, [sp, #8]
 8000666:	2300      	movs	r3, #0
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	2310      	movs	r3, #16
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2307      	movs	r3, #7
 8000670:	2200      	movs	r2, #0
 8000672:	2100      	movs	r1, #0
 8000674:	2001      	movs	r0, #1
 8000676:	f004 fc43 	bl	8004f00 <aci_gap_set_auth_requirement>
 800067a:	4603      	mov	r3, r0
 800067c:	61fb      	str	r3, [r7, #28]
									 7,
									 16,
									 USE_FIXED_PIN_FOR_PAIRING,
									 123456,
									 BONDING);
	if (ret == BLE_STATUS_SUCCESS) {
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d102      	bne.n	800068a <MX_BlueNRG_MS_Init+0x11a>
		printf("BLE Stack Initialized.\n");
 8000684:	4817      	ldr	r0, [pc, #92]	@ (80006e4 <MX_BlueNRG_MS_Init+0x174>)
 8000686:	f005 fdfb 	bl	8006280 <puts>
	}

	printf("SERVER: BLE Stack Initialized\n");
 800068a:	4817      	ldr	r0, [pc, #92]	@ (80006e8 <MX_BlueNRG_MS_Init+0x178>)
 800068c:	f005 fdf8 	bl	8006280 <puts>
	ret = Add_Sample_Service();
 8000690:	f000 f8a6 	bl	80007e0 <Add_Sample_Service>
 8000694:	4603      	mov	r3, r0
 8000696:	61fb      	str	r3, [r7, #28]

	if (ret == BLE_STATUS_SUCCESS){
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d103      	bne.n	80006a6 <MX_BlueNRG_MS_Init+0x136>
		printf("Service added successfully.\n");
 800069e:	4813      	ldr	r0, [pc, #76]	@ (80006ec <MX_BlueNRG_MS_Init+0x17c>)
 80006a0:	f005 fdee 	bl	8006280 <puts>
 80006a4:	e002      	b.n	80006ac <MX_BlueNRG_MS_Init+0x13c>
	} else {
		printf("Error while adding service.\n");
 80006a6:	4812      	ldr	r0, [pc, #72]	@ (80006f0 <MX_BlueNRG_MS_Init+0x180>)
 80006a8:	f005 fdea 	bl	8006280 <puts>
	}

	/* Set output power level */
	ret = aci_hal_set_tx_power_level(1,4);
 80006ac:	2104      	movs	r1, #4
 80006ae:	2001      	movs	r0, #1
 80006b0:	f004 ff2e 	bl	8005510 <aci_hal_set_tx_power_level>
 80006b4:	4603      	mov	r3, r0
 80006b6:	61fb      	str	r3, [r7, #28]

	/* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

	/* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	08006f58 	.word	0x08006f58
 80006c4:	20000000 	.word	0x20000000
 80006c8:	08000b11 	.word	0x08000b11
 80006cc:	08006e8c 	.word	0x08006e8c
 80006d0:	200000a4 	.word	0x200000a4
 80006d4:	08006ea0 	.word	0x08006ea0
 80006d8:	08006ec0 	.word	0x08006ec0
 80006dc:	08006ed4 	.word	0x08006ed4
 80006e0:	0001e240 	.word	0x0001e240
 80006e4:	08006ee8 	.word	0x08006ee8
 80006e8:	08006f00 	.word	0x08006f00
 80006ec:	08006f20 	.word	0x08006f20
 80006f0:	08006f3c 	.word	0x08006f3c

080006f4 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 80006f8:	f000 f812 	bl	8000720 <User_Process>
  hci_user_evt_proc();
 80006fc:	f005 fa3e 	bl	8005b7c <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}

08000704 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000708:	2101      	movs	r1, #1
 800070a:	2000      	movs	r0, #0
 800070c:	f002 f874 	bl	80027f8 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8000710:	2000      	movs	r0, #0
 8000712:	f002 f807 	bl	8002724 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 8000716:	2000      	movs	r0, #0
 8000718:	f002 f924 	bl	8002964 <BSP_COM_Init>
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}

08000720 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8000720:	b5b0      	push	{r4, r5, r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
  if (set_connectable)
 8000726:	4b21      	ldr	r3, [pc, #132]	@ (80007ac <User_Process+0x8c>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2b00      	cmp	r3, #0
 800072e:	d00b      	beq.n	8000748 <User_Process+0x28>
  {
    /* Establish connection with remote device */
    Make_Connection();
 8000730:	f000 f8c8 	bl	80008c4 <Make_Connection>
    set_connectable = FALSE;
 8000734:	4b1d      	ldr	r3, [pc, #116]	@ (80007ac <User_Process+0x8c>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
    user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 800073a:	2000      	movs	r0, #0
 800073c:	f002 f8b0 	bl	80028a0 <BSP_PB_GetState>
 8000740:	4603      	mov	r3, r0
 8000742:	b2da      	uxtb	r2, r3
 8000744:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <User_Process+0x90>)
 8000746:	701a      	strb	r2, [r3, #0]
  }

  /* Check if the User Button has been pushed */
  if (user_button_pressed)
 8000748:	4b1a      	ldr	r3, [pc, #104]	@ (80007b4 <User_Process+0x94>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	d027      	beq.n	80007a2 <User_Process+0x82>
  {
    /* Debouncing */
    HAL_Delay(50);
 8000752:	2032      	movs	r0, #50	@ 0x32
 8000754:	f002 fa4a 	bl	8002bec <HAL_Delay>

    /* Wait until the User Button is released */
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);
 8000758:	bf00      	nop
 800075a:	2000      	movs	r0, #0
 800075c:	f002 f8a0 	bl	80028a0 <BSP_PB_GetState>
 8000760:	4602      	mov	r2, r0
 8000762:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <User_Process+0x90>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b00      	cmp	r3, #0
 800076a:	bf0c      	ite	eq
 800076c:	2301      	moveq	r3, #1
 800076e:	2300      	movne	r3, #0
 8000770:	b2db      	uxtb	r3, r3
 8000772:	429a      	cmp	r2, r3
 8000774:	d0f1      	beq.n	800075a <User_Process+0x3a>

    /* Debouncing */
    HAL_Delay(50);
 8000776:	2032      	movs	r0, #50	@ 0x32
 8000778:	f002 fa38 	bl	8002bec <HAL_Delay>

    if (connected)
 800077c:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <User_Process+0x98>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d00b      	beq.n	800079c <User_Process+0x7c>
    {
      /* Send a toggle command to the remote device */
      uint8_t data[20] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J'};
 8000784:	4b0d      	ldr	r3, [pc, #52]	@ (80007bc <User_Process+0x9c>)
 8000786:	1d3c      	adds	r4, r7, #4
 8000788:	461d      	mov	r5, r3
 800078a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800078c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078e:	682b      	ldr	r3, [r5, #0]
 8000790:	6023      	str	r3, [r4, #0]
      sendData(data, sizeof(data));
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2114      	movs	r1, #20
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f8e4 	bl	8000964 <sendData>
                                * is called in main().
                                * E.g. it can be enabled for debugging. */
    }

    /* Reset the User Button flag */
    user_button_pressed = 0;
 800079c:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <User_Process+0x94>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
  }
}
 80007a2:	bf00      	nop
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bdb0      	pop	{r4, r5, r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000002 	.word	0x20000002
 80007b0:	20000000 	.word	0x20000000
 80007b4:	200000a5 	.word	0x200000a5
 80007b8:	200000a8 	.word	0x200000a8
 80007bc:	08006f60 	.word	0x08006f60

080007c0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 80007ca:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <BSP_PB_Callback+0x1c>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	701a      	strb	r2, [r3, #0]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	200000a5 	.word	0x200000a5

080007e0 <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b095      	sub	sp, #84	@ 0x54
 80007e4:	af06      	add	r7, sp, #24
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */

  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 80007e6:	4b31      	ldr	r3, [pc, #196]	@ (80008ac <Add_Sample_Service+0xcc>)
 80007e8:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80007ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 80007f2:	4b2f      	ldr	r3, [pc, #188]	@ (80008b0 <Add_Sample_Service+0xd0>)
 80007f4:	f107 0414 	add.w	r4, r7, #20
 80007f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 80007fe:	4b2d      	ldr	r3, [pc, #180]	@ (80008b4 <Add_Sample_Service+0xd4>)
 8000800:	1d3c      	adds	r4, r7, #4
 8000802:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000804:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 8000808:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800080c:	4b2a      	ldr	r3, [pc, #168]	@ (80008b8 <Add_Sample_Service+0xd8>)
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	2307      	movs	r3, #7
 8000812:	2201      	movs	r2, #1
 8000814:	2002      	movs	r0, #2
 8000816:	f004 fbed 	bl	8004ff4 <aci_gatt_add_serv>
 800081a:	4603      	mov	r3, r0
 800081c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000820:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000824:	2b00      	cmp	r3, #0
 8000826:	d136      	bne.n	8000896 <Add_Sample_Service+0xb6>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 8000828:	4b23      	ldr	r3, [pc, #140]	@ (80008b8 <Add_Sample_Service+0xd8>)
 800082a:	8818      	ldrh	r0, [r3, #0]
 800082c:	f107 0214 	add.w	r2, r7, #20
 8000830:	4b22      	ldr	r3, [pc, #136]	@ (80008bc <Add_Sample_Service+0xdc>)
 8000832:	9305      	str	r3, [sp, #20]
 8000834:	2301      	movs	r3, #1
 8000836:	9304      	str	r3, [sp, #16]
 8000838:	2310      	movs	r3, #16
 800083a:	9303      	str	r3, [sp, #12]
 800083c:	2300      	movs	r3, #0
 800083e:	9302      	str	r3, [sp, #8]
 8000840:	2300      	movs	r3, #0
 8000842:	9301      	str	r3, [sp, #4]
 8000844:	2310      	movs	r3, #16
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	2314      	movs	r3, #20
 800084a:	2102      	movs	r1, #2
 800084c:	f004 fc5b 	bl	8005106 <aci_gatt_add_char>
 8000850:	4603      	mov	r3, r0
 8000852:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                           16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000856:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800085a:	2b00      	cmp	r3, #0
 800085c:	d11d      	bne.n	800089a <Add_Sample_Service+0xba>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 800085e:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <Add_Sample_Service+0xd8>)
 8000860:	8818      	ldrh	r0, [r3, #0]
 8000862:	1d3a      	adds	r2, r7, #4
 8000864:	4b16      	ldr	r3, [pc, #88]	@ (80008c0 <Add_Sample_Service+0xe0>)
 8000866:	9305      	str	r3, [sp, #20]
 8000868:	2301      	movs	r3, #1
 800086a:	9304      	str	r3, [sp, #16]
 800086c:	2310      	movs	r3, #16
 800086e:	9303      	str	r3, [sp, #12]
 8000870:	2301      	movs	r3, #1
 8000872:	9302      	str	r3, [sp, #8]
 8000874:	2300      	movs	r3, #0
 8000876:	9301      	str	r3, [sp, #4]
 8000878:	230c      	movs	r3, #12
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	2314      	movs	r3, #20
 800087e:	2102      	movs	r1, #2
 8000880:	f004 fc41 	bl	8005106 <aci_gatt_add_char>
 8000884:	4603      	mov	r3, r0
 8000886:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                           16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800088a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800088e:	2b00      	cmp	r3, #0
 8000890:	d105      	bne.n	800089e <Add_Sample_Service+0xbe>

  PRINTF("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS;
 8000892:	2300      	movs	r3, #0
 8000894:	e005      	b.n	80008a2 <Add_Sample_Service+0xc2>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000896:	bf00      	nop
 8000898:	e002      	b.n	80008a0 <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800089a:	bf00      	nop
 800089c:	e000      	b.n	80008a0 <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800089e:	bf00      	nop

fail:
  PRINTF("Error while adding Sample Service.\n");
  return BLE_STATUS_ERROR ;
 80008a0:	2347      	movs	r3, #71	@ 0x47
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	373c      	adds	r7, #60	@ 0x3c
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd90      	pop	{r4, r7, pc}
 80008aa:	bf00      	nop
 80008ac:	08006f74 	.word	0x08006f74
 80008b0:	08006f84 	.word	0x08006f84
 80008b4:	08006f94 	.word	0x08006f94
 80008b8:	200000b8 	.word	0x200000b8
 80008bc:	200000ba 	.word	0x200000ba
 80008c0:	200000bc 	.word	0x200000bc

080008c4 <Make_Connection>:
 * @brief  Make the device connectable
 * @param  None
 * @retval None
 */
void Make_Connection(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	@ 0x30
 80008c8:	af08      	add	r7, sp, #32
	tBleStatus ret;

	const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'A','l','l','e','r','S','p','e','X'};
 80008ca:	4a12      	ldr	r2, [pc, #72]	@ (8000914 <Make_Connection+0x50>)
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80008d0:	c303      	stmia	r3!, {r0, r1}
 80008d2:	801a      	strh	r2, [r3, #0]

	/* disable scan response */
	hci_le_set_scan_resp_data(0,NULL);
 80008d4:	2100      	movs	r1, #0
 80008d6:	2000      	movs	r0, #0
 80008d8:	f004 fefb 	bl	80056d2 <hci_le_set_scan_resp_data>
	/*
	Advertising_Event_Type, Adv_Interval_Min, Adv_Interval_Max, Address_Type, Adv_Filter_Policy,
	Local_Name_Length, Local_Name, Service_Uuid_Length, Service_Uuid_List, Slave_Conn_Interval_Min,
	Slave_Conn_Interval_Max
	*/
	ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 80008dc:	2300      	movs	r3, #0
 80008de:	9306      	str	r3, [sp, #24]
 80008e0:	2300      	movs	r3, #0
 80008e2:	9305      	str	r3, [sp, #20]
 80008e4:	2300      	movs	r3, #0
 80008e6:	9304      	str	r3, [sp, #16]
 80008e8:	2300      	movs	r3, #0
 80008ea:	9303      	str	r3, [sp, #12]
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	9302      	str	r3, [sp, #8]
 80008f0:	230d      	movs	r3, #13
 80008f2:	9301      	str	r3, [sp, #4]
 80008f4:	2300      	movs	r3, #0
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	2300      	movs	r3, #0
 80008fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80008fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000902:	2000      	movs	r0, #0
 8000904:	f004 fa12 	bl	8004d2c <aci_gap_set_discoverable>
 8000908:	4603      	mov	r3, r0
 800090a:	73fb      	strb	r3, [r7, #15]
							   NO_WHITE_LIST_USE, 13, local_name, 0, NULL, 0, 0);
	PRINTF("%d\n",ret);
}
 800090c:	bf00      	nop
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	08006fa4 	.word	0x08006fa4

08000918 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	70fb      	strb	r3, [r7, #3]
  BSP_LED_Toggle(LED2);
 8000924:	2000      	movs	r0, #0
 8000926:	f001 ff0f 	bl	8002748 <BSP_LED_Toggle>

  for(int i = 0; i < Nb_bytes; i++) {
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	e009      	b.n	8000944 <receiveData+0x2c>
    printf("%c", data_buffer[i]);
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	4618      	mov	r0, r3
 800093a:	f005 fc43 	bl	80061c4 <putchar>
  for(int i = 0; i < Nb_bytes; i++) {
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	3301      	adds	r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	78fb      	ldrb	r3, [r7, #3]
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	429a      	cmp	r2, r3
 800094a:	dbf1      	blt.n	8000930 <receiveData+0x18>
  }
  fflush(stdout);
 800094c:	4b04      	ldr	r3, [pc, #16]	@ (8000960 <receiveData+0x48>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	4618      	mov	r0, r3
 8000954:	f005 fb4e 	bl	8005ff4 <fflush>
}
 8000958:	bf00      	nop
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000038 	.word	0x20000038

08000964 <sendData>:
 * @param  data_buffer : pointer to data to be sent
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af02      	add	r7, sp, #8
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	460b      	mov	r3, r1
 800096e:	70fb      	strb	r3, [r7, #3]
  if(BLE_Role == SERVER) {
 8000970:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <sendData+0x4c>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d10b      	bne.n	8000990 <sendData+0x2c>
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);
 8000978:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <sendData+0x50>)
 800097a:	8818      	ldrh	r0, [r3, #0]
 800097c:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <sendData+0x54>)
 800097e:	8819      	ldrh	r1, [r3, #0]
 8000980:	78fa      	ldrb	r2, [r7, #3]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	4613      	mov	r3, r2
 8000988:	2200      	movs	r2, #0
 800098a:	f004 fc87 	bl	800529c <aci_gatt_update_char_value>
  }
  else {
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
  }
}
 800098e:	e00a      	b.n	80009a6 <sendData+0x42>
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 8000990:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <sendData+0x58>)
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	b298      	uxth	r0, r3
 8000996:	4b0a      	ldr	r3, [pc, #40]	@ (80009c0 <sendData+0x5c>)
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	3301      	adds	r3, #1
 800099c:	b299      	uxth	r1, r3
 800099e:	78fa      	ldrb	r2, [r7, #3]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f004 fd0b 	bl	80053bc <aci_gatt_write_without_response>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000001 	.word	0x20000001
 80009b4:	200000b8 	.word	0x200000b8
 80009b8:	200000ba 	.word	0x200000ba
 80009bc:	200000ac 	.word	0x200000ac
 80009c0:	200000b6 	.word	0x200000b6

080009c4 <Attribute_Modified_CB>:
 * @param  data_length : size of the modified attribute data
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	603a      	str	r2, [r7, #0]
 80009ce:	80fb      	strh	r3, [r7, #6]
 80009d0:	460b      	mov	r3, r1
 80009d2:	717b      	strb	r3, [r7, #5]
  if(handle == RXCharHandle + 1){
 80009d4:	88fa      	ldrh	r2, [r7, #6]
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <Attribute_Modified_CB+0x4c>)
 80009d8:	881b      	ldrh	r3, [r3, #0]
 80009da:	3301      	adds	r3, #1
 80009dc:	429a      	cmp	r2, r3
 80009de:	d105      	bne.n	80009ec <Attribute_Modified_CB+0x28>
    receiveData(att_data, data_length);
 80009e0:	797b      	ldrb	r3, [r7, #5]
 80009e2:	4619      	mov	r1, r3
 80009e4:	6838      	ldr	r0, [r7, #0]
 80009e6:	f7ff ff97 	bl	8000918 <receiveData>
  } else if (handle == TXCharHandle + 2) {
    if(att_data[0] == 0x01)
      notification_enabled = TRUE;
  }
}
 80009ea:	e00c      	b.n	8000a06 <Attribute_Modified_CB+0x42>
  } else if (handle == TXCharHandle + 2) {
 80009ec:	88fa      	ldrh	r2, [r7, #6]
 80009ee:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <Attribute_Modified_CB+0x50>)
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	3302      	adds	r3, #2
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d106      	bne.n	8000a06 <Attribute_Modified_CB+0x42>
    if(att_data[0] == 0x01)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d102      	bne.n	8000a06 <Attribute_Modified_CB+0x42>
      notification_enabled = TRUE;
 8000a00:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <Attribute_Modified_CB+0x54>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	701a      	strb	r2, [r3, #0]
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200000bc 	.word	0x200000bc
 8000a14:	200000ba 	.word	0x200000ba
 8000a18:	200000ae 	.word	0x200000ae

08000a1c <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	460b      	mov	r3, r1
 8000a26:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8000a28:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <GAP_ConnectionComplete_CB+0x54>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8000a2e:	4a11      	ldr	r2, [pc, #68]	@ (8000a74 <GAP_ConnectionComplete_CB+0x58>)
 8000a30:	887b      	ldrh	r3, [r7, #2]
 8000a32:	8013      	strh	r3, [r2, #0]

  printf("Connected to device:");
 8000a34:	4810      	ldr	r0, [pc, #64]	@ (8000a78 <GAP_ConnectionComplete_CB+0x5c>)
 8000a36:	f005 fbb3 	bl	80061a0 <iprintf>
  for(int i = 5; i > 0; i--){
 8000a3a:	2305      	movs	r3, #5
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	e00a      	b.n	8000a56 <GAP_ConnectionComplete_CB+0x3a>
    printf("%02X-", addr[i]);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480c      	ldr	r0, [pc, #48]	@ (8000a7c <GAP_ConnectionComplete_CB+0x60>)
 8000a4c:	f005 fba8 	bl	80061a0 <iprintf>
  for(int i = 5; i > 0; i--){
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	dcf1      	bgt.n	8000a40 <GAP_ConnectionComplete_CB+0x24>
  }
  printf("%02X\n", addr[0]);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4619      	mov	r1, r3
 8000a62:	4807      	ldr	r0, [pc, #28]	@ (8000a80 <GAP_ConnectionComplete_CB+0x64>)
 8000a64:	f005 fb9c 	bl	80061a0 <iprintf>
}
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200000a8 	.word	0x200000a8
 8000a74:	200000ac 	.word	0x200000ac
 8000a78:	08006fb0 	.word	0x08006fb0
 8000a7c:	08006fc8 	.word	0x08006fc8
 8000a80:	08006fd0 	.word	0x08006fd0

08000a84 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  connected = FALSE;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <GAP_DisconnectionComplete_CB+0x38>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]

  printf("Disconnected\n");
 8000a8e:	480c      	ldr	r0, [pc, #48]	@ (8000ac0 <GAP_DisconnectionComplete_CB+0x3c>)
 8000a90:	f005 fbf6 	bl	8006280 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8000a94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac4 <GAP_DisconnectionComplete_CB+0x40>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac8 <GAP_DisconnectionComplete_CB+0x44>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
  start_read_tx_char_handle = FALSE;
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8000acc <GAP_DisconnectionComplete_CB+0x48>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
  start_read_rx_char_handle = FALSE;
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad0 <GAP_DisconnectionComplete_CB+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	701a      	strb	r2, [r3, #0]
  end_read_tx_char_handle = FALSE;
 8000aac:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <GAP_DisconnectionComplete_CB+0x50>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
  end_read_rx_char_handle = FALSE;
 8000ab2:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <GAP_DisconnectionComplete_CB+0x54>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200000a8 	.word	0x200000a8
 8000ac0:	08006fd8 	.word	0x08006fd8
 8000ac4:	20000002 	.word	0x20000002
 8000ac8:	200000ae 	.word	0x200000ae
 8000acc:	200000af 	.word	0x200000af
 8000ad0:	200000b0 	.word	0x200000b0
 8000ad4:	200000b1 	.word	0x200000b1
 8000ad8:	200000b2 	.word	0x200000b2

08000adc <GATT_Notification_CB>:
 * @param  attr_len    Length of attribute value in the notification
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	603a      	str	r2, [r7, #0]
 8000ae6:	80fb      	strh	r3, [r7, #6]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	717b      	strb	r3, [r7, #5]
  if (attr_handle == tx_handle+1) {
 8000aec:	88fa      	ldrh	r2, [r7, #6]
 8000aee:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <GATT_Notification_CB+0x30>)
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	3301      	adds	r3, #1
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d104      	bne.n	8000b02 <GATT_Notification_CB+0x26>
    receiveData(attr_value, attr_len);
 8000af8:	797b      	ldrb	r3, [r7, #5]
 8000afa:	4619      	mov	r1, r3
 8000afc:	6838      	ldr	r0, [r7, #0]
 8000afe:	f7ff ff0b 	bl	8000918 <receiveData>
  }
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200000b4 	.word	0x200000b4

08000b10 <user_notify>:
 *         parsed.
 * @param  pData  Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08c      	sub	sp, #48	@ 0x30
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8000b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b1e:	3301      	adds	r3, #1
 8000b20:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(hci_pckt->type != HCI_EVENT_PKT)
 8000b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	f040 80e2 	bne.w	8000cf0 <user_notify+0x1e0>
    return;

  switch(event_pckt->evt){
 8000b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2bff      	cmp	r3, #255	@ 0xff
 8000b32:	d021      	beq.n	8000b78 <user_notify+0x68>
 8000b34:	2bff      	cmp	r3, #255	@ 0xff
 8000b36:	f300 80e0 	bgt.w	8000cfa <user_notify+0x1ea>
 8000b3a:	2b05      	cmp	r3, #5
 8000b3c:	d002      	beq.n	8000b44 <user_notify+0x34>
 8000b3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8000b40:	d003      	beq.n	8000b4a <user_notify+0x3a>
 8000b42:	e0da      	b.n	8000cfa <user_notify+0x1ea>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8000b44:	f7ff ff9e 	bl	8000a84 <GAP_DisconnectionComplete_CB>
    }
    break;
 8000b48:	e0d7      	b.n	8000cfa <user_notify+0x1ea>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8000b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b4c:	3302      	adds	r3, #2
 8000b4e:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	f040 80cd 	bne.w	8000cf4 <user_notify+0x1e4>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	1d5a      	adds	r2, r3, #5
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4610      	mov	r0, r2
 8000b70:	f7ff ff54 	bl	8000a1c <GAP_ConnectionComplete_CB>
        }
        break;
 8000b74:	bf00      	nop
      }
    }
    break;
 8000b76:	e0bd      	b.n	8000cf4 <user_notify+0x1e4>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8000b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b7a:	3302      	adds	r3, #2
 8000b7c:	627b      	str	r3, [r7, #36]	@ 0x24
      switch(blue_evt->ecode){
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 8000b88:	2b11      	cmp	r3, #17
 8000b8a:	f200 80b5 	bhi.w	8000cf8 <user_notify+0x1e8>
 8000b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b94 <user_notify+0x84>)
 8000b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b94:	08000bdd 	.word	0x08000bdd
 8000b98:	08000cf9 	.word	0x08000cf9
 8000b9c:	08000cf9 	.word	0x08000cf9
 8000ba0:	08000cf9 	.word	0x08000cf9
 8000ba4:	08000cf9 	.word	0x08000cf9
 8000ba8:	08000cf9 	.word	0x08000cf9
 8000bac:	08000cf9 	.word	0x08000cf9
 8000bb0:	08000cf9 	.word	0x08000cf9
 8000bb4:	08000cf9 	.word	0x08000cf9
 8000bb8:	08000cf9 	.word	0x08000cf9
 8000bbc:	08000cf9 	.word	0x08000cf9
 8000bc0:	08000cf9 	.word	0x08000cf9
 8000bc4:	08000cf9 	.word	0x08000cf9
 8000bc8:	08000cf9 	.word	0x08000cf9
 8000bcc:	08000c1d 	.word	0x08000c1d
 8000bd0:	08000ca9 	.word	0x08000ca9
 8000bd4:	08000cf9 	.word	0x08000cf9
 8000bd8:	08000c3f 	.word	0x08000c3f

      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          if (bnrg_expansion_board == IDB05A1) {
 8000bdc:	4b48      	ldr	r3, [pc, #288]	@ (8000d00 <user_notify+0x1f0>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d10d      	bne.n	8000c00 <user_notify+0xf0>
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 8000be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be6:	3302      	adds	r3, #2
 8000be8:	617b      	str	r3, [r7, #20]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	885b      	ldrh	r3, [r3, #2]
 8000bee:	b298      	uxth	r0, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	7919      	ldrb	r1, [r3, #4]
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	3307      	adds	r3, #7
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	f7ff fee3 	bl	80009c4 <Attribute_Modified_CB>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
          }

        }
        break;
 8000bfe:	e076      	b.n	8000cee <user_notify+0x1de>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
 8000c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c02:	3302      	adds	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	885b      	ldrh	r3, [r3, #2]
 8000c0a:	b298      	uxth	r0, r3
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	7919      	ldrb	r1, [r3, #4]
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	3305      	adds	r3, #5
 8000c14:	461a      	mov	r2, r3
 8000c16:	f7ff fed5 	bl	80009c4 <Attribute_Modified_CB>
        break;
 8000c1a:	e068      	b.n	8000cee <user_notify+0x1de>
      case EVT_BLUE_GATT_NOTIFICATION:
        {
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c1e:	3302      	adds	r3, #2
 8000c20:	61fb      	str	r3, [r7, #28]
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000c28:	b298      	uxth	r0, r3
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	789b      	ldrb	r3, [r3, #2]
 8000c2e:	3b02      	subs	r3, #2
 8000c30:	b2d9      	uxtb	r1, r3
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3305      	adds	r3, #5
 8000c36:	461a      	mov	r2, r3
 8000c38:	f7ff ff50 	bl	8000adc <GATT_Notification_CB>
        }
        break;
 8000c3c:	e057      	b.n	8000cee <user_notify+0x1de>
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 8000c3e:	4b31      	ldr	r3, [pc, #196]	@ (8000d04 <user_notify+0x1f4>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d150      	bne.n	8000ce8 <user_notify+0x1d8>
          PRINTF("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");

          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
 8000c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c48:	3302      	adds	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8000c4c:	4b2e      	ldr	r3, [pc, #184]	@ (8000d08 <user_notify+0x1f8>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d011      	beq.n	8000c7a <user_notify+0x16a>
 8000c56:	4b2d      	ldr	r3, [pc, #180]	@ (8000d0c <user_notify+0x1fc>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d10c      	bne.n	8000c7a <user_notify+0x16a>
          {
            tx_handle = resp->attr_handle;
 8000c60:	6a3b      	ldr	r3, [r7, #32]
 8000c62:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	4b29      	ldr	r3, [pc, #164]	@ (8000d10 <user_notify+0x200>)
 8000c6a:	801a      	strh	r2, [r3, #0]
            printf("TX Char Handle %04X\n", tx_handle);
 8000c6c:	4b28      	ldr	r3, [pc, #160]	@ (8000d10 <user_notify+0x200>)
 8000c6e:	881b      	ldrh	r3, [r3, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	4828      	ldr	r0, [pc, #160]	@ (8000d14 <user_notify+0x204>)
 8000c74:	f005 fa94 	bl	80061a0 <iprintf>
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
          }
        }
        break;
 8000c78:	e036      	b.n	8000ce8 <user_notify+0x1d8>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8000c7a:	4b27      	ldr	r3, [pc, #156]	@ (8000d18 <user_notify+0x208>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d031      	beq.n	8000ce8 <user_notify+0x1d8>
 8000c84:	4b25      	ldr	r3, [pc, #148]	@ (8000d1c <user_notify+0x20c>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d12c      	bne.n	8000ce8 <user_notify+0x1d8>
            rx_handle = resp->attr_handle;
 8000c8e:	6a3b      	ldr	r3, [r7, #32]
 8000c90:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	4b22      	ldr	r3, [pc, #136]	@ (8000d20 <user_notify+0x210>)
 8000c98:	801a      	strh	r2, [r3, #0]
            printf("RX Char Handle %04X\n", rx_handle);
 8000c9a:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <user_notify+0x210>)
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4820      	ldr	r0, [pc, #128]	@ (8000d24 <user_notify+0x214>)
 8000ca2:	f005 fa7d 	bl	80061a0 <iprintf>
        break;
 8000ca6:	e01f      	b.n	8000ce8 <user_notify+0x1d8>

      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
        if(BLE_Role == CLIENT) {
 8000ca8:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <user_notify+0x1f4>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d11d      	bne.n	8000cec <user_notify+0x1dc>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8000cb0:	4b15      	ldr	r3, [pc, #84]	@ (8000d08 <user_notify+0x1f8>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d008      	beq.n	8000ccc <user_notify+0x1bc>
 8000cba:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <user_notify+0x1fc>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d103      	bne.n	8000ccc <user_notify+0x1bc>
          {
            end_read_tx_char_handle = TRUE;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <user_notify+0x1fc>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	701a      	strb	r2, [r3, #0]
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            end_read_rx_char_handle = TRUE;
          }
        }
        break;
 8000cca:	e00f      	b.n	8000cec <user_notify+0x1dc>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8000ccc:	4b12      	ldr	r3, [pc, #72]	@ (8000d18 <user_notify+0x208>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00a      	beq.n	8000cec <user_notify+0x1dc>
 8000cd6:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <user_notify+0x20c>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d105      	bne.n	8000cec <user_notify+0x1dc>
            end_read_rx_char_handle = TRUE;
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <user_notify+0x20c>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]
        break;
 8000ce6:	e001      	b.n	8000cec <user_notify+0x1dc>
        break;
 8000ce8:	bf00      	nop
 8000cea:	e005      	b.n	8000cf8 <user_notify+0x1e8>
        break;
 8000cec:	bf00      	nop
      }
    }
    break;
 8000cee:	e003      	b.n	8000cf8 <user_notify+0x1e8>
    return;
 8000cf0:	bf00      	nop
 8000cf2:	e002      	b.n	8000cfa <user_notify+0x1ea>
    break;
 8000cf4:	bf00      	nop
 8000cf6:	e000      	b.n	8000cfa <user_notify+0x1ea>
    break;
 8000cf8:	bf00      	nop
  }
}
 8000cfa:	3730      	adds	r7, #48	@ 0x30
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200000a4 	.word	0x200000a4
 8000d04:	20000001 	.word	0x20000001
 8000d08:	200000af 	.word	0x200000af
 8000d0c:	200000b1 	.word	0x200000b1
 8000d10:	200000b4 	.word	0x200000b4
 8000d14:	08006fe8 	.word	0x08006fe8
 8000d18:	200000b0 	.word	0x200000b0
 8000d1c:	200000b2 	.word	0x200000b2
 8000d20:	200000b6 	.word	0x200000b6
 8000d24:	08007000 	.word	0x08007000

08000d28 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	4b1e      	ldr	r3, [pc, #120]	@ (8000db0 <HCI_TL_SPI_Init+0x88>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d38:	4a1d      	ldr	r2, [pc, #116]	@ (8000db0 <HCI_TL_SPI_Init+0x88>)
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d40:	4b1b      	ldr	r3, [pc, #108]	@ (8000db0 <HCI_TL_SPI_Init+0x88>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d50:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8000d5a:	f107 030c 	add.w	r3, r7, #12
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4814      	ldr	r0, [pc, #80]	@ (8000db4 <HCI_TL_SPI_Init+0x8c>)
 8000d62:	f002 f8cb 	bl	8002efc <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8000d66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	480d      	ldr	r0, [pc, #52]	@ (8000db4 <HCI_TL_SPI_Init+0x8c>)
 8000d80:	f002 f8bc 	bl	8002efc <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8000d84:	2302      	movs	r3, #2
 8000d86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4806      	ldr	r0, [pc, #24]	@ (8000db4 <HCI_TL_SPI_Init+0x8c>)
 8000d9c:	f002 f8ae 	bl	8002efc <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 8000da0:	f001 fa4e 	bl	8002240 <BSP_SPI1_Init>
 8000da4:	4603      	mov	r3, r0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3720      	adds	r7, #32
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020000 	.word	0x40020000

08000db8 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	4807      	ldr	r0, [pc, #28]	@ (8000ddc <HCI_TL_SPI_DeInit+0x24>)
 8000dc0:	f002 fa20 	bl	8003204 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	4805      	ldr	r0, [pc, #20]	@ (8000ddc <HCI_TL_SPI_DeInit+0x24>)
 8000dc8:	f002 fa1c 	bl	8003204 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8000dcc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dd0:	4802      	ldr	r0, [pc, #8]	@ (8000ddc <HCI_TL_SPI_DeInit+0x24>)
 8000dd2:	f002 fa17 	bl	8003204 <HAL_GPIO_DeInit>
  return 0;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40020000 	.word	0x40020000

08000de0 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	2102      	movs	r1, #2
 8000de8:	480b      	ldr	r0, [pc, #44]	@ (8000e18 <HCI_TL_SPI_Reset+0x38>)
 8000dea:	f002 fb07 	bl	80033fc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000df4:	4808      	ldr	r0, [pc, #32]	@ (8000e18 <HCI_TL_SPI_Reset+0x38>)
 8000df6:	f002 fb01 	bl	80033fc <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000dfa:	2005      	movs	r0, #5
 8000dfc:	f001 fef6 	bl	8002bec <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e06:	4804      	ldr	r0, [pc, #16]	@ (8000e18 <HCI_TL_SPI_Reset+0x38>)
 8000e08:	f002 faf8 	bl	80033fc <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000e0c:	2005      	movs	r0, #5
 8000e0e:	f001 feed 	bl	8002bec <HAL_Delay>
  return 0;
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40020000 	.word	0x40020000

08000e1c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8000e2c:	23ff      	movs	r3, #255	@ 0xff
 8000e2e:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8000e30:	4a25      	ldr	r2, [pc, #148]	@ (8000ec8 <HCI_TL_SPI_Receive+0xac>)
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e3a:	6018      	str	r0, [r3, #0]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2102      	movs	r1, #2
 8000e44:	4821      	ldr	r0, [pc, #132]	@ (8000ecc <HCI_TL_SPI_Receive+0xb0>)
 8000e46:	f002 fad9 	bl	80033fc <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000e4a:	f107 010c 	add.w	r1, r7, #12
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	2205      	movs	r2, #5
 8000e54:	4618      	mov	r0, r3
 8000e56:	f001 fa23 	bl	80022a0 <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 8000e5a:	7b3b      	ldrb	r3, [r7, #12]
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d129      	bne.n	8000eb4 <HCI_TL_SPI_Receive+0x98>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8000e60:	7c3b      	ldrb	r3, [r7, #16]
 8000e62:	021b      	lsls	r3, r3, #8
 8000e64:	b21a      	sxth	r2, r3
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	b21b      	sxth	r3, r3
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	b21b      	sxth	r3, r3
 8000e6e:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8000e70:	8bfb      	ldrh	r3, [r7, #30]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d01e      	beq.n	8000eb4 <HCI_TL_SPI_Receive+0x98>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8000e76:	8bfa      	ldrh	r2, [r7, #30]
 8000e78:	887b      	ldrh	r3, [r7, #2]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d901      	bls.n	8000e82 <HCI_TL_SPI_Receive+0x66>
        byte_count = size;
 8000e7e:	887b      	ldrh	r3, [r7, #2]
 8000e80:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	777b      	strb	r3, [r7, #29]
 8000e86:	e010      	b.n	8000eaa <HCI_TL_SPI_Receive+0x8e>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8000e88:	f107 011b 	add.w	r1, r7, #27
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	2201      	movs	r2, #1
 8000e92:	4618      	mov	r0, r3
 8000e94:	f001 fa04 	bl	80022a0 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8000e98:	7f7b      	ldrb	r3, [r7, #29]
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	7efa      	ldrb	r2, [r7, #27]
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8000ea4:	7f7b      	ldrb	r3, [r7, #29]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	777b      	strb	r3, [r7, #29]
 8000eaa:	7f7b      	ldrb	r3, [r7, #29]
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	8bfa      	ldrh	r2, [r7, #30]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d8e9      	bhi.n	8000e88 <HCI_TL_SPI_Receive+0x6c>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	4804      	ldr	r0, [pc, #16]	@ (8000ecc <HCI_TL_SPI_Receive+0xb0>)
 8000eba:	f002 fa9f 	bl	80033fc <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8000ebe:	7f7b      	ldrb	r3, [r7, #29]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3720      	adds	r7, #32
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	08007018 	.word	0x08007018
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8000edc:	4a23      	ldr	r2, [pc, #140]	@ (8000f6c <HCI_TL_SPI_Send+0x9c>)
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ee6:	6018      	str	r0, [r3, #0]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8000eec:	f001 fe72 	bl	8002bd4 <HAL_GetTick>
 8000ef0:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2102      	movs	r1, #2
 8000efa:	481d      	ldr	r0, [pc, #116]	@ (8000f70 <HCI_TL_SPI_Send+0xa0>)
 8000efc:	f002 fa7e 	bl	80033fc <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000f00:	f107 0108 	add.w	r1, r7, #8
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	2205      	movs	r2, #5
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 f9c8 	bl	80022a0 <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 8000f10:	7a3b      	ldrb	r3, [r7, #8]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d10f      	bne.n	8000f36 <HCI_TL_SPI_Send+0x66>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8000f16:	7a7b      	ldrb	r3, [r7, #9]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	887b      	ldrh	r3, [r7, #2]
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d806      	bhi.n	8000f2e <HCI_TL_SPI_Send+0x5e>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8000f20:	887b      	ldrh	r3, [r7, #2]
 8000f22:	461a      	mov	r2, r3
 8000f24:	4913      	ldr	r1, [pc, #76]	@ (8000f74 <HCI_TL_SPI_Send+0xa4>)
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f001 f9ba 	bl	80022a0 <BSP_SPI1_SendRecv>
 8000f2c:	e006      	b.n	8000f3c <HCI_TL_SPI_Send+0x6c>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8000f2e:	f06f 0301 	mvn.w	r3, #1
 8000f32:	61fb      	str	r3, [r7, #28]
 8000f34:	e002      	b.n	8000f3c <HCI_TL_SPI_Send+0x6c>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2102      	movs	r1, #2
 8000f40:	480b      	ldr	r0, [pc, #44]	@ (8000f70 <HCI_TL_SPI_Send+0xa0>)
 8000f42:	f002 fa5b 	bl	80033fc <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8000f46:	f001 fe45 	bl	8002bd4 <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d903      	bls.n	8000f5c <HCI_TL_SPI_Send+0x8c>
    {
      result = -3;
 8000f54:	f06f 0302 	mvn.w	r3, #2
 8000f58:	61fb      	str	r3, [r7, #28]
      break;
 8000f5a:	e002      	b.n	8000f62 <HCI_TL_SPI_Send+0x92>
    }
  } while(result < 0);
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	dbc7      	blt.n	8000ef2 <HCI_TL_SPI_Send+0x22>

  return result;
 8000f62:	69fb      	ldr	r3, [r7, #28]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	08007020 	.word	0x08007020
 8000f70:	40020000 	.word	0x40020000
 8000f74:	200000c8 	.word	0x200000c8

08000f78 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	4805      	ldr	r0, [pc, #20]	@ (8000f94 <IsDataAvailable+0x1c>)
 8000f80:	f002 fa24 	bl	80033cc <HAL_GPIO_ReadPin>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	bf0c      	ite	eq
 8000f8a:	2301      	moveq	r3, #1
 8000f8c:	2300      	movne	r3, #0
 8000f8e:	b2db      	uxtb	r3, r3
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40020000 	.word	0x40020000

08000f98 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8000f9e:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <hci_tl_lowlevel_init+0x54>)
 8000fa0:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8000fa2:	4b13      	ldr	r3, [pc, #76]	@ (8000ff0 <hci_tl_lowlevel_init+0x58>)
 8000fa4:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	@ (8000ff4 <hci_tl_lowlevel_init+0x5c>)
 8000fa8:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8000faa:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <hci_tl_lowlevel_init+0x60>)
 8000fac:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8000fae:	4b13      	ldr	r3, [pc, #76]	@ (8000ffc <hci_tl_lowlevel_init+0x64>)
 8000fb0:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8000fb2:	4b13      	ldr	r3, [pc, #76]	@ (8001000 <hci_tl_lowlevel_init+0x68>)
 8000fb4:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f004 fca7 	bl	800590c <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8000fbe:	f04f 61c0 	mov.w	r1, #100663296	@ 0x6000000
 8000fc2:	4810      	ldr	r0, [pc, #64]	@ (8001004 <hci_tl_lowlevel_init+0x6c>)
 8000fc4:	f001 ff61 	bl	8002e8a <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000fc8:	4a0f      	ldr	r2, [pc, #60]	@ (8001008 <hci_tl_lowlevel_init+0x70>)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	480d      	ldr	r0, [pc, #52]	@ (8001004 <hci_tl_lowlevel_init+0x6c>)
 8000fce:	f001 ff42 	bl	8002e56 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2006      	movs	r0, #6
 8000fd8:	f001 ff07 	bl	8002dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000fdc:	2006      	movs	r0, #6
 8000fde:	f001 ff20 	bl	8002e22 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8000fe2:	bf00      	nop
 8000fe4:	3720      	adds	r7, #32
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	08000d29 	.word	0x08000d29
 8000ff0:	08000db9 	.word	0x08000db9
 8000ff4:	08000ed1 	.word	0x08000ed1
 8000ff8:	08000e1d 	.word	0x08000e1d
 8000ffc:	08000de1 	.word	0x08000de1
 8001000:	080022e1 	.word	0x080022e1
 8001004:	200000c0 	.word	0x200000c0
 8001008:	0800100d 	.word	0x0800100d

0800100c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001010:	e005      	b.n	800101e <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001012:	2000      	movs	r0, #0
 8001014:	f004 fdde 	bl	8005bd4 <hci_notify_asynch_evt>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d105      	bne.n	800102a <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 800101e:	f7ff ffab 	bl	8000f78 <IsDataAvailable>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1f4      	bne.n	8001012 <hci_tl_lowlevel_isr+0x6>
 8001028:	e000      	b.n	800102c <hci_tl_lowlevel_isr+0x20>
    {
      return;
 800102a:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 800102c:	bd80      	pop	{r7, pc}

0800102e <AS7421_readRegister>:
static void AS7421_writeRegisters(uint8_t startAddr, uint8_t bufferSize, uint8_t *val);
static uint16_t byteSwap16(uint16_t value);

//Reads from a given location from the AS7421
static uint8_t AS7421_readRegister(uint8_t addr)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	71fb      	strb	r3, [r7, #7]
	char data = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]
	I2C1_byteRead(AS7421_ADDR, addr, &data);
 800103c:	f107 020f 	add.w	r2, r7, #15
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	4619      	mov	r1, r3
 8001044:	2064      	movs	r0, #100	@ 0x64
 8001046:	f000 fdd7 	bl	8001bf8 <I2C1_byteRead>
	return data;
 800104a:	7bfb      	ldrb	r3, [r7, #15]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <AS7421_writeRegister>:
	I2C1_burstRead(AS7421_ADDR, addr, bufferSize, (char *)data);
}

//Write a value to a given location on the AS7421
static void AS7421_writeRegister(uint8_t addr, uint8_t val)
{
 8001054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001058:	b087      	sub	sp, #28
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	460a      	mov	r2, r1
 8001060:	71fb      	strb	r3, [r7, #7]
 8001062:	4613      	mov	r3, r2
 8001064:	71bb      	strb	r3, [r7, #6]
 8001066:	466b      	mov	r3, sp
 8001068:	461e      	mov	r6, r3
	uint8_t bufferSize = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	75fb      	strb	r3, [r7, #23]
	char data[bufferSize];
 800106e:	7df9      	ldrb	r1, [r7, #23]
 8001070:	460b      	mov	r3, r1
 8001072:	3b01      	subs	r3, #1
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	b2cb      	uxtb	r3, r1
 8001078:	2200      	movs	r2, #0
 800107a:	4698      	mov	r8, r3
 800107c:	4691      	mov	r9, r2
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	f04f 0300 	mov.w	r3, #0
 8001086:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800108a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800108e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001092:	b2cb      	uxtb	r3, r1
 8001094:	2200      	movs	r2, #0
 8001096:	461c      	mov	r4, r3
 8001098:	4615      	mov	r5, r2
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	f04f 0300 	mov.w	r3, #0
 80010a2:	00eb      	lsls	r3, r5, #3
 80010a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80010a8:	00e2      	lsls	r2, r4, #3
 80010aa:	460b      	mov	r3, r1
 80010ac:	3307      	adds	r3, #7
 80010ae:	08db      	lsrs	r3, r3, #3
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	ebad 0d03 	sub.w	sp, sp, r3
 80010b6:	466b      	mov	r3, sp
 80010b8:	3300      	adds	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]

	data[0] = val;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	79ba      	ldrb	r2, [r7, #6]
 80010c0:	701a      	strb	r2, [r3, #0]
	I2C1_burstWrite(AS7421_ADDR, addr, bufferSize, data);
 80010c2:	7dfa      	ldrb	r2, [r7, #23]
 80010c4:	79f9      	ldrb	r1, [r7, #7]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2064      	movs	r0, #100	@ 0x64
 80010ca:	f000 fe0f 	bl	8001cec <I2C1_burstWrite>
 80010ce:	46b5      	mov	sp, r6
}
 80010d0:	bf00      	nop
 80010d2:	371c      	adds	r7, #28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080010da <AS7421_writeRegisters>:

//Write values to consecutive register locations on the AS7421
static void AS7421_writeRegisters(uint8_t startAddr, uint8_t bufferSize, uint8_t *val)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	603a      	str	r2, [r7, #0]
 80010e4:	71fb      	strb	r3, [r7, #7]
 80010e6:	460b      	mov	r3, r1
 80010e8:	71bb      	strb	r3, [r7, #6]
//
//	for (int i = 0; i < bufferSize; i++)
//	{
//		data[i] = val[i];
//	}
	I2C1_burstWrite(AS7421_ADDR, startAddr, bufferSize, (char *)val);
 80010ea:	79ba      	ldrb	r2, [r7, #6]
 80010ec:	79f9      	ldrb	r1, [r7, #7]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	2064      	movs	r0, #100	@ 0x64
 80010f2:	f000 fdfb 	bl	8001cec <I2C1_burstWrite>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <byteSwap16>:

static uint16_t byteSwap16(uint16_t value) {
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	80fb      	strh	r3, [r7, #6]
    return (value >> 8) | (value << 8);
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	0a1b      	lsrs	r3, r3, #8
 800110c:	b29b      	uxth	r3, r3
 800110e:	b21a      	sxth	r2, r3
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	b21b      	sxth	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b21b      	sxth	r3, r3
 800111a:	b29b      	uxth	r3, r3
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <fpu_enable>:

// Enable FPU
void fpu_enable()
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
	/*Enable Floating Point Unit: Enable CP10 and CP11 full access*/
	SCB->CPACR |= (1U<<20);
 800112c:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <fpu_enable+0x50>)
 800112e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001132:	4a11      	ldr	r2, [pc, #68]	@ (8001178 <fpu_enable+0x50>)
 8001134:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001138:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1U<<21);
 800113c:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <fpu_enable+0x50>)
 800113e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001142:	4a0d      	ldr	r2, [pc, #52]	@ (8001178 <fpu_enable+0x50>)
 8001144:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001148:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1U<<22);
 800114c:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <fpu_enable+0x50>)
 800114e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001152:	4a09      	ldr	r2, [pc, #36]	@ (8001178 <fpu_enable+0x50>)
 8001154:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001158:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1U<<23);
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <fpu_enable+0x50>)
 800115e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001162:	4a05      	ldr	r2, [pc, #20]	@ (8001178 <fpu_enable+0x50>)
 8001164:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001168:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <isConnected>:

//Returns TRUE if the device sends an ACK indicating it is connected
bool isConnected()
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
	uint32_t timeout = 1000; //Timeout to connect set to 1000ms
 8001182:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001186:	60fb      	str	r3, [r7, #12]
	unsigned long startTime = HAL_GetTick();
 8001188:	f001 fd24 	bl	8002bd4 <HAL_GetTick>
 800118c:	60b8      	str	r0, [r7, #8]

	while ((HAL_GetTick() - startTime) < timeout)
 800118e:	e035      	b.n	80011fc <isConnected+0x80>
	{
		volatile int tmp;

		/* Wait until bus not busy */
		while (I2C1->SR2 & (SR2_BUSY)){}
 8001190:	bf00      	nop
 8001192:	4b21      	ldr	r3, [pc, #132]	@ (8001218 <isConnected+0x9c>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f9      	bne.n	8001192 <isConnected+0x16>

		/* Generate start condition */
		I2C1->CR1 |= CR1_START;
 800119e:	4b1e      	ldr	r3, [pc, #120]	@ (8001218 <isConnected+0x9c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001218 <isConnected+0x9c>)
 80011a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011a8:	6013      	str	r3, [r2, #0]

		/* Wait until start condition flag is set */
		while (!(I2C1->SR1 & (SR1_SB))){}
 80011aa:	bf00      	nop
 80011ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001218 <isConnected+0x9c>)
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f9      	beq.n	80011ac <isConnected+0x30>

		/* Transmit slave address + Write (0) */
		I2C1->DR = AS7421_WRITE_ADDR;
 80011b8:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <isConnected+0x9c>)
 80011ba:	22c8      	movs	r2, #200	@ 0xc8
 80011bc:	611a      	str	r2, [r3, #16]

		/* Wait until address flag is set */
		while (!(I2C1->SR1 & (SR1_ADDR))){}
 80011be:	bf00      	nop
 80011c0:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <isConnected+0x9c>)
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0f9      	beq.n	80011c0 <isConnected+0x44>

		/* Clear address flag by reading SR2 register */
		tmp = I2C1->SR2;
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <isConnected+0x9c>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	607b      	str	r3, [r7, #4]

		if (I2C1->SR1 & SR1_AF)
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <isConnected+0x9c>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d006      	beq.n	80011ec <isConnected+0x70>
		{
			//No ACK received, address not acknowledged
			I2C1->CR1 |= CR1_STOP;  // Send STOP condition
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <isConnected+0x9c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001218 <isConnected+0x9c>)
 80011e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011e8:	6013      	str	r3, [r2, #0]
			continue;
 80011ea:	e007      	b.n	80011fc <isConnected+0x80>
		}

		//Address acknowledged, device is connected
		I2C1->CR1 |= CR1_STOP; // Send STOP condition
 80011ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <isConnected+0x9c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a09      	ldr	r2, [pc, #36]	@ (8001218 <isConnected+0x9c>)
 80011f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011f6:	6013      	str	r3, [r2, #0]
		return true;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e008      	b.n	800120e <isConnected+0x92>
	while ((HAL_GetTick() - startTime) < timeout)
 80011fc:	f001 fcea 	bl	8002bd4 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	429a      	cmp	r2, r3
 800120a:	d8c1      	bhi.n	8001190 <isConnected+0x14>
	}
	//Timeout to connect has expired, hence device is not connected
	return false;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40005400 	.word	0x40005400

0800121c <initialize>:

//Initializes the sensor with basic settings
//Returns false if sensor is not detected
bool initialize()
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	uart2_rxtx_init();
 8001220:	f001 f9c0 	bl	80025a4 <uart2_rxtx_init>
	I2C1_Init();
 8001224:	f000 fc44 	bl	8001ab0 <I2C1_Init>
	fpu_enable();
 8001228:	f7ff ff7e 	bl	8001128 <fpu_enable>

	if (isConnected() == false)
 800122c:	f7ff ffa6 	bl	800117c <isConnected>
 8001230:	4603      	mov	r3, r0
 8001232:	f083 0301 	eor.w	r3, r3, #1
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <initialize+0x24>
	{
		return false; //Check for sensor presence
 800123c:	2300      	movs	r3, #0
 800123e:	e022      	b.n	8001286 <initialize+0x6a>
	}

	//Add initialization functions
	configueLEDWait(false); //False is to enable LED wait time between cycles
 8001240:	2000      	movs	r0, #0
 8001242:	f000 f84b 	bl	80012dc <configueLEDWait>
	configureWaitCycle(true);
 8001246:	2001      	movs	r0, #1
 8001248:	f000 f875 	bl	8001336 <configureWaitCycle>
	setInterLED(2);
 800124c:	2002      	movs	r0, #2
 800124e:	f000 f864 	bl	800131a <setInterLED>
	setLTF_CCOUNT(1023);
 8001252:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 8001256:	f000 f8bd 	bl	80013d4 <setLTF_CCOUNT>

	configureLEDAuto(false);
 800125a:	2000      	movs	r0, #0
 800125c:	f000 f8da 	bl	8001414 <configureLEDAuto>
	setWaitTime(10);
 8001260:	200a      	movs	r0, #10
 8001262:	f000 f887 	bl	8001374 <setWaitTime>
	setIntegrationTime(20);
 8001266:	2014      	movs	r0, #20
 8001268:	f000 f8fc 	bl	8001464 <setIntegrationTime>
	numMeasurements(CONTINUOUS);
 800126c:	20ff      	movs	r0, #255	@ 0xff
 800126e:	f000 f929 	bl	80014c4 <numMeasurements>
	setIntegrationMode(INTEGRATIONCYLE_ABCD);
 8001272:	2003      	movs	r0, #3
 8001274:	f000 f934 	bl	80014e0 <setIntegrationMode>
	configureAutozero(true, AZ_WTIME_128US, 0, 1);
 8001278:	2301      	movs	r3, #1
 800127a:	2200      	movs	r2, #0
 800127c:	2102      	movs	r1, #2
 800127e:	2001      	movs	r0, #1
 8001280:	f000 f952 	bl	8001528 <configureAutozero>
//	configueLEDWait(false);

	return true;
 8001284:	2301      	movs	r3, #1
}
 8001286:	4618      	mov	r0, r3
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <startup>:

void startup()
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
	bool works = initialize();
 8001292:	f7ff ffc3 	bl	800121c <initialize>
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
	if (works)
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d014      	beq.n	80012ca <startup+0x3e>
	{
		setIntegrationTime(65.5); //65.5
 80012a0:	2041      	movs	r0, #65	@ 0x41
 80012a2:	f000 f8df 	bl	8001464 <setIntegrationTime>
		setWaitTime(5);
 80012a6:	2005      	movs	r0, #5
 80012a8:	f000 f864 	bl	8001374 <setWaitTime>

		sleep();
 80012ac:	f000 f9b4 	bl	8001618 <sleep>
		powerup();
 80012b0:	f000 f991 	bl	80015d6 <powerup>
		configureSMUX();
 80012b4:	f000 fb30 	bl	8001918 <configureSMUX>
		configureGain(8); //Sets gain for all ADCs // 8 max
 80012b8:	2008      	movs	r0, #8
 80012ba:	f000 fb41 	bl	8001940 <configureGain>
		configureLEDs(true, ALL_LEDS, LED_CURRENT_LIMIT_75MA); //75 max
 80012be:	2201      	movs	r2, #1
 80012c0:	211f      	movs	r1, #31
 80012c2:	2001      	movs	r0, #1
 80012c4:	f000 fb89 	bl	80019da <configureLEDs>
 80012c8:	e003      	b.n	80012d2 <startup+0x46>
	}
	else
	{
		printf("Sensor failed to respond \n\r");
 80012ca:	4803      	ldr	r0, [pc, #12]	@ (80012d8 <startup+0x4c>)
 80012cc:	f004 ff68 	bl	80061a0 <iprintf>
		return;
 80012d0:	bf00      	nop
	}
}
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	08007028 	.word	0x08007028

080012dc <configueLEDWait>:
	getAllTemperatureData(arrTemp); //Reading temperatures of integration cycles A to D
}

//Configure LED_WAIT_OFF or Disable LED_WAIT_OFF to modify waiting time between integration cycle A to D
void configueLEDWait(bool setting)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
	uint8_t value = AS7421_readRegister(CFG_MISC); //Read existing state
 80012e6:	2038      	movs	r0, #56	@ 0x38
 80012e8:	f7ff fea1 	bl	800102e <AS7421_readRegister>
 80012ec:	4603      	mov	r3, r0
 80012ee:	73fb      	strb	r3, [r7, #15]
	if (setting)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d004      	beq.n	8001300 <configueLEDWait+0x24>
	{
		value |= (1U << 2); //Set LED_WAIT_OFF bit (bit 2)
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	73fb      	strb	r3, [r7, #15]
 80012fe:	e003      	b.n	8001308 <configueLEDWait+0x2c>
	}
	else
	{
		value &= ~(1U << 2); //Reset LED_WAIT_OFF bit (bit 2)
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	f023 0304 	bic.w	r3, r3, #4
 8001306:	73fb      	strb	r3, [r7, #15]
	}

	AS7421_writeRegister(CFG_MISC, value); //Write value to CFG_MISC register to configure the LED_WAIT_OFF bit
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	4619      	mov	r1, r3
 800130c:	2038      	movs	r0, #56	@ 0x38
 800130e:	f7ff fea1 	bl	8001054 <AS7421_writeRegister>
}
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <setInterLED>:

// Set Wait time (LED_WAIT) between switching on the LED and begin of integration/modulation. Wait time = 1024us * waitTime
void setInterLED(uint8_t waitTime)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	71fb      	strb	r3, [r7, #7]
	if (waitTime > 255)
	{
        waitTime = 255; // Set to maximum value if out of range
	}

	AS7421_writeRegister(LED_WAIT, waitTime);
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	4619      	mov	r1, r3
 8001328:	203d      	movs	r0, #61	@ 0x3d
 800132a:	f7ff fe93 	bl	8001054 <AS7421_writeRegister>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <configureWaitCycle>:

//Configure the waiting time between integration cycle A to D (programmable with LTF_WTIME)
void configureWaitCycle(bool setting)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b084      	sub	sp, #16
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	71fb      	strb	r3, [r7, #7]
	uint8_t value = AS7421_readRegister(CFG_MISC); //Read existing state
 8001340:	2038      	movs	r0, #56	@ 0x38
 8001342:	f7ff fe74 	bl	800102e <AS7421_readRegister>
 8001346:	4603      	mov	r3, r0
 8001348:	73fb      	strb	r3, [r7, #15]
	if (setting)
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d004      	beq.n	800135a <configureWaitCycle+0x24>
	{
		value |= (1U << 1); //Set WAIT_CYCLE_ON bit (bit 1)
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	f043 0302 	orr.w	r3, r3, #2
 8001356:	73fb      	strb	r3, [r7, #15]
 8001358:	e003      	b.n	8001362 <configureWaitCycle+0x2c>
	}
	else
	{
		value &= ~(1U << 1); //Reset WAIT_CYCLE_ON bit (bit 1)
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	f023 0302 	bic.w	r3, r3, #2
 8001360:	73fb      	strb	r3, [r7, #15]
	}

	AS7421_writeRegister(CFG_MISC, value); //Write value to CFG_MISC register to configure the WAIT_CYCLE_ON bit
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	4619      	mov	r1, r3
 8001366:	2038      	movs	r0, #56	@ 0x38
 8001368:	f7ff fe74 	bl	8001054 <AS7421_writeRegister>
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <setWaitTime>:

//Programs the wait time (WTIME) in ms between two consecutive spectral measurements
void setWaitTime(uint32_t waitTime)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	uint32_t waitCounts = ((waitTime * F_CLKMOD) / 1000) - 1;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a12      	ldr	r2, [pc, #72]	@ (80013c8 <setWaitTime+0x54>)
 8001380:	fb02 f303 	mul.w	r3, r2, r3
 8001384:	4a11      	ldr	r2, [pc, #68]	@ (80013cc <setWaitTime+0x58>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	099b      	lsrs	r3, r3, #6
 800138c:	3b01      	subs	r3, #1
 800138e:	60fb      	str	r3, [r7, #12]

	uint8_t data[3] = {0};
 8001390:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <setWaitTime+0x5c>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	813b      	strh	r3, [r7, #8]
 8001396:	2300      	movs	r3, #0
 8001398:	72bb      	strb	r3, [r7, #10]
	data[0] = waitCounts & 0xFF; //low byte
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	723b      	strb	r3, [r7, #8]
	data[1] = (waitCounts >> 8) & 0xFF; //mid byte
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	0a1b      	lsrs	r3, r3, #8
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	727b      	strb	r3, [r7, #9]
	data[2] = (waitCounts >> 16) & 0xFF; //high byte
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	0c1b      	lsrs	r3, r3, #16
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	72bb      	strb	r3, [r7, #10]

	AS7421_writeRegisters(LTF_WTIME, 3, data);
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	461a      	mov	r2, r3
 80013b6:	2103      	movs	r1, #3
 80013b8:	2064      	movs	r0, #100	@ 0x64
 80013ba:	f7ff fe8e 	bl	80010da <AS7421_writeRegisters>
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	000f4240 	.word	0x000f4240
 80013cc:	10624dd3 	.word	0x10624dd3
 80013d0:	08007044 	.word	0x08007044

080013d4 <setLTF_CCOUNT>:

void setLTF_CCOUNT(uint16_t ccount_value)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	80fb      	strh	r3, [r7, #6]
    // Validate the input value
    if (ccount_value > 0xFFFF) {
        ccount_value = 0xFFFF;  // Cap to maximum 16-bit value
    }
	uint8_t data[2] = {0};
 80013de:	2300      	movs	r3, #0
 80013e0:	81bb      	strh	r3, [r7, #12]
	ccount_value = byteSwap16(ccount_value);
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fe8a 	bl	80010fe <byteSwap16>
 80013ea:	4603      	mov	r3, r0
 80013ec:	80fb      	strh	r3, [r7, #6]

	data[0] = ccount_value & 0xFF; //low byte
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	733b      	strb	r3, [r7, #12]
	data[1] = (ccount_value >> 8) & 0xFF; //high byte
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	0a1b      	lsrs	r3, r3, #8
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	737b      	strb	r3, [r7, #13]

    // Write the value to the LTF_CCOUNT register
    AS7421_writeRegisters(LTF_CCOUNT, 2, data);
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	461a      	mov	r2, r3
 8001404:	2102      	movs	r1, #2
 8001406:	203a      	movs	r0, #58	@ 0x3a
 8001408:	f7ff fe67 	bl	80010da <AS7421_writeRegisters>
}
 800140c:	bf00      	nop
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <configureLEDAuto>:

//Controls NIR light source during spectral measurement
void configureLEDAuto(bool mode)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
	uint8_t value = AS7421_readRegister(ENABLE); //Read existing state
 800141e:	2060      	movs	r0, #96	@ 0x60
 8001420:	f7ff fe05 	bl	800102e <AS7421_readRegister>
 8001424:	4603      	mov	r3, r0
 8001426:	73fb      	strb	r3, [r7, #15]
	if (mode)
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d008      	beq.n	8001440 <configureLEDAuto+0x2c>
	{
		value |= (1U << 4); //Set LED_AUTO bit (bit 4 and 5)
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	f043 0310 	orr.w	r3, r3, #16
 8001434:	73fb      	strb	r3, [r7, #15]
		value |= (1U << 5);
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	f043 0320 	orr.w	r3, r3, #32
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	e007      	b.n	8001450 <configureLEDAuto+0x3c>
	}
	else
	{
		value &= ~(1U << 4); //Reset LED_AUTO bit (bit 4 and 5)
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	f023 0310 	bic.w	r3, r3, #16
 8001446:	73fb      	strb	r3, [r7, #15]
		value &= ~(1U << 5);
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	f023 0320 	bic.w	r3, r3, #32
 800144e:	73fb      	strb	r3, [r7, #15]
	}

	AS7421_writeRegister(ENABLE, value);
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	4619      	mov	r1, r3
 8001454:	2060      	movs	r0, #96	@ 0x60
 8001456:	f7ff fdfd 	bl	8001054 <AS7421_writeRegister>
}
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <setIntegrationTime>:

//Programs the integration time (ITIME) in ms of the LTF converter
void setIntegrationTime(uint32_t intTime)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
//	if (intTime > 256)
//	{
//		intTime = 256;
//	}
	uint32_t intCounts = ((intTime * F_CLKMOD) / 1000) - 1;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a12      	ldr	r2, [pc, #72]	@ (80014b8 <setIntegrationTime+0x54>)
 8001470:	fb02 f303 	mul.w	r3, r2, r3
 8001474:	4a11      	ldr	r2, [pc, #68]	@ (80014bc <setIntegrationTime+0x58>)
 8001476:	fba2 2303 	umull	r2, r3, r2, r3
 800147a:	099b      	lsrs	r3, r3, #6
 800147c:	3b01      	subs	r3, #1
 800147e:	60fb      	str	r3, [r7, #12]

	uint8_t data[3] = {0};
 8001480:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <setIntegrationTime+0x5c>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	813b      	strh	r3, [r7, #8]
 8001486:	2300      	movs	r3, #0
 8001488:	72bb      	strb	r3, [r7, #10]
	data[0] = intCounts & 0xFF;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	723b      	strb	r3, [r7, #8]
	data[1] = (intCounts >> 8) & 0xFF;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	0a1b      	lsrs	r3, r3, #8
 8001494:	b2db      	uxtb	r3, r3
 8001496:	727b      	strb	r3, [r7, #9]
	data[2] = (intCounts >> 16) & 0xFF;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	0c1b      	lsrs	r3, r3, #16
 800149c:	b2db      	uxtb	r3, r3
 800149e:	72bb      	strb	r3, [r7, #10]

	AS7421_writeRegisters(LTF_ITIME, 3, data);
 80014a0:	f107 0308 	add.w	r3, r7, #8
 80014a4:	461a      	mov	r2, r3
 80014a6:	2103      	movs	r1, #3
 80014a8:	2061      	movs	r0, #97	@ 0x61
 80014aa:	f7ff fe16 	bl	80010da <AS7421_writeRegisters>
}
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	000f4240 	.word	0x000f4240
 80014bc:	10624dd3 	.word	0x10624dd3
 80014c0:	08007044 	.word	0x08007044

080014c4 <numMeasurements>:

void numMeasurements(uint8_t counts) //specifying number of measurements
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
	if (counts > 255)
	{
		counts = 255; // Set to maximum value if out of range
	}

	AS7421_writeRegister(LTF_ICOUNT, counts);
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	4619      	mov	r1, r3
 80014d2:	2069      	movs	r0, #105	@ 0x69
 80014d4:	f7ff fdbe 	bl	8001054 <AS7421_writeRegister>
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <setIntegrationMode>:

//16 channels (A), 32 channels (AB), 48 channels (ABC), 64 channels (ABCD)
void setIntegrationMode(uint8_t mode)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
	if (mode > INTEGRATIONCYLE_ABCD)
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d901      	bls.n	80014f4 <setIntegrationMode+0x14>
	{
		mode = INTEGRATIONCYLE_ABCD; //Limit mode to 2 bits
 80014f0:	2303      	movs	r3, #3
 80014f2:	71fb      	strb	r3, [r7, #7]
	}

	uint8_t value = AS7421_readRegister(CFG_LTF); //Read existing state
 80014f4:	2067      	movs	r0, #103	@ 0x67
 80014f6:	f7ff fd9a 	bl	800102e <AS7421_readRegister>
 80014fa:	4603      	mov	r3, r0
 80014fc:	73fb      	strb	r3, [r7, #15]
	value &= 0b11100111; //Clear LTF_CYCLE bits
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	f023 0318 	bic.w	r3, r3, #24
 8001504:	73fb      	strb	r3, [r7, #15]
	value |= (mode << 3); //Set LTF_CYCLE bits with user's choice
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	b25a      	sxtb	r2, r3
 800150c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001510:	4313      	orrs	r3, r2
 8001512:	b25b      	sxtb	r3, r3
 8001514:	73fb      	strb	r3, [r7, #15]

	AS7421_writeRegister(CFG_LTF, value);
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	4619      	mov	r1, r3
 800151a:	2067      	movs	r0, #103	@ 0x67
 800151c:	f7ff fd9a 	bl	8001054 <AS7421_writeRegister>
}
 8001520:	bf00      	nop
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <configureAutozero>:


void configureAutozero(bool enable, uint8_t az_waitTime, uint8_t iteration, uint8_t cycle)
{
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	4604      	mov	r4, r0
 8001530:	4608      	mov	r0, r1
 8001532:	4611      	mov	r1, r2
 8001534:	461a      	mov	r2, r3
 8001536:	4623      	mov	r3, r4
 8001538:	71fb      	strb	r3, [r7, #7]
 800153a:	4603      	mov	r3, r0
 800153c:	71bb      	strb	r3, [r7, #6]
 800153e:	460b      	mov	r3, r1
 8001540:	717b      	strb	r3, [r7, #5]
 8001542:	4613      	mov	r3, r2
 8001544:	713b      	strb	r3, [r7, #4]
	uint8_t value = AS7421_readRegister(CFG_AZ);
 8001546:	206d      	movs	r0, #109	@ 0x6d
 8001548:	f7ff fd71 	bl	800102e <AS7421_readRegister>
 800154c:	4603      	mov	r3, r0
 800154e:	73fb      	strb	r3, [r7, #15]

	value |= (1U << 7); //Enable AZ_ON (bit 7)
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001556:	73fb      	strb	r3, [r7, #15]
	if (az_waitTime > 0b11)
 8001558:	79bb      	ldrb	r3, [r7, #6]
 800155a:	2b03      	cmp	r3, #3
 800155c:	d901      	bls.n	8001562 <configureAutozero+0x3a>
	{
		az_waitTime = 0b11;
 800155e:	2303      	movs	r3, #3
 8001560:	71bb      	strb	r3, [r7, #6]
	}
    value &= ~(0b11 << 5);  // Clear the AZ_WTIME bits (bits 5 and 6)
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001568:	73fb      	strb	r3, [r7, #15]
	value |= (az_waitTime << 5); //Set AZ_WTIME (bit 5 and 6)
 800156a:	79bb      	ldrb	r3, [r7, #6]
 800156c:	015b      	lsls	r3, r3, #5
 800156e:	b25a      	sxtb	r2, r3
 8001570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001574:	4313      	orrs	r3, r2
 8001576:	b25b      	sxtb	r3, r3
 8001578:	73fb      	strb	r3, [r7, #15]

    value &= ~(1U << 4);  // Clear the AZ_EN bit
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	f023 0310 	bic.w	r3, r3, #16
 8001580:	73fb      	strb	r3, [r7, #15]
	value |= (enable << 4); //Set AZ_EN (bit 4)
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	b25a      	sxtb	r2, r3
 8001588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158c:	4313      	orrs	r3, r2
 800158e:	b25b      	sxtb	r3, r3
 8001590:	73fb      	strb	r3, [r7, #15]

	value &= ~(1U << 3);  // Clear the AZ_CYCLE bit
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	f023 0308 	bic.w	r3, r3, #8
 8001598:	73fb      	strb	r3, [r7, #15]
	value |= (cycle << 3); //Set AZ_CYCLE (bit 3)
 800159a:	793b      	ldrb	r3, [r7, #4]
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	b25a      	sxtb	r2, r3
 80015a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	b25b      	sxtb	r3, r3
 80015a8:	73fb      	strb	r3, [r7, #15]

	if (iteration > 0b111)
 80015aa:	797b      	ldrb	r3, [r7, #5]
 80015ac:	2b07      	cmp	r3, #7
 80015ae:	d901      	bls.n	80015b4 <configureAutozero+0x8c>
	{
		iteration = 0b111;
 80015b0:	2307      	movs	r3, #7
 80015b2:	717b      	strb	r3, [r7, #5]
	}
    value &= ~0b111;  // Clear the iteration bits (bits 0, 1, and 2)
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	f023 0307 	bic.w	r3, r3, #7
 80015ba:	73fb      	strb	r3, [r7, #15]
	value |= iteration;
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	797b      	ldrb	r3, [r7, #5]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	73fb      	strb	r3, [r7, #15]

    AS7421_writeRegister(CFG_AZ, value);
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	4619      	mov	r1, r3
 80015c8:	206d      	movs	r0, #109	@ 0x6d
 80015ca:	f7ff fd43 	bl	8001054 <AS7421_writeRegister>
}
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd90      	pop	{r4, r7, pc}

080015d6 <powerup>:

// Internal oscillator enabled, potentially write 0x44 to register 0x6F, 0x20 to register 0x6E, 0x00 to register 0x6F, sensor is in idle state
void powerup()
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
	uint8_t value = AS7421_readRegister(ENABLE); //Read existing state
 80015dc:	2060      	movs	r0, #96	@ 0x60
 80015de:	f7ff fd26 	bl	800102e <AS7421_readRegister>
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
	value |= (1U << 0); //Set PON (bit 0)
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	71fb      	strb	r3, [r7, #7]
    AS7421_writeRegister(ENABLE, value);
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	4619      	mov	r1, r3
 80015f2:	2060      	movs	r0, #96	@ 0x60
 80015f4:	f7ff fd2e 	bl	8001054 <AS7421_writeRegister>

    //After power on reset the following commands have to be written prior accessing other registers
    AS7421_writeRegister(0x6F, 0x44);
 80015f8:	2144      	movs	r1, #68	@ 0x44
 80015fa:	206f      	movs	r0, #111	@ 0x6f
 80015fc:	f7ff fd2a 	bl	8001054 <AS7421_writeRegister>
    AS7421_writeRegister(0x6E, 0x20);
 8001600:	2120      	movs	r1, #32
 8001602:	206e      	movs	r0, #110	@ 0x6e
 8001604:	f7ff fd26 	bl	8001054 <AS7421_writeRegister>
    AS7421_writeRegister(0x6F, 0x00);
 8001608:	2100      	movs	r1, #0
 800160a:	206f      	movs	r0, #111	@ 0x6f
 800160c:	f7ff fd22 	bl	8001054 <AS7421_writeRegister>
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <sleep>:
	AS7421_writeRegister(CFG_MISC, value);
}

// Internal oscillator disabled, sensor is in sleep state
void sleep()
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
	uint8_t value = AS7421_readRegister(ENABLE); //Read existing state
 800161e:	2060      	movs	r0, #96	@ 0x60
 8001620:	f7ff fd05 	bl	800102e <AS7421_readRegister>
 8001624:	4603      	mov	r3, r0
 8001626:	71fb      	strb	r3, [r7, #7]
	value &= ~(1U << 0); //Reset PON (bit 0)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f023 0301 	bic.w	r3, r3, #1
 800162e:	71fb      	strb	r3, [r7, #7]
    AS7421_writeRegister(ENABLE, value);
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	4619      	mov	r1, r3
 8001634:	2060      	movs	r0, #96	@ 0x60
 8001636:	f7ff fd0d 	bl	8001054 <AS7421_writeRegister>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <writeRAMData>:

void writeRAMData(uint8_t *smuxData, uint8_t offset)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	460b      	mov	r3, r1
 800164c:	70fb      	strb	r3, [r7, #3]
	if (offset == INTA_OFFSET)
 800164e:	78fb      	ldrb	r3, [r7, #3]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d136      	bne.n	80016c2 <writeRAMData+0x80>
	{
		AS7421_writeRegister(CFG_RAM_0, smuxData[0]);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	2040      	movs	r0, #64	@ 0x40
 800165c:	f7ff fcfa 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_1, smuxData[1]);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3301      	adds	r3, #1
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	4619      	mov	r1, r3
 8001668:	2041      	movs	r0, #65	@ 0x41
 800166a:	f7ff fcf3 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_2, smuxData[2]);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3302      	adds	r3, #2
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	2042      	movs	r0, #66	@ 0x42
 8001678:	f7ff fcec 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_3, smuxData[3]);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3303      	adds	r3, #3
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	4619      	mov	r1, r3
 8001684:	2043      	movs	r0, #67	@ 0x43
 8001686:	f7ff fce5 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_4, smuxData[4]);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3304      	adds	r3, #4
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	2044      	movs	r0, #68	@ 0x44
 8001694:	f7ff fcde 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_5, smuxData[5]);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3305      	adds	r3, #5
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	4619      	mov	r1, r3
 80016a0:	2045      	movs	r0, #69	@ 0x45
 80016a2:	f7ff fcd7 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_6, smuxData[6]);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3306      	adds	r3, #6
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4619      	mov	r1, r3
 80016ae:	2046      	movs	r0, #70	@ 0x46
 80016b0:	f7ff fcd0 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_7, smuxData[7]);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3307      	adds	r3, #7
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	4619      	mov	r1, r3
 80016bc:	2047      	movs	r0, #71	@ 0x47
 80016be:	f7ff fcc9 	bl	8001054 <AS7421_writeRegister>
	}

	if (offset == INTB_OFFSET)
 80016c2:	78fb      	ldrb	r3, [r7, #3]
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d136      	bne.n	8001736 <writeRAMData+0xf4>
	{
		AS7421_writeRegister(CFG_RAM_8, smuxData[0]);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4619      	mov	r1, r3
 80016ce:	2048      	movs	r0, #72	@ 0x48
 80016d0:	f7ff fcc0 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_9, smuxData[1]);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3301      	adds	r3, #1
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	4619      	mov	r1, r3
 80016dc:	2049      	movs	r0, #73	@ 0x49
 80016de:	f7ff fcb9 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_10, smuxData[2]);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3302      	adds	r3, #2
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
 80016ea:	204a      	movs	r0, #74	@ 0x4a
 80016ec:	f7ff fcb2 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_11, smuxData[3]);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3303      	adds	r3, #3
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	4619      	mov	r1, r3
 80016f8:	204b      	movs	r0, #75	@ 0x4b
 80016fa:	f7ff fcab 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_12, smuxData[4]);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3304      	adds	r3, #4
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	204c      	movs	r0, #76	@ 0x4c
 8001708:	f7ff fca4 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_13, smuxData[5]);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3305      	adds	r3, #5
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	4619      	mov	r1, r3
 8001714:	204d      	movs	r0, #77	@ 0x4d
 8001716:	f7ff fc9d 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_14, smuxData[6]);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3306      	adds	r3, #6
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4619      	mov	r1, r3
 8001722:	204e      	movs	r0, #78	@ 0x4e
 8001724:	f7ff fc96 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_15, smuxData[7]);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3307      	adds	r3, #7
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	4619      	mov	r1, r3
 8001730:	204f      	movs	r0, #79	@ 0x4f
 8001732:	f7ff fc8f 	bl	8001054 <AS7421_writeRegister>
	}

	if (offset == INTC_OFFSET)
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	2b10      	cmp	r3, #16
 800173a:	d136      	bne.n	80017aa <writeRAMData+0x168>
	{
		AS7421_writeRegister(CFG_RAM_16, smuxData[0]);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	4619      	mov	r1, r3
 8001742:	2050      	movs	r0, #80	@ 0x50
 8001744:	f7ff fc86 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_17, smuxData[1]);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3301      	adds	r3, #1
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	4619      	mov	r1, r3
 8001750:	2051      	movs	r0, #81	@ 0x51
 8001752:	f7ff fc7f 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_18, smuxData[2]);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3302      	adds	r3, #2
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4619      	mov	r1, r3
 800175e:	2052      	movs	r0, #82	@ 0x52
 8001760:	f7ff fc78 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_19, smuxData[3]);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3303      	adds	r3, #3
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	4619      	mov	r1, r3
 800176c:	2053      	movs	r0, #83	@ 0x53
 800176e:	f7ff fc71 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_20, smuxData[4]);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3304      	adds	r3, #4
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	2054      	movs	r0, #84	@ 0x54
 800177c:	f7ff fc6a 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_21, smuxData[5]);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3305      	adds	r3, #5
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	4619      	mov	r1, r3
 8001788:	2055      	movs	r0, #85	@ 0x55
 800178a:	f7ff fc63 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_22, smuxData[6]);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3306      	adds	r3, #6
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4619      	mov	r1, r3
 8001796:	2056      	movs	r0, #86	@ 0x56
 8001798:	f7ff fc5c 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_23, smuxData[7]);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3307      	adds	r3, #7
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	4619      	mov	r1, r3
 80017a4:	2057      	movs	r0, #87	@ 0x57
 80017a6:	f7ff fc55 	bl	8001054 <AS7421_writeRegister>
	}

	if (offset == INTD_OFFSET)
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	2b18      	cmp	r3, #24
 80017ae:	d136      	bne.n	800181e <writeRAMData+0x1dc>
	{
		AS7421_writeRegister(CFG_RAM_24, smuxData[0]);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4619      	mov	r1, r3
 80017b6:	2058      	movs	r0, #88	@ 0x58
 80017b8:	f7ff fc4c 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_25, smuxData[1]);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3301      	adds	r3, #1
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	4619      	mov	r1, r3
 80017c4:	2059      	movs	r0, #89	@ 0x59
 80017c6:	f7ff fc45 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_26, smuxData[2]);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3302      	adds	r3, #2
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	205a      	movs	r0, #90	@ 0x5a
 80017d4:	f7ff fc3e 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_27, smuxData[3]);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3303      	adds	r3, #3
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	4619      	mov	r1, r3
 80017e0:	205b      	movs	r0, #91	@ 0x5b
 80017e2:	f7ff fc37 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_28, smuxData[4]);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3304      	adds	r3, #4
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4619      	mov	r1, r3
 80017ee:	205c      	movs	r0, #92	@ 0x5c
 80017f0:	f7ff fc30 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_29, smuxData[5]);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3305      	adds	r3, #5
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	4619      	mov	r1, r3
 80017fc:	205d      	movs	r0, #93	@ 0x5d
 80017fe:	f7ff fc29 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_30, smuxData[6]);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3306      	adds	r3, #6
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	205e      	movs	r0, #94	@ 0x5e
 800180c:	f7ff fc22 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_31, smuxData[7]);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3307      	adds	r3, #7
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4619      	mov	r1, r3
 8001818:	205f      	movs	r0, #95	@ 0x5f
 800181a:	f7ff fc1b 	bl	8001054 <AS7421_writeRegister>
	}
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <zeroSMUX>:

// Clear RAM registers with SMUX
void zeroSMUX()
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
	uint8_t zeros[8] = {0};
 800182c:	2300      	movs	r3, #0
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	2300      	movs	r3, #0
 8001832:	60bb      	str	r3, [r7, #8]
	for (int i = SMUX_A_ADDR; i <= SMUX_D_ADDR; i++)
 8001834:	230c      	movs	r3, #12
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	e01c      	b.n	8001874 <zeroSMUX+0x4e>
	{
		AS7421_writeRegister(CFG_RAM, i);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	4619      	mov	r1, r3
 8001840:	206a      	movs	r0, #106	@ 0x6a
 8001842:	f7ff fc07 	bl	8001054 <AS7421_writeRegister>

		writeRAMData(zeros, 0);
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fef9 	bl	8001642 <writeRAMData>
		writeRAMData(zeros, 1);
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	2101      	movs	r1, #1
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fef4 	bl	8001642 <writeRAMData>
		writeRAMData(zeros, 2);
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	2102      	movs	r1, #2
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff feef 	bl	8001642 <writeRAMData>
		writeRAMData(zeros, 3);
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	2103      	movs	r1, #3
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff feea 	bl	8001642 <writeRAMData>
	for (int i = SMUX_A_ADDR; i <= SMUX_D_ADDR; i++)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3301      	adds	r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2b0f      	cmp	r3, #15
 8001878:	dddf      	ble.n	800183a <zeroSMUX+0x14>
	}
}
 800187a:	bf00      	nop
 800187c:	bf00      	nop
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <setSMUX>:

// Set SMUX region (A,B,C, or D) with ramOffsetAddr
void setSMUX(uint8_t ramOffsetAddr, uint8_t offset, uint8_t* configvalues)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	603a      	str	r2, [r7, #0]
 800188e:	71fb      	strb	r3, [r7, #7]
 8001890:	460b      	mov	r3, r1
 8001892:	71bb      	strb	r3, [r7, #6]
	AS7421_writeRegister(CFG_RAM, ramOffsetAddr); //Writing the ram offset(SMUX addresses) for programming the configuration into RAM
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	4619      	mov	r1, r3
 8001898:	206a      	movs	r0, #106	@ 0x6a
 800189a:	f7ff fbdb 	bl	8001054 <AS7421_writeRegister>
	writeRAMData(configvalues, offset); //Writing to respective ram registers after setting RAM offset
 800189e:	79bb      	ldrb	r3, [r7, #6]
 80018a0:	4619      	mov	r1, r3
 80018a2:	6838      	ldr	r0, [r7, #0]
 80018a4:	f7ff fecd 	bl	8001642 <writeRAMData>
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <setSMUX_A>:

// Set SMUX for integration cycle A and write to ram registers
void setSMUX_A(uint8_t* configvalues)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	setSMUX(SMUX_A_ADDR, INTA_OFFSET, configvalues);
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	2100      	movs	r1, #0
 80018bc:	200c      	movs	r0, #12
 80018be:	f7ff ffe1 	bl	8001884 <setSMUX>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <setSMUX_B>:

// Set SMUX for integration cycle B and write to ram registers
void setSMUX_B(uint8_t* configvalues)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
	setSMUX(SMUX_B_ADDR, INTB_OFFSET, configvalues);
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	2108      	movs	r1, #8
 80018d6:	200d      	movs	r0, #13
 80018d8:	f7ff ffd4 	bl	8001884 <setSMUX>
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <setSMUX_C>:

// Set SMUX for integration cycle C and write to ram registers
void setSMUX_C(uint8_t* configvalues)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	setSMUX(SMUX_C_ADDR, INTC_OFFSET, configvalues);
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	2110      	movs	r1, #16
 80018f0:	200e      	movs	r0, #14
 80018f2:	f7ff ffc7 	bl	8001884 <setSMUX>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <setSMUX_D>:

// Set SMUX for integration cycle D and write to ram registers
void setSMUX_D(uint8_t* configvalues)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
	setSMUX(SMUX_D_ADDR, INTD_OFFSET, configvalues);
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	2118      	movs	r1, #24
 800190a:	200f      	movs	r0, #15
 800190c:	f7ff ffba 	bl	8001884 <setSMUX>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <configureSMUX>:

// Configure all SMUX registers either with a specified default array of bytes or the config_values
void configureSMUX()
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
    zeroSMUX();
 800191c:	f7ff ff83 	bl	8001826 <zeroSMUX>

    // Configure SMUX registers
	setSMUX_A(config_values);
 8001920:	4806      	ldr	r0, [pc, #24]	@ (800193c <configureSMUX+0x24>)
 8001922:	f7ff ffc5 	bl	80018b0 <setSMUX_A>
	setSMUX_B(config_values);
 8001926:	4805      	ldr	r0, [pc, #20]	@ (800193c <configureSMUX+0x24>)
 8001928:	f7ff ffcf 	bl	80018ca <setSMUX_B>
	setSMUX_C(config_values);
 800192c:	4803      	ldr	r0, [pc, #12]	@ (800193c <configureSMUX+0x24>)
 800192e:	f7ff ffd9 	bl	80018e4 <setSMUX_C>
	setSMUX_D(config_values);
 8001932:	4802      	ldr	r0, [pc, #8]	@ (800193c <configureSMUX+0x24>)
 8001934:	f7ff ffe3 	bl	80018fe <setSMUX_D>
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000004 	.word	0x20000004

08001940 <configureGain>:

//2^x gain, i.e. gain of 6 = 2^6 = 256x
void configureGain(uint8_t gain)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
	if (gain > 8)
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	2b08      	cmp	r3, #8
 800194e:	d901      	bls.n	8001954 <configureGain+0x14>
	{
		gain = 8;
 8001950:	2308      	movs	r3, #8
 8001952:	71fb      	strb	r3, [r7, #7]
	}

	uint8_t data[8] = {gain};
 8001954:	f107 0308 	add.w	r3, r7, #8
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	723b      	strb	r3, [r7, #8]

	AS7421_writeRegister(CFG_RAM, ASETUP_AB);
 8001962:	2110      	movs	r1, #16
 8001964:	206a      	movs	r0, #106	@ 0x6a
 8001966:	f7ff fb75 	bl	8001054 <AS7421_writeRegister>

	writeRAMData(data, 0);
 800196a:	f107 0308 	add.w	r3, r7, #8
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fe66 	bl	8001642 <writeRAMData>
	writeRAMData(data, 1);
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	2101      	movs	r1, #1
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fe60 	bl	8001642 <writeRAMData>
	writeRAMData(data, 2);
 8001982:	f107 0308 	add.w	r3, r7, #8
 8001986:	2102      	movs	r1, #2
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fe5a 	bl	8001642 <writeRAMData>
	writeRAMData(data, 3);
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	2103      	movs	r1, #3
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fe54 	bl	8001642 <writeRAMData>

	AS7421_writeRegister(CFG_RAM, ASETUP_CD);
 800199a:	2111      	movs	r1, #17
 800199c:	206a      	movs	r0, #106	@ 0x6a
 800199e:	f7ff fb59 	bl	8001054 <AS7421_writeRegister>

	writeRAMData(data, 0);
 80019a2:	f107 0308 	add.w	r3, r7, #8
 80019a6:	2100      	movs	r1, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fe4a 	bl	8001642 <writeRAMData>
	writeRAMData(data, 1);
 80019ae:	f107 0308 	add.w	r3, r7, #8
 80019b2:	2101      	movs	r1, #1
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fe44 	bl	8001642 <writeRAMData>
	writeRAMData(data, 2);
 80019ba:	f107 0308 	add.w	r3, r7, #8
 80019be:	2102      	movs	r1, #2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fe3e 	bl	8001642 <writeRAMData>
	writeRAMData(data, 3);
 80019c6:	f107 0308 	add.w	r3, r7, #8
 80019ca:	2103      	movs	r1, #3
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fe38 	bl	8001642 <writeRAMData>
}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <configureLEDs>:

// Configure LED register
void configureLEDs(bool enable, uint8_t led, uint8_t current)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b084      	sub	sp, #16
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	71fb      	strb	r3, [r7, #7]
 80019e4:	460b      	mov	r3, r1
 80019e6:	71bb      	strb	r3, [r7, #6]
 80019e8:	4613      	mov	r3, r2
 80019ea:	717b      	strb	r3, [r7, #5]
	//Clearing LED config register to default
	AS7421_writeRegister(CFG_LED, 0);
 80019ec:	2100      	movs	r1, #0
 80019ee:	2068      	movs	r0, #104	@ 0x68
 80019f0:	f7ff fb30 	bl	8001054 <AS7421_writeRegister>

	uint8_t value = AS7421_readRegister(CFG_LED);
 80019f4:	2068      	movs	r0, #104	@ 0x68
 80019f6:	f7ff fb1a 	bl	800102e <AS7421_readRegister>
 80019fa:	4603      	mov	r3, r0
 80019fc:	73fb      	strb	r3, [r7, #15]

	value |= (enable << 7); //Configure SET_LED_ON (bit 7)
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	01db      	lsls	r3, r3, #7
 8001a02:	b25a      	sxtb	r2, r3
 8001a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	b25b      	sxtb	r3, r3
 8001a0c:	73fb      	strb	r3, [r7, #15]

	for (int i = LED_MULT_0; i <= LED_MULT_3; i++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	e014      	b.n	8001a3e <configureLEDs+0x64>
	{
		value |= (i << 4); //Enable LED_OFFSET (bits 4 and 5)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	b25a      	sxtb	r2, r3
 8001a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	b25b      	sxtb	r3, r3
 8001a22:	73fb      	strb	r3, [r7, #15]
		AS7421_writeRegister(CFG_LED, value); // Setting Offset address for programming the values for LED_MULT
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	4619      	mov	r1, r3
 8001a28:	2068      	movs	r0, #104	@ 0x68
 8001a2a:	f7ff fb13 	bl	8001054 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_LED_MULT, led);
 8001a2e:	79bb      	ldrb	r3, [r7, #6]
 8001a30:	4619      	mov	r1, r3
 8001a32:	2039      	movs	r0, #57	@ 0x39
 8001a34:	f7ff fb0e 	bl	8001054 <AS7421_writeRegister>
	for (int i = LED_MULT_0; i <= LED_MULT_3; i++)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	2b03      	cmp	r3, #3
 8001a42:	dde7      	ble.n	8001a14 <configureLEDs+0x3a>
	}

	if (current > LED_CURRENT_LIMIT_75MA)
 8001a44:	797b      	ldrb	r3, [r7, #5]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d901      	bls.n	8001a4e <configureLEDs+0x74>
	{
		current = LED_CURRENT_LIMIT_75MA;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	717b      	strb	r3, [r7, #5]
	}
	value |= (current << 0);
 8001a4e:	7bfa      	ldrb	r2, [r7, #15]
 8001a50:	797b      	ldrb	r3, [r7, #5]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	73fb      	strb	r3, [r7, #15]

	AS7421_writeRegister(CFG_LED, value);
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	2068      	movs	r0, #104	@ 0x68
 8001a5c:	f7ff fafa 	bl	8001054 <AS7421_writeRegister>
}
 8001a60:	bf00      	nop
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <startMeasurements>:

// Start spectral measurement
void startMeasurements(bool withLED)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
	//Turn on LEDs
	configureLEDAuto(withLED);
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fccd 	bl	8001414 <configureLEDAuto>

	uint8_t value = AS7421_readRegister(ENABLE); //Read existing state
 8001a7a:	2060      	movs	r0, #96	@ 0x60
 8001a7c:	f7ff fad7 	bl	800102e <AS7421_readRegister>
 8001a80:	4603      	mov	r3, r0
 8001a82:	73fb      	strb	r3, [r7, #15]

	// Power on
	value |= (1U << 0); //Set PON (bit 0)
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	73fb      	strb	r3, [r7, #15]

    //Spectral measurement enabled
    value |= (1U << 1); //Set LTF_EN (bit 1)
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	f043 0302 	orr.w	r3, r3, #2
 8001a92:	73fb      	strb	r3, [r7, #15]

    //Automatic power down by temperature measurement
    value |= (1U << 2); //Set TSD_EN (bit 2)
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
 8001a96:	f043 0304 	orr.w	r3, r3, #4
 8001a9a:	73fb      	strb	r3, [r7, #15]

    AS7421_writeRegister(ENABLE, value);
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	2060      	movs	r0, #96	@ 0x60
 8001aa2:	f7ff fad7 	bl	8001054 <AS7421_writeRegister>
}
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <I2C1_Init>:
//#define	SR1_BTF					(1U<<2)
//#define SR1_AF					(1U<<10)


void I2C1_Init(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOB*/
	RCC->AHB1ENR |= GPIOBEN;
 8001ab4:	4b4d      	ldr	r3, [pc, #308]	@ (8001bec <I2C1_Init+0x13c>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab8:	4a4c      	ldr	r2, [pc, #304]	@ (8001bec <I2C1_Init+0x13c>)
 8001aba:	f043 0302 	orr.w	r3, r3, #2
 8001abe:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PB8 and PB9 mode to alternate function*/
	GPIOB->MODER &= ~(1U<<16);
 8001ac0:	4b4b      	ldr	r3, [pc, #300]	@ (8001bf0 <I2C1_Init+0x140>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a4a      	ldr	r2, [pc, #296]	@ (8001bf0 <I2C1_Init+0x140>)
 8001ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aca:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<17);
 8001acc:	4b48      	ldr	r3, [pc, #288]	@ (8001bf0 <I2C1_Init+0x140>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a47      	ldr	r2, [pc, #284]	@ (8001bf0 <I2C1_Init+0x140>)
 8001ad2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ad6:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~(1U<<18);
 8001ad8:	4b45      	ldr	r3, [pc, #276]	@ (8001bf0 <I2C1_Init+0x140>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a44      	ldr	r2, [pc, #272]	@ (8001bf0 <I2C1_Init+0x140>)
 8001ade:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ae2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<19);
 8001ae4:	4b42      	ldr	r3, [pc, #264]	@ (8001bf0 <I2C1_Init+0x140>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a41      	ldr	r2, [pc, #260]	@ (8001bf0 <I2C1_Init+0x140>)
 8001aea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001aee:	6013      	str	r3, [r2, #0]

	/*Set PB8 and PB9 output type to open drain*/
	GPIOB->OTYPER |= (1U<<8);
 8001af0:	4b3f      	ldr	r3, [pc, #252]	@ (8001bf0 <I2C1_Init+0x140>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	4a3e      	ldr	r2, [pc, #248]	@ (8001bf0 <I2C1_Init+0x140>)
 8001af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001afa:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (1U<<9);
 8001afc:	4b3c      	ldr	r3, [pc, #240]	@ (8001bf0 <I2C1_Init+0x140>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	4a3b      	ldr	r2, [pc, #236]	@ (8001bf0 <I2C1_Init+0x140>)
 8001b02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b06:	6053      	str	r3, [r2, #4]

	/*Enable Pull-up for PB6 and PB7*/
	GPIOB->PUPDR |= (1U<<16);
 8001b08:	4b39      	ldr	r3, [pc, #228]	@ (8001bf0 <I2C1_Init+0x140>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	4a38      	ldr	r2, [pc, #224]	@ (8001bf0 <I2C1_Init+0x140>)
 8001b0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b12:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<17);
 8001b14:	4b36      	ldr	r3, [pc, #216]	@ (8001bf0 <I2C1_Init+0x140>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4a35      	ldr	r2, [pc, #212]	@ (8001bf0 <I2C1_Init+0x140>)
 8001b1a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001b1e:	60d3      	str	r3, [r2, #12]

	GPIOB->PUPDR |= (1U<<18);
 8001b20:	4b33      	ldr	r3, [pc, #204]	@ (8001bf0 <I2C1_Init+0x140>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	4a32      	ldr	r2, [pc, #200]	@ (8001bf0 <I2C1_Init+0x140>)
 8001b26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b2a:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<19);
 8001b2c:	4b30      	ldr	r3, [pc, #192]	@ (8001bf0 <I2C1_Init+0x140>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	4a2f      	ldr	r2, [pc, #188]	@ (8001bf0 <I2C1_Init+0x140>)
 8001b32:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001b36:	60d3      	str	r3, [r2, #12]

	/*Set PB8 and PB9 alternate function type to I2C (AF4)
	 * PB8 --> SCL
	 * PB9 --> SDA*/
	GPIOB->AFR[1] &= ~(1U<<0);
 8001b38:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf0 <I2C1_Init+0x140>)
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3c:	4a2c      	ldr	r2, [pc, #176]	@ (8001bf0 <I2C1_Init+0x140>)
 8001b3e:	f023 0301 	bic.w	r3, r3, #1
 8001b42:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &= ~(1U<<1);
 8001b44:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf0 <I2C1_Init+0x140>)
 8001b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b48:	4a29      	ldr	r2, [pc, #164]	@ (8001bf0 <I2C1_Init+0x140>)
 8001b4a:	f023 0302 	bic.w	r3, r3, #2
 8001b4e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (1U<<2);
 8001b50:	4b27      	ldr	r3, [pc, #156]	@ (8001bf0 <I2C1_Init+0x140>)
 8001b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b54:	4a26      	ldr	r2, [pc, #152]	@ (8001bf0 <I2C1_Init+0x140>)
 8001b56:	f043 0304 	orr.w	r3, r3, #4
 8001b5a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &= ~(1U<<3);
 8001b5c:	4b24      	ldr	r3, [pc, #144]	@ (8001bf0 <I2C1_Init+0x140>)
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b60:	4a23      	ldr	r2, [pc, #140]	@ (8001bf0 <I2C1_Init+0x140>)
 8001b62:	f023 0308 	bic.w	r3, r3, #8
 8001b66:	6253      	str	r3, [r2, #36]	@ 0x24

	GPIOB->AFR[1] &= ~(1U<<4);
 8001b68:	4b21      	ldr	r3, [pc, #132]	@ (8001bf0 <I2C1_Init+0x140>)
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6c:	4a20      	ldr	r2, [pc, #128]	@ (8001bf0 <I2C1_Init+0x140>)
 8001b6e:	f023 0310 	bic.w	r3, r3, #16
 8001b72:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &= ~(1U<<5);
 8001b74:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf0 <I2C1_Init+0x140>)
 8001b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b78:	4a1d      	ldr	r2, [pc, #116]	@ (8001bf0 <I2C1_Init+0x140>)
 8001b7a:	f023 0320 	bic.w	r3, r3, #32
 8001b7e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (1U<<6);
 8001b80:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf0 <I2C1_Init+0x140>)
 8001b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b84:	4a1a      	ldr	r2, [pc, #104]	@ (8001bf0 <I2C1_Init+0x140>)
 8001b86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b8a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &= ~(1U<<7);
 8001b8c:	4b18      	ldr	r3, [pc, #96]	@ (8001bf0 <I2C1_Init+0x140>)
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b90:	4a17      	ldr	r2, [pc, #92]	@ (8001bf0 <I2C1_Init+0x140>)
 8001b92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b96:	6253      	str	r3, [r2, #36]	@ 0x24

	/***Configuring I2C1***/

	/*Enable clock access to I2C1*/
	RCC->APB1ENR |= I2C1EN;
 8001b98:	4b14      	ldr	r3, [pc, #80]	@ (8001bec <I2C1_Init+0x13c>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9c:	4a13      	ldr	r2, [pc, #76]	@ (8001bec <I2C1_Init+0x13c>)
 8001b9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ba2:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Enter reset mode  */
	I2C1->CR1 |= (1U<<15);
 8001ba4:	4b13      	ldr	r3, [pc, #76]	@ (8001bf4 <I2C1_Init+0x144>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a12      	ldr	r2, [pc, #72]	@ (8001bf4 <I2C1_Init+0x144>)
 8001baa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bae:	6013      	str	r3, [r2, #0]

	/*Come out of reset mode  */
	I2C1->CR1 &= ~(1U<<15);
 8001bb0:	4b10      	ldr	r3, [pc, #64]	@ (8001bf4 <I2C1_Init+0x144>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0f      	ldr	r2, [pc, #60]	@ (8001bf4 <I2C1_Init+0x144>)
 8001bb6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001bba:	6013      	str	r3, [r2, #0]

	/*Set Peripheral clock frequency*/
	I2C1->CR2 = (1U<<4);   //16 Mhz
 8001bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf4 <I2C1_Init+0x144>)
 8001bbe:	2210      	movs	r2, #16
 8001bc0:	605a      	str	r2, [r3, #4]
//
//	/*Set rise time */
//	I2C1->TRISE = SD_MODE_MAX_RISE_TIME; //(1000ns/(1/16MHz)+1 = 17

	/*Set I2C to fast mode, 400kHz clock */
	I2C1->CCR = 1; //Refer to ST reference manual for derivation
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf4 <I2C1_Init+0x144>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	61da      	str	r2, [r3, #28]
	I2C1->CCR = I2C_FAST_DUTY; //Set to Fast mode and duty cycle of 16/9
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <I2C1_Init+0x144>)
 8001bca:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8001bce:	61da      	str	r2, [r3, #28]

	/*Set rise time */
	I2C1->TRISE = 6;//FS_MODE_MAX_RISE_TIME; //(300ns/(1/16MHz)+1 = 5.8
 8001bd0:	4b08      	ldr	r3, [pc, #32]	@ (8001bf4 <I2C1_Init+0x144>)
 8001bd2:	2206      	movs	r2, #6
 8001bd4:	621a      	str	r2, [r3, #32]

	/*Enable I2C1 module */
	I2C1->CR1 |= CR1_PE;
 8001bd6:	4b07      	ldr	r3, [pc, #28]	@ (8001bf4 <I2C1_Init+0x144>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a06      	ldr	r2, [pc, #24]	@ (8001bf4 <I2C1_Init+0x144>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6013      	str	r3, [r2, #0]
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40020400 	.word	0x40020400
 8001bf4:	40005400 	.word	0x40005400

08001bf8 <I2C1_byteRead>:

void I2C1_byteRead(char saddr, char maddr, char* data) {
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	603a      	str	r2, [r7, #0]
 8001c02:	71fb      	strb	r3, [r7, #7]
 8001c04:	460b      	mov	r3, r1
 8001c06:	71bb      	strb	r3, [r7, #6]

	  volatile int tmp;

	  /* Wait until bus not busy */
	  while (I2C1->SR2 & (SR2_BUSY)){}
 8001c08:	bf00      	nop
 8001c0a:	4b37      	ldr	r3, [pc, #220]	@ (8001ce8 <I2C1_byteRead+0xf0>)
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f9      	bne.n	8001c0a <I2C1_byteRead+0x12>

	  /* Generate start condition */
	  I2C1->CR1 |= CR1_START;
 8001c16:	4b34      	ldr	r3, [pc, #208]	@ (8001ce8 <I2C1_byteRead+0xf0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a33      	ldr	r2, [pc, #204]	@ (8001ce8 <I2C1_byteRead+0xf0>)
 8001c1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c20:	6013      	str	r3, [r2, #0]

	  /* Wait until start condition flag is set, note the negation */
	  /* Stay in loop if start flag is not set */
	  while (!(I2C1->SR1 & (SR1_SB))){}
 8001c22:	bf00      	nop
 8001c24:	4b30      	ldr	r3, [pc, #192]	@ (8001ce8 <I2C1_byteRead+0xf0>)
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f9      	beq.n	8001c24 <I2C1_byteRead+0x2c>

	  /* Transmit slave address + Write (0) */
	  /* This slave address is sent to each slave device along with an indication to establish either read or write communication */
	  /* Yo device A, I want to write to one of your memory registers */
	  I2C1->DR = saddr << 1; // shifting the address left makes room for the R/W bit, which is 0 for write
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	4a2d      	ldr	r2, [pc, #180]	@ (8001ce8 <I2C1_byteRead+0xf0>)
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	6113      	str	r3, [r2, #16]

	  /* Wait until address flag is set */
	  /* Each slave device compares the address from master to its own address and sends an ACK if matched */
	  /* I'm device A and of course you can write to one of my registers */
	  while (!(I2C1->SR1 & (SR1_ADDR))){}
 8001c38:	bf00      	nop
 8001c3a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce8 <I2C1_byteRead+0xf0>)
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f9      	beq.n	8001c3a <I2C1_byteRead+0x42>

	  /* Clear address flag by reading SR2 register */
	  tmp = I2C1->SR2;
 8001c46:	4b28      	ldr	r3, [pc, #160]	@ (8001ce8 <I2C1_byteRead+0xf0>)
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	60fb      	str	r3, [r7, #12]

	  /*Wait until transmitter empty */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 8001c4c:	bf00      	nop
 8001c4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ce8 <I2C1_byteRead+0xf0>)
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f9      	beq.n	8001c4e <I2C1_byteRead+0x56>

	  /* Send register address */
	  /* Aight, here is the address of the register I'm want to write to read from*/
	  I2C1->DR = maddr;
 8001c5a:	4a23      	ldr	r2, [pc, #140]	@ (8001ce8 <I2C1_byteRead+0xf0>)
 8001c5c:	79bb      	ldrb	r3, [r7, #6]
 8001c5e:	6113      	str	r3, [r2, #16]

	  /*Wait until transmitter empty */
	  /* No probs */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 8001c60:	bf00      	nop
 8001c62:	4b21      	ldr	r3, [pc, #132]	@ (8001ce8 <I2C1_byteRead+0xf0>)
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f9      	beq.n	8001c62 <I2C1_byteRead+0x6a>

	 /* Begin actual reading process once slave device and register of interest are understood between master and slave*/
	 /*Generate restart */
	 I2C1->CR1 |= CR1_START;
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce8 <I2C1_byteRead+0xf0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a1d      	ldr	r2, [pc, #116]	@ (8001ce8 <I2C1_byteRead+0xf0>)
 8001c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c78:	6013      	str	r3, [r2, #0]

	 /* Wait until start flag is set */
	 while (!(I2C1->SR1 & SR1_SB)){}
 8001c7a:	bf00      	nop
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce8 <I2C1_byteRead+0xf0>)
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f9      	beq.n	8001c7c <I2C1_byteRead+0x84>

	 /* Transmit slave address + Read */
	 I2C1->DR = saddr << 1 | 1;
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	f043 0201 	orr.w	r2, r3, #1
 8001c90:	4b15      	ldr	r3, [pc, #84]	@ (8001ce8 <I2C1_byteRead+0xf0>)
 8001c92:	611a      	str	r2, [r3, #16]

	 /* Wait until addr flag is set */
	 while (!(I2C1->SR1 & (SR1_ADDR))){}
 8001c94:	bf00      	nop
 8001c96:	4b14      	ldr	r3, [pc, #80]	@ (8001ce8 <I2C1_byteRead+0xf0>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f9      	beq.n	8001c96 <I2C1_byteRead+0x9e>

	 /* Clear addr flag */
	 tmp = I2C1->SR2;
 8001ca2:	4b11      	ldr	r3, [pc, #68]	@ (8001ce8 <I2C1_byteRead+0xf0>)
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	60fb      	str	r3, [r7, #12]

	 /* Disable Acknowledge */
	 I2C1->CR1 &= ~CR1_ACK;
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce8 <I2C1_byteRead+0xf0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0e      	ldr	r2, [pc, #56]	@ (8001ce8 <I2C1_byteRead+0xf0>)
 8001cae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001cb2:	6013      	str	r3, [r2, #0]

	 /* Generate stop after data received */
	 I2C1->CR1 |= CR1_STOP;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce8 <I2C1_byteRead+0xf0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ce8 <I2C1_byteRead+0xf0>)
 8001cba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cbe:	6013      	str	r3, [r2, #0]

	 /* Wait until RXNE flag is set
	  * Wait until receiver is not empty (has contents to read)*/
	 while (!(I2C1->SR1 & SR1_RXNE)){}
 8001cc0:	bf00      	nop
 8001cc2:	4b09      	ldr	r3, [pc, #36]	@ (8001ce8 <I2C1_byteRead+0xf0>)
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f9      	beq.n	8001cc2 <I2C1_byteRead+0xca>

	 /* Read data from DR */
	 *data++ = I2C1->DR;
 8001cce:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <I2C1_byteRead+0xf0>)
 8001cd0:	6919      	ldr	r1, [r3, #16]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	603a      	str	r2, [r7, #0]
 8001cd8:	b2ca      	uxtb	r2, r1
 8001cda:	701a      	strb	r2, [r3, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	40005400 	.word	0x40005400

08001cec <I2C1_burstWrite>:
		 }
	 }

}

void I2C1_burstWrite(char saddr, char maddr, int n, char* data) {
 8001cec:	b480      	push	{r7}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60ba      	str	r2, [r7, #8]
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	73fb      	strb	r3, [r7, #15]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	73bb      	strb	r3, [r7, #14]

	/* Temporary variable to read SR2*/
	volatile int tmp;

	/* Wait until bus not busy */
	while (I2C1->SR2 & (SR2_BUSY)){}
 8001cfe:	bf00      	nop
 8001d00:	4b2a      	ldr	r3, [pc, #168]	@ (8001dac <I2C1_burstWrite+0xc0>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f9      	bne.n	8001d00 <I2C1_burstWrite+0x14>

	/* Generate start condition */
	I2C1->CR1 |= CR1_START;
 8001d0c:	4b27      	ldr	r3, [pc, #156]	@ (8001dac <I2C1_burstWrite+0xc0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a26      	ldr	r2, [pc, #152]	@ (8001dac <I2C1_burstWrite+0xc0>)
 8001d12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d16:	6013      	str	r3, [r2, #0]

	/* Wait until start condition flag is set, note the negation */
	/* Stay in loop if start flag is not set*/
	while (!(I2C1->SR1 & (SR1_SB))){}
 8001d18:	bf00      	nop
 8001d1a:	4b24      	ldr	r3, [pc, #144]	@ (8001dac <I2C1_burstWrite+0xc0>)
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f9      	beq.n	8001d1a <I2C1_burstWrite+0x2e>

	/* Transmit slave address + Write (0) */
	/* This slave address is sent to each slave device along with an indication to establish either read or write communication*/
	/* Yo device A, I want to write to one of your memory registers */
	I2C1->DR = saddr << 1; // shifting the address left makes room for the R/W bit, which is 0 for write
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	4a20      	ldr	r2, [pc, #128]	@ (8001dac <I2C1_burstWrite+0xc0>)
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	6113      	str	r3, [r2, #16]

	/* Wait until address flag is set */
	/* Each slave device compares the address from master to its own address and sends an ACK if mathced*/
	/* I'm device A and of course you can write to one of my registers */
	while (!(I2C1->SR1 & (SR1_ADDR))){}
 8001d2e:	bf00      	nop
 8001d30:	4b1e      	ldr	r3, [pc, #120]	@ (8001dac <I2C1_burstWrite+0xc0>)
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f9      	beq.n	8001d30 <I2C1_burstWrite+0x44>

	/* Clear address flag by reading SR2 register */
	tmp = I2C1->SR2;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dac <I2C1_burstWrite+0xc0>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	613b      	str	r3, [r7, #16]

	/*Wait until data register empty */
	while (!(I2C1->SR1 & SR1_TXE)){}
 8001d42:	bf00      	nop
 8001d44:	4b19      	ldr	r3, [pc, #100]	@ (8001dac <I2C1_burstWrite+0xc0>)
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0f9      	beq.n	8001d44 <I2C1_burstWrite+0x58>

	/* Send register address */
	/* aight here is the register I'm writing to write to and the value I want written */
	I2C1->DR = maddr;
 8001d50:	4a16      	ldr	r2, [pc, #88]	@ (8001dac <I2C1_burstWrite+0xc0>)
 8001d52:	7bbb      	ldrb	r3, [r7, #14]
 8001d54:	6113      	str	r3, [r2, #16]

	for (int i = 0; i < n; i++) {
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	e00f      	b.n	8001d7c <I2C1_burstWrite+0x90>

		/*Wait until data register empty */
		while (!(I2C1->SR1 & SR1_TXE)){}
 8001d5c:	bf00      	nop
 8001d5e:	4b13      	ldr	r3, [pc, #76]	@ (8001dac <I2C1_burstWrite+0xc0>)
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f9      	beq.n	8001d5e <I2C1_burstWrite+0x72>

		/* Transmit memory address */
		I2C1->DR = *data++;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	781a      	ldrb	r2, [r3, #0]
 8001d72:	4b0e      	ldr	r3, [pc, #56]	@ (8001dac <I2C1_burstWrite+0xc0>)
 8001d74:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < n; i++) {
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	dbeb      	blt.n	8001d5c <I2C1_burstWrite+0x70>
	}
	/* Wait until transfer finished */
	while (!(I2C1->SR1 & (SR1_BTF))){}
 8001d84:	bf00      	nop
 8001d86:	4b09      	ldr	r3, [pc, #36]	@ (8001dac <I2C1_burstWrite+0xc0>)
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f9      	beq.n	8001d86 <I2C1_burstWrite+0x9a>

	/* Generate stop */
	I2C1->CR1 |= CR1_STOP;
 8001d92:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <I2C1_burstWrite+0xc0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a05      	ldr	r2, [pc, #20]	@ (8001dac <I2C1_burstWrite+0xc0>)
 8001d98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d9c:	6013      	str	r3, [r2, #0]
}
 8001d9e:	bf00      	nop
 8001da0:	371c      	adds	r7, #28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40005400 	.word	0x40005400

08001db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b0c2      	sub	sp, #264	@ 0x108
 8001db4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001db6:	f000 fea7 	bl	8002b08 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001dba:	f000 f819 	bl	8001df0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001dbe:	f000 f8ab 	bl	8001f18 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001dc2:	f000 f87f 	bl	8001ec4 <MX_USART2_UART_Init>
	MX_BlueNRG_MS_Init();
 8001dc6:	f7fe fbd3 	bl	8000570 <MX_BlueNRG_MS_Init>

	/* Mux *
	 * Note: calling enableChannel closes all the mux outputs before opening the specified channel
	 * Switching between channels puts previously ON channel in idle mode (LED still on but not measuring)
	 * Sensor state of previously ON channel resets to sleep mode with power on reset (i.e. power off then power on)*/
	enableChannel(CHANNEL_0);
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f000 f96b 	bl	80020a6 <enableChannel>
	/* Sensor */
	// Containers to receive channel data
	uint16_t channel_data[CHANNELSIZE];
	uint16_t temp_data[CHANNELSIZE];

	startup();
 8001dd0:	f7ff fa5c 	bl	800128c <startup>
	HAL_Delay(2000);
 8001dd4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001dd8:	f000 ff08 	bl	8002bec <HAL_Delay>
	startMeasurements(true);
 8001ddc:	2001      	movs	r0, #1
 8001dde:	f7ff fe43 	bl	8001a68 <startMeasurements>

	//	unsigned long start = getMillis();
	//	unsigned long duration = 120000; // aka 2mins
	int count = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
//			sleep();
//		}

	/* USER CODE END WHILE */

		MX_BlueNRG_MS_Process();
 8001de8:	f7fe fc84 	bl	80006f4 <MX_BlueNRG_MS_Process>
 8001dec:	e7fc      	b.n	8001de8 <main+0x38>
	...

08001df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b094      	sub	sp, #80	@ 0x50
 8001df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001df6:	f107 0320 	add.w	r3, r7, #32
 8001dfa:	2230      	movs	r2, #48	@ 0x30
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f004 fb1e 	bl	8006440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e04:	f107 030c 	add.w	r3, r7, #12
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e14:	2300      	movs	r3, #0
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	4b28      	ldr	r3, [pc, #160]	@ (8001ebc <SystemClock_Config+0xcc>)
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1c:	4a27      	ldr	r2, [pc, #156]	@ (8001ebc <SystemClock_Config+0xcc>)
 8001e1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e22:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e24:	4b25      	ldr	r3, [pc, #148]	@ (8001ebc <SystemClock_Config+0xcc>)
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e30:	2300      	movs	r3, #0
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	4b22      	ldr	r3, [pc, #136]	@ (8001ec0 <SystemClock_Config+0xd0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e3c:	4a20      	ldr	r2, [pc, #128]	@ (8001ec0 <SystemClock_Config+0xd0>)
 8001e3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec0 <SystemClock_Config+0xd0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e50:	2302      	movs	r3, #2
 8001e52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e54:	2301      	movs	r3, #1
 8001e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e58:	2310      	movs	r3, #16
 8001e5a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e60:	2300      	movs	r3, #0
 8001e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e64:	2308      	movs	r3, #8
 8001e66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001e68:	2340      	movs	r3, #64	@ 0x40
 8001e6a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e70:	2307      	movs	r3, #7
 8001e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e74:	f107 0320 	add.w	r3, r7, #32
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f001 faf3 	bl	8003464 <HAL_RCC_OscConfig>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e84:	f000 f8c6 	bl	8002014 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e88:	230f      	movs	r3, #15
 8001e8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8001e90:	2390      	movs	r3, #144	@ 0x90
 8001e92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e9e:	f107 030c 	add.w	r3, r7, #12
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f001 fd55 	bl	8003954 <HAL_RCC_ClockConfig>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001eb0:	f000 f8b0 	bl	8002014 <Error_Handler>
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	3750      	adds	r7, #80	@ 0x50
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40007000 	.word	0x40007000

08001ec4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001eca:	4a12      	ldr	r2, [pc, #72]	@ (8001f14 <MX_USART2_UART_Init+0x50>)
 8001ecc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ece:	4b10      	ldr	r3, [pc, #64]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001ed0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ed4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001edc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ee8:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001eea:	220c      	movs	r2, #12
 8001eec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eee:	4b08      	ldr	r3, [pc, #32]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001efa:	4805      	ldr	r0, [pc, #20]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001efc:	f002 fa70 	bl	80043e0 <HAL_UART_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f06:	f000 f885 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200001c8 	.word	0x200001c8
 8001f14:	40004400 	.word	0x40004400

08001f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	@ 0x28
 8001f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1e:	f107 0314 	add.w	r3, r7, #20
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
 8001f2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	4b36      	ldr	r3, [pc, #216]	@ (800200c <MX_GPIO_Init+0xf4>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	4a35      	ldr	r2, [pc, #212]	@ (800200c <MX_GPIO_Init+0xf4>)
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3e:	4b33      	ldr	r3, [pc, #204]	@ (800200c <MX_GPIO_Init+0xf4>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	4b2f      	ldr	r3, [pc, #188]	@ (800200c <MX_GPIO_Init+0xf4>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	4a2e      	ldr	r2, [pc, #184]	@ (800200c <MX_GPIO_Init+0xf4>)
 8001f54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5a:	4b2c      	ldr	r3, [pc, #176]	@ (800200c <MX_GPIO_Init+0xf4>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	4b28      	ldr	r3, [pc, #160]	@ (800200c <MX_GPIO_Init+0xf4>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	4a27      	ldr	r2, [pc, #156]	@ (800200c <MX_GPIO_Init+0xf4>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f76:	4b25      	ldr	r3, [pc, #148]	@ (800200c <MX_GPIO_Init+0xf4>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	4b21      	ldr	r3, [pc, #132]	@ (800200c <MX_GPIO_Init+0xf4>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	4a20      	ldr	r2, [pc, #128]	@ (800200c <MX_GPIO_Init+0xf4>)
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f92:	4b1e      	ldr	r3, [pc, #120]	@ (800200c <MX_GPIO_Init+0xf4>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001fa4:	481a      	ldr	r0, [pc, #104]	@ (8002010 <MX_GPIO_Init+0xf8>)
 8001fa6:	f001 fa29 	bl	80033fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001faa:	2301      	movs	r3, #1
 8001fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4814      	ldr	r0, [pc, #80]	@ (8002010 <MX_GPIO_Init+0xf8>)
 8001fc0:	f000 ff9c 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8001fc4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd6:	f107 0314 	add.w	r3, r7, #20
 8001fda:	4619      	mov	r1, r3
 8001fdc:	480c      	ldr	r0, [pc, #48]	@ (8002010 <MX_GPIO_Init+0xf8>)
 8001fde:	f000 ff8d 	bl	8002efc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	2006      	movs	r0, #6
 8001fe8:	f000 feff 	bl	8002dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001fec:	2006      	movs	r0, #6
 8001fee:	f000 ff18 	bl	8002e22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	2028      	movs	r0, #40	@ 0x28
 8001ff8:	f000 fef7 	bl	8002dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ffc:	2028      	movs	r0, #40	@ 0x28
 8001ffe:	f000 ff10 	bl	8002e22 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002002:	bf00      	nop
 8002004:	3728      	adds	r7, #40	@ 0x28
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800
 8002010:	40020000 	.word	0x40020000

08002014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002018:	b672      	cpsid	i
}
 800201a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <Error_Handler+0x8>

08002020 <selectMux_and_control>:
	return false;
}

//If using reconfigured address selector pins from default
void selectMux_and_control(uint8_t mux_address, uint8_t control_byte)
{
 8002020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002024:	b087      	sub	sp, #28
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	460a      	mov	r2, r1
 800202c:	71fb      	strb	r3, [r7, #7]
 800202e:	4613      	mov	r3, r2
 8002030:	71bb      	strb	r3, [r7, #6]
 8002032:	466b      	mov	r3, sp
 8002034:	461e      	mov	r6, r3
	uint8_t bufferSize = 1;
 8002036:	2301      	movs	r3, #1
 8002038:	75fb      	strb	r3, [r7, #23]
	char data[bufferSize];
 800203a:	7df9      	ldrb	r1, [r7, #23]
 800203c:	460b      	mov	r3, r1
 800203e:	3b01      	subs	r3, #1
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	b2cb      	uxtb	r3, r1
 8002044:	2200      	movs	r2, #0
 8002046:	4698      	mov	r8, r3
 8002048:	4691      	mov	r9, r2
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002056:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800205a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800205e:	b2cb      	uxtb	r3, r1
 8002060:	2200      	movs	r2, #0
 8002062:	461c      	mov	r4, r3
 8002064:	4615      	mov	r5, r2
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	00eb      	lsls	r3, r5, #3
 8002070:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002074:	00e2      	lsls	r2, r4, #3
 8002076:	460b      	mov	r3, r1
 8002078:	3307      	adds	r3, #7
 800207a:	08db      	lsrs	r3, r3, #3
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	ebad 0d03 	sub.w	sp, sp, r3
 8002082:	466b      	mov	r3, sp
 8002084:	3300      	adds	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]

	data[0] = control_byte;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	79ba      	ldrb	r2, [r7, #6]
 800208c:	701a      	strb	r2, [r3, #0]
	I2C1_burstWrite(mux_address, 0, bufferSize, data);
 800208e:	7dfa      	ldrb	r2, [r7, #23]
 8002090:	79f8      	ldrb	r0, [r7, #7]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2100      	movs	r1, #0
 8002096:	f7ff fe29 	bl	8001cec <I2C1_burstWrite>
 800209a:	46b5      	mov	sp, r6
}
 800209c:	bf00      	nop
 800209e:	371c      	adds	r7, #28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080020a6 <enableChannel>:

//Default Mux address of 0x70
void enableChannel(uint8_t channel)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	4603      	mov	r3, r0
 80020ae:	71fb      	strb	r3, [r7, #7]
	disableChannels();
 80020b0:	f000 f809 	bl	80020c6 <disableChannels>
	selectMux_and_control(MUX_ADDR, channel);
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	4619      	mov	r1, r3
 80020b8:	2070      	movs	r0, #112	@ 0x70
 80020ba:	f7ff ffb1 	bl	8002020 <selectMux_and_control>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <disableChannels>:

//Disables all channels
void disableChannels()
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	af00      	add	r7, sp, #0
	selectMux_and_control(MUX_ADDR, RESET);
 80020ca:	2100      	movs	r1, #0
 80020cc:	2070      	movs	r0, #112	@ 0x70
 80020ce:	f7ff ffa7 	bl	8002020 <selectMux_and_control>
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	607b      	str	r3, [r7, #4]
 80020e2:	4b10      	ldr	r3, [pc, #64]	@ (8002124 <HAL_MspInit+0x4c>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002124 <HAL_MspInit+0x4c>)
 80020e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002124 <HAL_MspInit+0x4c>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	603b      	str	r3, [r7, #0]
 80020fe:	4b09      	ldr	r3, [pc, #36]	@ (8002124 <HAL_MspInit+0x4c>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002102:	4a08      	ldr	r2, [pc, #32]	@ (8002124 <HAL_MspInit+0x4c>)
 8002104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002108:	6413      	str	r3, [r2, #64]	@ 0x40
 800210a:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <HAL_MspInit+0x4c>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002116:	2007      	movs	r0, #7
 8002118:	f000 fe5c 	bl	8002dd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40023800 	.word	0x40023800

08002128 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	@ 0x28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a19      	ldr	r2, [pc, #100]	@ (80021ac <HAL_UART_MspInit+0x84>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d12b      	bne.n	80021a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	4b18      	ldr	r3, [pc, #96]	@ (80021b0 <HAL_UART_MspInit+0x88>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	4a17      	ldr	r2, [pc, #92]	@ (80021b0 <HAL_UART_MspInit+0x88>)
 8002154:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002158:	6413      	str	r3, [r2, #64]	@ 0x40
 800215a:	4b15      	ldr	r3, [pc, #84]	@ (80021b0 <HAL_UART_MspInit+0x88>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	4b11      	ldr	r3, [pc, #68]	@ (80021b0 <HAL_UART_MspInit+0x88>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	4a10      	ldr	r2, [pc, #64]	@ (80021b0 <HAL_UART_MspInit+0x88>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6313      	str	r3, [r2, #48]	@ 0x30
 8002176:	4b0e      	ldr	r3, [pc, #56]	@ (80021b0 <HAL_UART_MspInit+0x88>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002182:	230c      	movs	r3, #12
 8002184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002192:	2307      	movs	r3, #7
 8002194:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	4619      	mov	r1, r3
 800219c:	4805      	ldr	r0, [pc, #20]	@ (80021b4 <HAL_UART_MspInit+0x8c>)
 800219e:	f000 fead 	bl	8002efc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80021a2:	bf00      	nop
 80021a4:	3728      	adds	r7, #40	@ 0x28
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40004400 	.word	0x40004400
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40020000 	.word	0x40020000

080021b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021bc:	bf00      	nop
 80021be:	e7fd      	b.n	80021bc <NMI_Handler+0x4>

080021c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c4:	bf00      	nop
 80021c6:	e7fd      	b.n	80021c4 <HardFault_Handler+0x4>

080021c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021cc:	bf00      	nop
 80021ce:	e7fd      	b.n	80021cc <MemManage_Handler+0x4>

080021d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021d4:	bf00      	nop
 80021d6:	e7fd      	b.n	80021d4 <BusFault_Handler+0x4>

080021d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021dc:	bf00      	nop
 80021de:	e7fd      	b.n	80021dc <UsageFault_Handler+0x4>

080021e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800220e:	f000 fccd 	bl	8002bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 800221c:	4802      	ldr	r0, [pc, #8]	@ (8002228 <EXTI0_IRQHandler+0x10>)
 800221e:	f000 fe49 	bl	8002eb4 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200000c0 	.word	0x200000c0

0800222c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8002230:	4802      	ldr	r0, [pc, #8]	@ (800223c <EXTI15_10_IRQHandler+0x10>)
 8002232:	f000 fe3f 	bl	8002eb4 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000018 	.word	0x20000018

08002240 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 800224a:	4b12      	ldr	r3, [pc, #72]	@ (8002294 <BSP_SPI1_Init+0x54>)
 800224c:	4a12      	ldr	r2, [pc, #72]	@ (8002298 <BSP_SPI1_Init+0x58>)
 800224e:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8002250:	4b12      	ldr	r3, [pc, #72]	@ (800229c <BSP_SPI1_Init+0x5c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	4911      	ldr	r1, [pc, #68]	@ (800229c <BSP_SPI1_Init+0x5c>)
 8002258:	600a      	str	r2, [r1, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d114      	bne.n	8002288 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 800225e:	480d      	ldr	r0, [pc, #52]	@ (8002294 <BSP_SPI1_Init+0x54>)
 8002260:	f001 ffd4 	bl	800420c <HAL_SPI_GetState>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10e      	bne.n	8002288 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 800226a:	480a      	ldr	r0, [pc, #40]	@ (8002294 <BSP_SPI1_Init+0x54>)
 800226c:	f000 f87c 	bl	8002368 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d108      	bne.n	8002288 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8002276:	4807      	ldr	r0, [pc, #28]	@ (8002294 <BSP_SPI1_Init+0x54>)
 8002278:	f000 f83a 	bl	80022f0 <MX_SPI1_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8002282:	f06f 0307 	mvn.w	r3, #7
 8002286:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8002288:	687b      	ldr	r3, [r7, #4]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000210 	.word	0x20000210
 8002298:	40013000 	.word	0x40013000
 800229c:	20000268 	.word	0x20000268

080022a0 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af02      	add	r7, sp, #8
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	4613      	mov	r3, r2
 80022ac:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022b8:	9200      	str	r2, [sp, #0]
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	68f9      	ldr	r1, [r7, #12]
 80022be:	4807      	ldr	r0, [pc, #28]	@ (80022dc <BSP_SPI1_SendRecv+0x3c>)
 80022c0:	f001 fdfb 	bl	8003eba <HAL_SPI_TransmitReceive>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80022ca:	f06f 0305 	mvn.w	r3, #5
 80022ce:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80022d0:	697b      	ldr	r3, [r7, #20]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000210 	.word	0x20000210

080022e0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80022e4:	f000 fc76 	bl	8002bd4 <HAL_GetTick>
 80022e8:	4603      	mov	r3, r0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a19      	ldr	r2, [pc, #100]	@ (8002364 <MX_SPI1_Init+0x74>)
 8002300:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002308:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002328:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2218      	movs	r2, #24
 800232e:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 10;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	220a      	movs	r2, #10
 8002346:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f001 fd23 	bl	8003d94 <HAL_SPI_Init>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002358:	7bfb      	ldrb	r3, [r7, #15]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40013000 	.word	0x40013000

08002368 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08a      	sub	sp, #40	@ 0x28
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002370:	2300      	movs	r3, #0
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	4b2d      	ldr	r3, [pc, #180]	@ (800242c <SPI1_MspInit+0xc4>)
 8002376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002378:	4a2c      	ldr	r2, [pc, #176]	@ (800242c <SPI1_MspInit+0xc4>)
 800237a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800237e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002380:	4b2a      	ldr	r3, [pc, #168]	@ (800242c <SPI1_MspInit+0xc4>)
 8002382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002384:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238c:	2300      	movs	r3, #0
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	4b26      	ldr	r3, [pc, #152]	@ (800242c <SPI1_MspInit+0xc4>)
 8002392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002394:	4a25      	ldr	r2, [pc, #148]	@ (800242c <SPI1_MspInit+0xc4>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	6313      	str	r3, [r2, #48]	@ 0x30
 800239c:	4b23      	ldr	r3, [pc, #140]	@ (800242c <SPI1_MspInit+0xc4>)
 800239e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a8:	2300      	movs	r3, #0
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	4b1f      	ldr	r3, [pc, #124]	@ (800242c <SPI1_MspInit+0xc4>)
 80023ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b0:	4a1e      	ldr	r2, [pc, #120]	@ (800242c <SPI1_MspInit+0xc4>)
 80023b2:	f043 0302 	orr.w	r3, r3, #2
 80023b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80023b8:	4b1c      	ldr	r3, [pc, #112]	@ (800242c <SPI1_MspInit+0xc4>)
 80023ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 80023c4:	2340      	movs	r3, #64	@ 0x40
 80023c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d0:	2303      	movs	r3, #3
 80023d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 80023d4:	2305      	movs	r3, #5
 80023d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	4619      	mov	r1, r3
 80023de:	4814      	ldr	r0, [pc, #80]	@ (8002430 <SPI1_MspInit+0xc8>)
 80023e0:	f000 fd8c 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80023e4:	2380      	movs	r3, #128	@ 0x80
 80023e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e8:	2302      	movs	r3, #2
 80023ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f0:	2303      	movs	r3, #3
 80023f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80023f4:	2305      	movs	r3, #5
 80023f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	4619      	mov	r1, r3
 80023fe:	480c      	ldr	r0, [pc, #48]	@ (8002430 <SPI1_MspInit+0xc8>)
 8002400:	f000 fd7c 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8002404:	2308      	movs	r3, #8
 8002406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002408:	2302      	movs	r3, #2
 800240a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002410:	2303      	movs	r3, #3
 8002412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8002414:	2305      	movs	r3, #5
 8002416:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002418:	f107 0314 	add.w	r3, r7, #20
 800241c:	4619      	mov	r1, r3
 800241e:	4805      	ldr	r0, [pc, #20]	@ (8002434 <SPI1_MspInit+0xcc>)
 8002420:	f000 fd6c 	bl	8002efc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8002424:	bf00      	nop
 8002426:	3728      	adds	r7, #40	@ 0x28
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40023800 	.word	0x40023800
 8002430:	40020000 	.word	0x40020000
 8002434:	40020400 	.word	0x40020400

08002438 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	e00a      	b.n	8002460 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800244a:	f3af 8000 	nop.w
 800244e:	4601      	mov	r1, r0
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	60ba      	str	r2, [r7, #8]
 8002456:	b2ca      	uxtb	r2, r1
 8002458:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	3301      	adds	r3, #1
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	429a      	cmp	r2, r3
 8002466:	dbf0      	blt.n	800244a <_read+0x12>
  }

  return len;
 8002468:	687b      	ldr	r3, [r7, #4]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	e009      	b.n	8002498 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	60ba      	str	r2, [r7, #8]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f000 fad5 	bl	8002a3c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	3301      	adds	r3, #1
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	429a      	cmp	r2, r3
 800249e:	dbf1      	blt.n	8002484 <_write+0x12>
  }
  return len;
 80024a0:	687b      	ldr	r3, [r7, #4]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <_close>:

int _close(int file)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024d2:	605a      	str	r2, [r3, #4]
  return 0;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <_isatty>:

int _isatty(int file)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024ea:	2301      	movs	r3, #1
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800251c:	4a14      	ldr	r2, [pc, #80]	@ (8002570 <_sbrk+0x5c>)
 800251e:	4b15      	ldr	r3, [pc, #84]	@ (8002574 <_sbrk+0x60>)
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002528:	4b13      	ldr	r3, [pc, #76]	@ (8002578 <_sbrk+0x64>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d102      	bne.n	8002536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002530:	4b11      	ldr	r3, [pc, #68]	@ (8002578 <_sbrk+0x64>)
 8002532:	4a12      	ldr	r2, [pc, #72]	@ (800257c <_sbrk+0x68>)
 8002534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002536:	4b10      	ldr	r3, [pc, #64]	@ (8002578 <_sbrk+0x64>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4413      	add	r3, r2
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	429a      	cmp	r2, r3
 8002542:	d207      	bcs.n	8002554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002544:	f003 ffca 	bl	80064dc <__errno>
 8002548:	4603      	mov	r3, r0
 800254a:	220c      	movs	r2, #12
 800254c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800254e:	f04f 33ff 	mov.w	r3, #4294967295
 8002552:	e009      	b.n	8002568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002554:	4b08      	ldr	r3, [pc, #32]	@ (8002578 <_sbrk+0x64>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800255a:	4b07      	ldr	r3, [pc, #28]	@ (8002578 <_sbrk+0x64>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	4a05      	ldr	r2, [pc, #20]	@ (8002578 <_sbrk+0x64>)
 8002564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002566:	68fb      	ldr	r3, [r7, #12]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20018000 	.word	0x20018000
 8002574:	00000400 	.word	0x00000400
 8002578:	2000026c 	.word	0x2000026c
 800257c:	200006f8 	.word	0x200006f8

08002580 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002584:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <SystemInit+0x20>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800258a:	4a05      	ldr	r2, [pc, #20]	@ (80025a0 <SystemInit+0x20>)
 800258c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002590:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <uart2_rxtx_init>:
//	uart2_write(ch);
//	return ch;
//}

void uart2_rxtx_init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
	/****************Configure uart  pin using gpio pin***************/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 80025a8:	4b32      	ldr	r3, [pc, #200]	@ (8002674 <uart2_rxtx_init+0xd0>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ac:	4a31      	ldr	r2, [pc, #196]	@ (8002674 <uart2_rxtx_init+0xd0>)
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	6313      	str	r3, [r2, #48]	@ 0x30


	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~ (1U<<4);
 80025b4:	4b30      	ldr	r3, [pc, #192]	@ (8002678 <uart2_rxtx_init+0xd4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a2f      	ldr	r2, [pc, #188]	@ (8002678 <uart2_rxtx_init+0xd4>)
 80025ba:	f023 0310 	bic.w	r3, r3, #16
 80025be:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80025c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002678 <uart2_rxtx_init+0xd4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a2c      	ldr	r2, [pc, #176]	@ (8002678 <uart2_rxtx_init+0xd4>)
 80025c6:	f043 0320 	orr.w	r3, r3, #32
 80025ca:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0]|= (1U<<8);
 80025cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002678 <uart2_rxtx_init+0xd4>)
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	4a29      	ldr	r2, [pc, #164]	@ (8002678 <uart2_rxtx_init+0xd4>)
 80025d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025d6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<9);
 80025d8:	4b27      	ldr	r3, [pc, #156]	@ (8002678 <uart2_rxtx_init+0xd4>)
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	4a26      	ldr	r2, [pc, #152]	@ (8002678 <uart2_rxtx_init+0xd4>)
 80025de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<10);
 80025e4:	4b24      	ldr	r3, [pc, #144]	@ (8002678 <uart2_rxtx_init+0xd4>)
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	4a23      	ldr	r2, [pc, #140]	@ (8002678 <uart2_rxtx_init+0xd4>)
 80025ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~ (1U<<11);
 80025f0:	4b21      	ldr	r3, [pc, #132]	@ (8002678 <uart2_rxtx_init+0xd4>)
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	4a20      	ldr	r2, [pc, #128]	@ (8002678 <uart2_rxtx_init+0xd4>)
 80025f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80025fa:	6213      	str	r3, [r2, #32]

	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~ (1U<<6);
 80025fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002678 <uart2_rxtx_init+0xd4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a1d      	ldr	r2, [pc, #116]	@ (8002678 <uart2_rxtx_init+0xd4>)
 8002602:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002606:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 8002608:	4b1b      	ldr	r3, [pc, #108]	@ (8002678 <uart2_rxtx_init+0xd4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a1a      	ldr	r2, [pc, #104]	@ (8002678 <uart2_rxtx_init+0xd4>)
 800260e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002612:	6013      	str	r3, [r2, #0]

	/*Set PA3 alternate function type to UART_RX (AF07)*/
	GPIOA->AFR[0]|= (1U<<12);
 8002614:	4b18      	ldr	r3, [pc, #96]	@ (8002678 <uart2_rxtx_init+0xd4>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4a17      	ldr	r2, [pc, #92]	@ (8002678 <uart2_rxtx_init+0xd4>)
 800261a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800261e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<13);
 8002620:	4b15      	ldr	r3, [pc, #84]	@ (8002678 <uart2_rxtx_init+0xd4>)
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	4a14      	ldr	r2, [pc, #80]	@ (8002678 <uart2_rxtx_init+0xd4>)
 8002626:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800262a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<14);
 800262c:	4b12      	ldr	r3, [pc, #72]	@ (8002678 <uart2_rxtx_init+0xd4>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	4a11      	ldr	r2, [pc, #68]	@ (8002678 <uart2_rxtx_init+0xd4>)
 8002632:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002636:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~ (1U<<15);
 8002638:	4b0f      	ldr	r3, [pc, #60]	@ (8002678 <uart2_rxtx_init+0xd4>)
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	4a0e      	ldr	r2, [pc, #56]	@ (8002678 <uart2_rxtx_init+0xd4>)
 800263e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002642:	6213      	str	r3, [r2, #32]



	/****************Configure uart module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= USART2EN;
 8002644:	4b0b      	ldr	r3, [pc, #44]	@ (8002674 <uart2_rxtx_init+0xd0>)
 8002646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002648:	4a0a      	ldr	r2, [pc, #40]	@ (8002674 <uart2_rxtx_init+0xd0>)
 800264a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800264e:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 8002650:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002654:	4909      	ldr	r1, [pc, #36]	@ (800267c <uart2_rxtx_init+0xd8>)
 8002656:	480a      	ldr	r0, [pc, #40]	@ (8002680 <uart2_rxtx_init+0xdc>)
 8002658:	f000 f814 	bl	8002684 <uart_set_baudrate>

	/*Configure the transfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 800265c:	4b08      	ldr	r3, [pc, #32]	@ (8002680 <uart2_rxtx_init+0xdc>)
 800265e:	220c      	movs	r2, #12
 8002660:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	USART2->CR1 |= CR1_UE;
 8002662:	4b07      	ldr	r3, [pc, #28]	@ (8002680 <uart2_rxtx_init+0xdc>)
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	4a06      	ldr	r2, [pc, #24]	@ (8002680 <uart2_rxtx_init+0xdc>)
 8002668:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800266c:	60d3      	str	r3, [r2, #12]

}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40023800 	.word	0x40023800
 8002678:	40020000 	.word	0x40020000
 800267c:	00f42400 	.word	0x00f42400
 8002680:	40004400 	.word	0x40004400

08002684 <uart_set_baudrate>:
	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	68b8      	ldr	r0, [r7, #8]
 8002694:	f000 f808 	bl	80026a8 <compute_uart_bd>
 8002698:	4603      	mov	r3, r0
 800269a:	461a      	mov	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	609a      	str	r2, [r3, #8]
}
 80026a0:	bf00      	nop
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	085a      	lsrs	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	441a      	add	r2, r3
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	b29b      	uxth	r3, r3
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002708 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80026d4:	f7ff ff54 	bl	8002580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026d8:	480c      	ldr	r0, [pc, #48]	@ (800270c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026da:	490d      	ldr	r1, [pc, #52]	@ (8002710 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002714 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026e0:	e002      	b.n	80026e8 <LoopCopyDataInit>

080026e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026e6:	3304      	adds	r3, #4

080026e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026ec:	d3f9      	bcc.n	80026e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002718 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026f0:	4c0a      	ldr	r4, [pc, #40]	@ (800271c <LoopFillZerobss+0x22>)
  movs r3, #0
 80026f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026f4:	e001      	b.n	80026fa <LoopFillZerobss>

080026f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026f8:	3204      	adds	r2, #4

080026fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026fc:	d3fb      	bcc.n	80026f6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80026fe:	f003 fef3 	bl	80064e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002702:	f7ff fb55 	bl	8001db0 <main>
  bx  lr    
 8002706:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002708:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800270c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002710:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002714:	080070f0 	.word	0x080070f0
  ldr r2, =_sbss
 8002718:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800271c:	200006f8 	.word	0x200006f8

08002720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002720:	e7fe      	b.n	8002720 <ADC_IRQHandler>
	...

08002724 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	4a04      	ldr	r2, [pc, #16]	@ (8002744 <BSP_LED_Init+0x20>)
 8002732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002736:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	08007098 	.word	0x08007098

08002748 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	4a06      	ldr	r2, [pc, #24]	@ (8002770 <BSP_LED_Toggle+0x28>)
 8002756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275a:	2220      	movs	r2, #32
 800275c:	4611      	mov	r1, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f000 fe65 	bl	800342e <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000010 	.word	0x20000010

08002774 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	4b1c      	ldr	r3, [pc, #112]	@ (80027f0 <LED_USER_GPIO_Init+0x7c>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	4a1b      	ldr	r2, [pc, #108]	@ (80027f0 <LED_USER_GPIO_Init+0x7c>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6313      	str	r3, [r2, #48]	@ 0x30
 800278a:	4b19      	ldr	r3, [pc, #100]	@ (80027f0 <LED_USER_GPIO_Init+0x7c>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002796:	f107 030c 	add.w	r3, r7, #12
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	60da      	str	r2, [r3, #12]
 80027a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	607b      	str	r3, [r7, #4]
 80027aa:	4b11      	ldr	r3, [pc, #68]	@ (80027f0 <LED_USER_GPIO_Init+0x7c>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	4a10      	ldr	r2, [pc, #64]	@ (80027f0 <LED_USER_GPIO_Init+0x7c>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b6:	4b0e      	ldr	r3, [pc, #56]	@ (80027f0 <LED_USER_GPIO_Init+0x7c>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	607b      	str	r3, [r7, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 80027c2:	2200      	movs	r2, #0
 80027c4:	2120      	movs	r1, #32
 80027c6:	480b      	ldr	r0, [pc, #44]	@ (80027f4 <LED_USER_GPIO_Init+0x80>)
 80027c8:	f000 fe18 	bl	80033fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 80027cc:	2320      	movs	r3, #32
 80027ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d0:	2301      	movs	r3, #1
 80027d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d8:	2300      	movs	r3, #0
 80027da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80027dc:	f107 030c 	add.w	r3, r7, #12
 80027e0:	4619      	mov	r1, r3
 80027e2:	4804      	ldr	r0, [pc, #16]	@ (80027f4 <LED_USER_GPIO_Init+0x80>)
 80027e4:	f000 fb8a 	bl	8002efc <HAL_GPIO_Init>

}
 80027e8:	bf00      	nop
 80027ea:	3720      	adds	r7, #32
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40020000 	.word	0x40020000

080027f8 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	460a      	mov	r2, r1
 8002802:	71fb      	strb	r3, [r7, #7]
 8002804:	4613      	mov	r3, r2
 8002806:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002808:	2300      	movs	r3, #0
 800280a:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	4a1f      	ldr	r2, [pc, #124]	@ (800288c <BSP_PB_Init+0x94>)
 8002810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002814:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8002816:	79bb      	ldrb	r3, [r7, #6]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d132      	bne.n	8002882 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4a1b      	ldr	r2, [pc, #108]	@ (8002890 <BSP_PB_Init+0x98>)
 8002822:	441a      	add	r2, r3
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	491b      	ldr	r1, [pc, #108]	@ (8002894 <BSP_PB_Init+0x9c>)
 8002828:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800282c:	4619      	mov	r1, r3
 800282e:	4610      	mov	r0, r2
 8002830:	f000 fb2b 	bl	8002e8a <HAL_EXTI_GetHandle>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800283a:	f06f 0303 	mvn.w	r3, #3
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	e01f      	b.n	8002882 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4a12      	ldr	r2, [pc, #72]	@ (8002890 <BSP_PB_Init+0x98>)
 8002848:	1898      	adds	r0, r3, r2
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	4a12      	ldr	r2, [pc, #72]	@ (8002898 <BSP_PB_Init+0xa0>)
 800284e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002852:	461a      	mov	r2, r3
 8002854:	2100      	movs	r1, #0
 8002856:	f000 fafe 	bl	8002e56 <HAL_EXTI_RegisterCallback>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002860:	f06f 0303 	mvn.w	r3, #3
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	e00c      	b.n	8002882 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002868:	2028      	movs	r0, #40	@ 0x28
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	4a0b      	ldr	r2, [pc, #44]	@ (800289c <BSP_PB_Init+0xa4>)
 800286e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002872:	2200      	movs	r2, #0
 8002874:	4619      	mov	r1, r3
 8002876:	f000 fab8 	bl	8002dea <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800287a:	2328      	movs	r3, #40	@ 0x28
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fad0 	bl	8002e22 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8002882:	68fb      	ldr	r3, [r7, #12]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	0800709c 	.word	0x0800709c
 8002890:	20000018 	.word	0x20000018
 8002894:	080070a0 	.word	0x080070a0
 8002898:	080070a4 	.word	0x080070a4
 800289c:	080070a8 	.word	0x080070a8

080028a0 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	4a09      	ldr	r2, [pc, #36]	@ (80028d4 <BSP_PB_GetState+0x34>)
 80028ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028b6:	4611      	mov	r1, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fd87 	bl	80033cc <HAL_GPIO_ReadPin>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	bf0c      	ite	eq
 80028c4:	2301      	moveq	r3, #1
 80028c6:	2300      	movne	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000014 	.word	0x20000014

080028d8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80028dc:	2000      	movs	r0, #0
 80028de:	f7fd ff6f 	bl	80007c0 <BSP_PB_Callback>
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b088      	sub	sp, #32
 80028ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	4b1a      	ldr	r3, [pc, #104]	@ (800295c <BUTTON_USER_GPIO_Init+0x74>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	4a19      	ldr	r2, [pc, #100]	@ (800295c <BUTTON_USER_GPIO_Init+0x74>)
 80028f8:	f043 0304 	orr.w	r3, r3, #4
 80028fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028fe:	4b17      	ldr	r3, [pc, #92]	@ (800295c <BUTTON_USER_GPIO_Init+0x74>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290a:	f107 030c 	add.w	r3, r7, #12
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	60da      	str	r2, [r3, #12]
 8002918:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	4b0f      	ldr	r3, [pc, #60]	@ (800295c <BUTTON_USER_GPIO_Init+0x74>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002922:	4a0e      	ldr	r2, [pc, #56]	@ (800295c <BUTTON_USER_GPIO_Init+0x74>)
 8002924:	f043 0304 	orr.w	r3, r3, #4
 8002928:	6313      	str	r3, [r2, #48]	@ 0x30
 800292a:	4b0c      	ldr	r3, [pc, #48]	@ (800295c <BUTTON_USER_GPIO_Init+0x74>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	607b      	str	r3, [r7, #4]
 8002934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8002936:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800293a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800293c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002940:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8002946:	f107 030c 	add.w	r3, r7, #12
 800294a:	4619      	mov	r1, r3
 800294c:	4804      	ldr	r0, [pc, #16]	@ (8002960 <BUTTON_USER_GPIO_Init+0x78>)
 800294e:	f000 fad5 	bl	8002efc <HAL_GPIO_Init>

}
 8002952:	bf00      	nop
 8002954:	3720      	adds	r7, #32
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40023800 	.word	0x40023800
 8002960:	40020800 	.word	0x40020800

08002964 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d903      	bls.n	8002980 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002978:	f06f 0301 	mvn.w	r3, #1
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	e025      	b.n	80029cc <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	79fa      	ldrb	r2, [r7, #7]
 8002984:	4914      	ldr	r1, [pc, #80]	@ (80029d8 <BSP_COM_Init+0x74>)
 8002986:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800298a:	4814      	ldr	r0, [pc, #80]	@ (80029dc <BSP_COM_Init+0x78>)
 800298c:	4613      	mov	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4413      	add	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4403      	add	r3, r0
 8002996:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8002998:	79fa      	ldrb	r2, [r7, #7]
 800299a:	4613      	mov	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4413      	add	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4a0e      	ldr	r2, [pc, #56]	@ (80029dc <BSP_COM_Init+0x78>)
 80029a4:	4413      	add	r3, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 f864 	bl	8002a74 <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 80029ac:	79fa      	ldrb	r2, [r7, #7]
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4413      	add	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4a09      	ldr	r2, [pc, #36]	@ (80029dc <BSP_COM_Init+0x78>)
 80029b8:	4413      	add	r3, r2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 f810 	bl	80029e0 <MX_USART1_UART_Init>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80029c6:	f06f 0303 	mvn.w	r3, #3
 80029ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80029cc:	68fb      	ldr	r3, [r7, #12]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000020 	.word	0x20000020
 80029dc:	20000270 	.word	0x20000270

080029e0 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a12      	ldr	r2, [pc, #72]	@ (8002a38 <MX_USART1_UART_Init+0x58>)
 80029f0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80029f8:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	220c      	movs	r2, #12
 8002a10:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f001 fcde 	bl	80043e0 <HAL_UART_Init>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <MX_USART1_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40011000 	.word	0x40011000

08002a3c <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8002a44:	4b09      	ldr	r3, [pc, #36]	@ (8002a6c <__io_putchar+0x30>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4413      	add	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4a07      	ldr	r2, [pc, #28]	@ (8002a70 <__io_putchar+0x34>)
 8002a54:	1898      	adds	r0, r3, r2
 8002a56:	1d39      	adds	r1, r7, #4
 8002a58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f001 fd0f 	bl	8004480 <HAL_UART_Transmit>
  return ch;
 8002a62:	687b      	ldr	r3, [r7, #4]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	200002b8 	.word	0x200002b8
 8002a70:	20000270 	.word	0x20000270

08002a74 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08a      	sub	sp, #40	@ 0x28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	4b1f      	ldr	r3, [pc, #124]	@ (8002b00 <USART1_MspInit+0x8c>)
 8002a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a84:	4a1e      	ldr	r2, [pc, #120]	@ (8002b00 <USART1_MspInit+0x8c>)
 8002a86:	f043 0310 	orr.w	r3, r3, #16
 8002a8a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8002b00 <USART1_MspInit+0x8c>)
 8002a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a90:	f003 0310 	and.w	r3, r3, #16
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	4b18      	ldr	r3, [pc, #96]	@ (8002b00 <USART1_MspInit+0x8c>)
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa0:	4a17      	ldr	r2, [pc, #92]	@ (8002b00 <USART1_MspInit+0x8c>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aa8:	4b15      	ldr	r3, [pc, #84]	@ (8002b00 <USART1_MspInit+0x8c>)
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8002ab4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aba:	2302      	movs	r3, #2
 8002abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 8002ac6:	2307      	movs	r3, #7
 8002ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8002aca:	f107 0314 	add.w	r3, r7, #20
 8002ace:	4619      	mov	r1, r3
 8002ad0:	480c      	ldr	r0, [pc, #48]	@ (8002b04 <USART1_MspInit+0x90>)
 8002ad2:	f000 fa13 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 8002ad6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002adc:	2302      	movs	r3, #2
 8002ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 8002ae8:	2307      	movs	r3, #7
 8002aea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8002aec:	f107 0314 	add.w	r3, r7, #20
 8002af0:	4619      	mov	r1, r3
 8002af2:	4804      	ldr	r0, [pc, #16]	@ (8002b04 <USART1_MspInit+0x90>)
 8002af4:	f000 fa02 	bl	8002efc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 8002af8:	bf00      	nop
 8002afa:	3728      	adds	r7, #40	@ 0x28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40023800 	.word	0x40023800
 8002b04:	40020000 	.word	0x40020000

08002b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b48 <HAL_Init+0x40>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a0d      	ldr	r2, [pc, #52]	@ (8002b48 <HAL_Init+0x40>)
 8002b12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b18:	4b0b      	ldr	r3, [pc, #44]	@ (8002b48 <HAL_Init+0x40>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8002b48 <HAL_Init+0x40>)
 8002b1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b24:	4b08      	ldr	r3, [pc, #32]	@ (8002b48 <HAL_Init+0x40>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a07      	ldr	r2, [pc, #28]	@ (8002b48 <HAL_Init+0x40>)
 8002b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b30:	2003      	movs	r0, #3
 8002b32:	f000 f94f 	bl	8002dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b36:	2000      	movs	r0, #0
 8002b38:	f000 f808 	bl	8002b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b3c:	f7ff facc 	bl	80020d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40023c00 	.word	0x40023c00

08002b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b54:	4b12      	ldr	r3, [pc, #72]	@ (8002ba0 <HAL_InitTick+0x54>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	4b12      	ldr	r3, [pc, #72]	@ (8002ba4 <HAL_InitTick+0x58>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 f967 	bl	8002e3e <HAL_SYSTICK_Config>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e00e      	b.n	8002b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b0f      	cmp	r3, #15
 8002b7e:	d80a      	bhi.n	8002b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b80:	2200      	movs	r2, #0
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	f04f 30ff 	mov.w	r0, #4294967295
 8002b88:	f000 f92f 	bl	8002dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b8c:	4a06      	ldr	r2, [pc, #24]	@ (8002ba8 <HAL_InitTick+0x5c>)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	e000      	b.n	8002b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	2000000c 	.word	0x2000000c
 8002ba4:	20000028 	.word	0x20000028
 8002ba8:	20000024 	.word	0x20000024

08002bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bb0:	4b06      	ldr	r3, [pc, #24]	@ (8002bcc <HAL_IncTick+0x20>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4b06      	ldr	r3, [pc, #24]	@ (8002bd0 <HAL_IncTick+0x24>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4413      	add	r3, r2
 8002bbc:	4a04      	ldr	r2, [pc, #16]	@ (8002bd0 <HAL_IncTick+0x24>)
 8002bbe:	6013      	str	r3, [r2, #0]
}
 8002bc0:	bf00      	nop
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	20000028 	.word	0x20000028
 8002bd0:	200002bc 	.word	0x200002bc

08002bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bd8:	4b03      	ldr	r3, [pc, #12]	@ (8002be8 <HAL_GetTick+0x14>)
 8002bda:	681b      	ldr	r3, [r3, #0]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	200002bc 	.word	0x200002bc

08002bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bf4:	f7ff ffee 	bl	8002bd4 <HAL_GetTick>
 8002bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c04:	d005      	beq.n	8002c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c06:	4b0a      	ldr	r3, [pc, #40]	@ (8002c30 <HAL_Delay+0x44>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4413      	add	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c12:	bf00      	nop
 8002c14:	f7ff ffde 	bl	8002bd4 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d8f7      	bhi.n	8002c14 <HAL_Delay+0x28>
  {
  }
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000028 	.word	0x20000028

08002c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c44:	4b0c      	ldr	r3, [pc, #48]	@ (8002c78 <__NVIC_SetPriorityGrouping+0x44>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c50:	4013      	ands	r3, r2
 8002c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c66:	4a04      	ldr	r2, [pc, #16]	@ (8002c78 <__NVIC_SetPriorityGrouping+0x44>)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	60d3      	str	r3, [r2, #12]
}
 8002c6c:	bf00      	nop
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c80:	4b04      	ldr	r3, [pc, #16]	@ (8002c94 <__NVIC_GetPriorityGrouping+0x18>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	0a1b      	lsrs	r3, r3, #8
 8002c86:	f003 0307 	and.w	r3, r3, #7
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	db0b      	blt.n	8002cc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	f003 021f 	and.w	r2, r3, #31
 8002cb0:	4907      	ldr	r1, [pc, #28]	@ (8002cd0 <__NVIC_EnableIRQ+0x38>)
 8002cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	2001      	movs	r0, #1
 8002cba:	fa00 f202 	lsl.w	r2, r0, r2
 8002cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	e000e100 	.word	0xe000e100

08002cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	6039      	str	r1, [r7, #0]
 8002cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	db0a      	blt.n	8002cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	490c      	ldr	r1, [pc, #48]	@ (8002d20 <__NVIC_SetPriority+0x4c>)
 8002cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf2:	0112      	lsls	r2, r2, #4
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cfc:	e00a      	b.n	8002d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	4908      	ldr	r1, [pc, #32]	@ (8002d24 <__NVIC_SetPriority+0x50>)
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	3b04      	subs	r3, #4
 8002d0c:	0112      	lsls	r2, r2, #4
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	440b      	add	r3, r1
 8002d12:	761a      	strb	r2, [r3, #24]
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	e000e100 	.word	0xe000e100
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b089      	sub	sp, #36	@ 0x24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f1c3 0307 	rsb	r3, r3, #7
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	bf28      	it	cs
 8002d46:	2304      	movcs	r3, #4
 8002d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	2b06      	cmp	r3, #6
 8002d50:	d902      	bls.n	8002d58 <NVIC_EncodePriority+0x30>
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3b03      	subs	r3, #3
 8002d56:	e000      	b.n	8002d5a <NVIC_EncodePriority+0x32>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43da      	mvns	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d70:	f04f 31ff 	mov.w	r1, #4294967295
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7a:	43d9      	mvns	r1, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d80:	4313      	orrs	r3, r2
         );
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3724      	adds	r7, #36	@ 0x24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
	...

08002d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002da0:	d301      	bcc.n	8002da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002da2:	2301      	movs	r3, #1
 8002da4:	e00f      	b.n	8002dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002da6:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd0 <SysTick_Config+0x40>)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dae:	210f      	movs	r1, #15
 8002db0:	f04f 30ff 	mov.w	r0, #4294967295
 8002db4:	f7ff ff8e 	bl	8002cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db8:	4b05      	ldr	r3, [pc, #20]	@ (8002dd0 <SysTick_Config+0x40>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dbe:	4b04      	ldr	r3, [pc, #16]	@ (8002dd0 <SysTick_Config+0x40>)
 8002dc0:	2207      	movs	r2, #7
 8002dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	e000e010 	.word	0xe000e010

08002dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff ff29 	bl	8002c34 <__NVIC_SetPriorityGrouping>
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b086      	sub	sp, #24
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	4603      	mov	r3, r0
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	607a      	str	r2, [r7, #4]
 8002df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dfc:	f7ff ff3e 	bl	8002c7c <__NVIC_GetPriorityGrouping>
 8002e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68b9      	ldr	r1, [r7, #8]
 8002e06:	6978      	ldr	r0, [r7, #20]
 8002e08:	f7ff ff8e 	bl	8002d28 <NVIC_EncodePriority>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e12:	4611      	mov	r1, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff ff5d 	bl	8002cd4 <__NVIC_SetPriority>
}
 8002e1a:	bf00      	nop
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	4603      	mov	r3, r0
 8002e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff ff31 	bl	8002c98 <__NVIC_EnableIRQ>
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7ff ffa2 	bl	8002d90 <SysTick_Config>
 8002e4c:	4603      	mov	r3, r0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002e56:	b480      	push	{r7}
 8002e58:	b087      	sub	sp, #28
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	607a      	str	r2, [r7, #4]
 8002e62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002e68:	7afb      	ldrb	r3, [r7, #11]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d103      	bne.n	8002e76 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	605a      	str	r2, [r3, #4]
      break;
 8002e74:	e002      	b.n	8002e7c <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	75fb      	strb	r3, [r7, #23]
      break;
 8002e7a:	bf00      	nop
  }

  return status;
 8002e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	371c      	adds	r7, #28
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e003      	b.n	8002ea6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
  }
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 031f 	and.w	r3, r3, #31
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef8 <HAL_EXTI_IRQHandler+0x44>)
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d009      	beq.n	8002ef0 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8002edc:	4a06      	ldr	r2, [pc, #24]	@ (8002ef8 <HAL_EXTI_IRQHandler+0x44>)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4798      	blx	r3
    }
  }
}
 8002ef0:	bf00      	nop
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40013c00 	.word	0x40013c00

08002efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b089      	sub	sp, #36	@ 0x24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	e159      	b.n	80031cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f18:	2201      	movs	r2, #1
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	f040 8148 	bne.w	80031c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d005      	beq.n	8002f4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d130      	bne.n	8002fb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	2203      	movs	r2, #3
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f84:	2201      	movs	r2, #1
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	091b      	lsrs	r3, r3, #4
 8002f9a:	f003 0201 	and.w	r2, r3, #1
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d017      	beq.n	8002fec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d123      	bne.n	8003040 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	08da      	lsrs	r2, r3, #3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3208      	adds	r2, #8
 8003000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003004:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	220f      	movs	r2, #15
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	08da      	lsrs	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3208      	adds	r2, #8
 800303a:	69b9      	ldr	r1, [r7, #24]
 800303c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	2203      	movs	r2, #3
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0203 	and.w	r2, r3, #3
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80a2 	beq.w	80031c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	4b57      	ldr	r3, [pc, #348]	@ (80031e4 <HAL_GPIO_Init+0x2e8>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308a:	4a56      	ldr	r2, [pc, #344]	@ (80031e4 <HAL_GPIO_Init+0x2e8>)
 800308c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003090:	6453      	str	r3, [r2, #68]	@ 0x44
 8003092:	4b54      	ldr	r3, [pc, #336]	@ (80031e4 <HAL_GPIO_Init+0x2e8>)
 8003094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003096:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800309e:	4a52      	ldr	r2, [pc, #328]	@ (80031e8 <HAL_GPIO_Init+0x2ec>)
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	089b      	lsrs	r3, r3, #2
 80030a4:	3302      	adds	r3, #2
 80030a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	220f      	movs	r2, #15
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a49      	ldr	r2, [pc, #292]	@ (80031ec <HAL_GPIO_Init+0x2f0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d019      	beq.n	80030fe <HAL_GPIO_Init+0x202>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a48      	ldr	r2, [pc, #288]	@ (80031f0 <HAL_GPIO_Init+0x2f4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d013      	beq.n	80030fa <HAL_GPIO_Init+0x1fe>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a47      	ldr	r2, [pc, #284]	@ (80031f4 <HAL_GPIO_Init+0x2f8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00d      	beq.n	80030f6 <HAL_GPIO_Init+0x1fa>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a46      	ldr	r2, [pc, #280]	@ (80031f8 <HAL_GPIO_Init+0x2fc>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d007      	beq.n	80030f2 <HAL_GPIO_Init+0x1f6>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a45      	ldr	r2, [pc, #276]	@ (80031fc <HAL_GPIO_Init+0x300>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d101      	bne.n	80030ee <HAL_GPIO_Init+0x1f2>
 80030ea:	2304      	movs	r3, #4
 80030ec:	e008      	b.n	8003100 <HAL_GPIO_Init+0x204>
 80030ee:	2307      	movs	r3, #7
 80030f0:	e006      	b.n	8003100 <HAL_GPIO_Init+0x204>
 80030f2:	2303      	movs	r3, #3
 80030f4:	e004      	b.n	8003100 <HAL_GPIO_Init+0x204>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e002      	b.n	8003100 <HAL_GPIO_Init+0x204>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_GPIO_Init+0x204>
 80030fe:	2300      	movs	r3, #0
 8003100:	69fa      	ldr	r2, [r7, #28]
 8003102:	f002 0203 	and.w	r2, r2, #3
 8003106:	0092      	lsls	r2, r2, #2
 8003108:	4093      	lsls	r3, r2
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4313      	orrs	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003110:	4935      	ldr	r1, [pc, #212]	@ (80031e8 <HAL_GPIO_Init+0x2ec>)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	3302      	adds	r3, #2
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800311e:	4b38      	ldr	r3, [pc, #224]	@ (8003200 <HAL_GPIO_Init+0x304>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003142:	4a2f      	ldr	r2, [pc, #188]	@ (8003200 <HAL_GPIO_Init+0x304>)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003148:	4b2d      	ldr	r3, [pc, #180]	@ (8003200 <HAL_GPIO_Init+0x304>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800316c:	4a24      	ldr	r2, [pc, #144]	@ (8003200 <HAL_GPIO_Init+0x304>)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003172:	4b23      	ldr	r3, [pc, #140]	@ (8003200 <HAL_GPIO_Init+0x304>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003196:	4a1a      	ldr	r2, [pc, #104]	@ (8003200 <HAL_GPIO_Init+0x304>)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800319c:	4b18      	ldr	r3, [pc, #96]	@ (8003200 <HAL_GPIO_Init+0x304>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031c0:	4a0f      	ldr	r2, [pc, #60]	@ (8003200 <HAL_GPIO_Init+0x304>)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3301      	adds	r3, #1
 80031ca:	61fb      	str	r3, [r7, #28]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	2b0f      	cmp	r3, #15
 80031d0:	f67f aea2 	bls.w	8002f18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop
 80031d8:	3724      	adds	r7, #36	@ 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40013800 	.word	0x40013800
 80031ec:	40020000 	.word	0x40020000
 80031f0:	40020400 	.word	0x40020400
 80031f4:	40020800 	.word	0x40020800
 80031f8:	40020c00 	.word	0x40020c00
 80031fc:	40021000 	.word	0x40021000
 8003200:	40013c00 	.word	0x40013c00

08003204 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003216:	2300      	movs	r3, #0
 8003218:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800321a:	2300      	movs	r3, #0
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	e0bb      	b.n	8003398 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003220:	2201      	movs	r2, #1
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4013      	ands	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	429a      	cmp	r2, r3
 8003238:	f040 80ab 	bne.w	8003392 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800323c:	4a5c      	ldr	r2, [pc, #368]	@ (80033b0 <HAL_GPIO_DeInit+0x1ac>)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	089b      	lsrs	r3, r3, #2
 8003242:	3302      	adds	r3, #2
 8003244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003248:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	220f      	movs	r2, #15
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	4013      	ands	r3, r2
 800325c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a54      	ldr	r2, [pc, #336]	@ (80033b4 <HAL_GPIO_DeInit+0x1b0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d019      	beq.n	800329a <HAL_GPIO_DeInit+0x96>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a53      	ldr	r2, [pc, #332]	@ (80033b8 <HAL_GPIO_DeInit+0x1b4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d013      	beq.n	8003296 <HAL_GPIO_DeInit+0x92>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a52      	ldr	r2, [pc, #328]	@ (80033bc <HAL_GPIO_DeInit+0x1b8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00d      	beq.n	8003292 <HAL_GPIO_DeInit+0x8e>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a51      	ldr	r2, [pc, #324]	@ (80033c0 <HAL_GPIO_DeInit+0x1bc>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d007      	beq.n	800328e <HAL_GPIO_DeInit+0x8a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a50      	ldr	r2, [pc, #320]	@ (80033c4 <HAL_GPIO_DeInit+0x1c0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d101      	bne.n	800328a <HAL_GPIO_DeInit+0x86>
 8003286:	2304      	movs	r3, #4
 8003288:	e008      	b.n	800329c <HAL_GPIO_DeInit+0x98>
 800328a:	2307      	movs	r3, #7
 800328c:	e006      	b.n	800329c <HAL_GPIO_DeInit+0x98>
 800328e:	2303      	movs	r3, #3
 8003290:	e004      	b.n	800329c <HAL_GPIO_DeInit+0x98>
 8003292:	2302      	movs	r3, #2
 8003294:	e002      	b.n	800329c <HAL_GPIO_DeInit+0x98>
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <HAL_GPIO_DeInit+0x98>
 800329a:	2300      	movs	r3, #0
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	f002 0203 	and.w	r2, r2, #3
 80032a2:	0092      	lsls	r2, r2, #2
 80032a4:	4093      	lsls	r3, r2
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d132      	bne.n	8003312 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80032ac:	4b46      	ldr	r3, [pc, #280]	@ (80033c8 <HAL_GPIO_DeInit+0x1c4>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	43db      	mvns	r3, r3
 80032b4:	4944      	ldr	r1, [pc, #272]	@ (80033c8 <HAL_GPIO_DeInit+0x1c4>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80032ba:	4b43      	ldr	r3, [pc, #268]	@ (80033c8 <HAL_GPIO_DeInit+0x1c4>)
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	4941      	ldr	r1, [pc, #260]	@ (80033c8 <HAL_GPIO_DeInit+0x1c4>)
 80032c4:	4013      	ands	r3, r2
 80032c6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80032c8:	4b3f      	ldr	r3, [pc, #252]	@ (80033c8 <HAL_GPIO_DeInit+0x1c4>)
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	43db      	mvns	r3, r3
 80032d0:	493d      	ldr	r1, [pc, #244]	@ (80033c8 <HAL_GPIO_DeInit+0x1c4>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80032d6:	4b3c      	ldr	r3, [pc, #240]	@ (80033c8 <HAL_GPIO_DeInit+0x1c4>)
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	43db      	mvns	r3, r3
 80032de:	493a      	ldr	r1, [pc, #232]	@ (80033c8 <HAL_GPIO_DeInit+0x1c4>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	220f      	movs	r2, #15
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80032f4:	4a2e      	ldr	r2, [pc, #184]	@ (80033b0 <HAL_GPIO_DeInit+0x1ac>)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	089b      	lsrs	r3, r3, #2
 80032fa:	3302      	adds	r3, #2
 80032fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	43da      	mvns	r2, r3
 8003304:	482a      	ldr	r0, [pc, #168]	@ (80033b0 <HAL_GPIO_DeInit+0x1ac>)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	089b      	lsrs	r3, r3, #2
 800330a:	400a      	ands	r2, r1
 800330c:	3302      	adds	r3, #2
 800330e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	2103      	movs	r1, #3
 800331c:	fa01 f303 	lsl.w	r3, r1, r3
 8003320:	43db      	mvns	r3, r3
 8003322:	401a      	ands	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	08da      	lsrs	r2, r3, #3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3208      	adds	r2, #8
 8003330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	220f      	movs	r2, #15
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	43db      	mvns	r3, r3
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	08d2      	lsrs	r2, r2, #3
 8003348:	4019      	ands	r1, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3208      	adds	r2, #8
 800334e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	2103      	movs	r1, #3
 800335c:	fa01 f303 	lsl.w	r3, r1, r3
 8003360:	43db      	mvns	r3, r3
 8003362:	401a      	ands	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	2101      	movs	r1, #1
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	fa01 f303 	lsl.w	r3, r1, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	401a      	ands	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	2103      	movs	r1, #3
 8003386:	fa01 f303 	lsl.w	r3, r1, r3
 800338a:	43db      	mvns	r3, r3
 800338c:	401a      	ands	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	3301      	adds	r3, #1
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2b0f      	cmp	r3, #15
 800339c:	f67f af40 	bls.w	8003220 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80033a0:	bf00      	nop
 80033a2:	bf00      	nop
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40013800 	.word	0x40013800
 80033b4:	40020000 	.word	0x40020000
 80033b8:	40020400 	.word	0x40020400
 80033bc:	40020800 	.word	0x40020800
 80033c0:	40020c00 	.word	0x40020c00
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40013c00 	.word	0x40013c00

080033cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	887b      	ldrh	r3, [r7, #2]
 80033de:	4013      	ands	r3, r2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033e4:	2301      	movs	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
 80033e8:	e001      	b.n	80033ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033ea:	2300      	movs	r3, #0
 80033ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	807b      	strh	r3, [r7, #2]
 8003408:	4613      	mov	r3, r2
 800340a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800340c:	787b      	ldrb	r3, [r7, #1]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003412:	887a      	ldrh	r2, [r7, #2]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003418:	e003      	b.n	8003422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800341a:	887b      	ldrh	r3, [r7, #2]
 800341c:	041a      	lsls	r2, r3, #16
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	619a      	str	r2, [r3, #24]
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800342e:	b480      	push	{r7}
 8003430:	b085      	sub	sp, #20
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	460b      	mov	r3, r1
 8003438:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003440:	887a      	ldrh	r2, [r7, #2]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4013      	ands	r3, r2
 8003446:	041a      	lsls	r2, r3, #16
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	43d9      	mvns	r1, r3
 800344c:	887b      	ldrh	r3, [r7, #2]
 800344e:	400b      	ands	r3, r1
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	619a      	str	r2, [r3, #24]
}
 8003456:	bf00      	nop
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
	...

08003464 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e267      	b.n	8003946 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d075      	beq.n	800356e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003482:	4b88      	ldr	r3, [pc, #544]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 030c 	and.w	r3, r3, #12
 800348a:	2b04      	cmp	r3, #4
 800348c:	d00c      	beq.n	80034a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800348e:	4b85      	ldr	r3, [pc, #532]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003496:	2b08      	cmp	r3, #8
 8003498:	d112      	bne.n	80034c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800349a:	4b82      	ldr	r3, [pc, #520]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034a6:	d10b      	bne.n	80034c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a8:	4b7e      	ldr	r3, [pc, #504]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d05b      	beq.n	800356c <HAL_RCC_OscConfig+0x108>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d157      	bne.n	800356c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e242      	b.n	8003946 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c8:	d106      	bne.n	80034d8 <HAL_RCC_OscConfig+0x74>
 80034ca:	4b76      	ldr	r3, [pc, #472]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a75      	ldr	r2, [pc, #468]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 80034d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	e01d      	b.n	8003514 <HAL_RCC_OscConfig+0xb0>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034e0:	d10c      	bne.n	80034fc <HAL_RCC_OscConfig+0x98>
 80034e2:	4b70      	ldr	r3, [pc, #448]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a6f      	ldr	r2, [pc, #444]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 80034e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	4b6d      	ldr	r3, [pc, #436]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a6c      	ldr	r2, [pc, #432]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 80034f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	e00b      	b.n	8003514 <HAL_RCC_OscConfig+0xb0>
 80034fc:	4b69      	ldr	r3, [pc, #420]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a68      	ldr	r2, [pc, #416]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 8003502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003506:	6013      	str	r3, [r2, #0]
 8003508:	4b66      	ldr	r3, [pc, #408]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a65      	ldr	r2, [pc, #404]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 800350e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d013      	beq.n	8003544 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351c:	f7ff fb5a 	bl	8002bd4 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003524:	f7ff fb56 	bl	8002bd4 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b64      	cmp	r3, #100	@ 0x64
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e207      	b.n	8003946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003536:	4b5b      	ldr	r3, [pc, #364]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0xc0>
 8003542:	e014      	b.n	800356e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003544:	f7ff fb46 	bl	8002bd4 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800354c:	f7ff fb42 	bl	8002bd4 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b64      	cmp	r3, #100	@ 0x64
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e1f3      	b.n	8003946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800355e:	4b51      	ldr	r3, [pc, #324]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0xe8>
 800356a:	e000      	b.n	800356e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800356c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d063      	beq.n	8003642 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800357a:	4b4a      	ldr	r3, [pc, #296]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00b      	beq.n	800359e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003586:	4b47      	ldr	r3, [pc, #284]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800358e:	2b08      	cmp	r3, #8
 8003590:	d11c      	bne.n	80035cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003592:	4b44      	ldr	r3, [pc, #272]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d116      	bne.n	80035cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800359e:	4b41      	ldr	r3, [pc, #260]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d005      	beq.n	80035b6 <HAL_RCC_OscConfig+0x152>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d001      	beq.n	80035b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e1c7      	b.n	8003946 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b6:	4b3b      	ldr	r3, [pc, #236]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	4937      	ldr	r1, [pc, #220]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ca:	e03a      	b.n	8003642 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d020      	beq.n	8003616 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035d4:	4b34      	ldr	r3, [pc, #208]	@ (80036a8 <HAL_RCC_OscConfig+0x244>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035da:	f7ff fafb 	bl	8002bd4 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035e2:	f7ff faf7 	bl	8002bd4 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e1a8      	b.n	8003946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f4:	4b2b      	ldr	r3, [pc, #172]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f0      	beq.n	80035e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003600:	4b28      	ldr	r3, [pc, #160]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	4925      	ldr	r1, [pc, #148]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 8003610:	4313      	orrs	r3, r2
 8003612:	600b      	str	r3, [r1, #0]
 8003614:	e015      	b.n	8003642 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003616:	4b24      	ldr	r3, [pc, #144]	@ (80036a8 <HAL_RCC_OscConfig+0x244>)
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7ff fada 	bl	8002bd4 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003624:	f7ff fad6 	bl	8002bd4 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e187      	b.n	8003946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003636:	4b1b      	ldr	r3, [pc, #108]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b00      	cmp	r3, #0
 800364c:	d036      	beq.n	80036bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d016      	beq.n	8003684 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003656:	4b15      	ldr	r3, [pc, #84]	@ (80036ac <HAL_RCC_OscConfig+0x248>)
 8003658:	2201      	movs	r2, #1
 800365a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365c:	f7ff faba 	bl	8002bd4 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003664:	f7ff fab6 	bl	8002bd4 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e167      	b.n	8003946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003676:	4b0b      	ldr	r3, [pc, #44]	@ (80036a4 <HAL_RCC_OscConfig+0x240>)
 8003678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f0      	beq.n	8003664 <HAL_RCC_OscConfig+0x200>
 8003682:	e01b      	b.n	80036bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003684:	4b09      	ldr	r3, [pc, #36]	@ (80036ac <HAL_RCC_OscConfig+0x248>)
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800368a:	f7ff faa3 	bl	8002bd4 <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003690:	e00e      	b.n	80036b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003692:	f7ff fa9f 	bl	8002bd4 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d907      	bls.n	80036b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e150      	b.n	8003946 <HAL_RCC_OscConfig+0x4e2>
 80036a4:	40023800 	.word	0x40023800
 80036a8:	42470000 	.word	0x42470000
 80036ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b0:	4b88      	ldr	r3, [pc, #544]	@ (80038d4 <HAL_RCC_OscConfig+0x470>)
 80036b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1ea      	bne.n	8003692 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 8097 	beq.w	80037f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ca:	2300      	movs	r3, #0
 80036cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ce:	4b81      	ldr	r3, [pc, #516]	@ (80038d4 <HAL_RCC_OscConfig+0x470>)
 80036d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10f      	bne.n	80036fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036da:	2300      	movs	r3, #0
 80036dc:	60bb      	str	r3, [r7, #8]
 80036de:	4b7d      	ldr	r3, [pc, #500]	@ (80038d4 <HAL_RCC_OscConfig+0x470>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e2:	4a7c      	ldr	r2, [pc, #496]	@ (80038d4 <HAL_RCC_OscConfig+0x470>)
 80036e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80036ea:	4b7a      	ldr	r3, [pc, #488]	@ (80038d4 <HAL_RCC_OscConfig+0x470>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f6:	2301      	movs	r3, #1
 80036f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fa:	4b77      	ldr	r3, [pc, #476]	@ (80038d8 <HAL_RCC_OscConfig+0x474>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003702:	2b00      	cmp	r3, #0
 8003704:	d118      	bne.n	8003738 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003706:	4b74      	ldr	r3, [pc, #464]	@ (80038d8 <HAL_RCC_OscConfig+0x474>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a73      	ldr	r2, [pc, #460]	@ (80038d8 <HAL_RCC_OscConfig+0x474>)
 800370c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003712:	f7ff fa5f 	bl	8002bd4 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800371a:	f7ff fa5b 	bl	8002bd4 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e10c      	b.n	8003946 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372c:	4b6a      	ldr	r3, [pc, #424]	@ (80038d8 <HAL_RCC_OscConfig+0x474>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d106      	bne.n	800374e <HAL_RCC_OscConfig+0x2ea>
 8003740:	4b64      	ldr	r3, [pc, #400]	@ (80038d4 <HAL_RCC_OscConfig+0x470>)
 8003742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003744:	4a63      	ldr	r2, [pc, #396]	@ (80038d4 <HAL_RCC_OscConfig+0x470>)
 8003746:	f043 0301 	orr.w	r3, r3, #1
 800374a:	6713      	str	r3, [r2, #112]	@ 0x70
 800374c:	e01c      	b.n	8003788 <HAL_RCC_OscConfig+0x324>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	2b05      	cmp	r3, #5
 8003754:	d10c      	bne.n	8003770 <HAL_RCC_OscConfig+0x30c>
 8003756:	4b5f      	ldr	r3, [pc, #380]	@ (80038d4 <HAL_RCC_OscConfig+0x470>)
 8003758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800375a:	4a5e      	ldr	r2, [pc, #376]	@ (80038d4 <HAL_RCC_OscConfig+0x470>)
 800375c:	f043 0304 	orr.w	r3, r3, #4
 8003760:	6713      	str	r3, [r2, #112]	@ 0x70
 8003762:	4b5c      	ldr	r3, [pc, #368]	@ (80038d4 <HAL_RCC_OscConfig+0x470>)
 8003764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003766:	4a5b      	ldr	r2, [pc, #364]	@ (80038d4 <HAL_RCC_OscConfig+0x470>)
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	6713      	str	r3, [r2, #112]	@ 0x70
 800376e:	e00b      	b.n	8003788 <HAL_RCC_OscConfig+0x324>
 8003770:	4b58      	ldr	r3, [pc, #352]	@ (80038d4 <HAL_RCC_OscConfig+0x470>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003774:	4a57      	ldr	r2, [pc, #348]	@ (80038d4 <HAL_RCC_OscConfig+0x470>)
 8003776:	f023 0301 	bic.w	r3, r3, #1
 800377a:	6713      	str	r3, [r2, #112]	@ 0x70
 800377c:	4b55      	ldr	r3, [pc, #340]	@ (80038d4 <HAL_RCC_OscConfig+0x470>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003780:	4a54      	ldr	r2, [pc, #336]	@ (80038d4 <HAL_RCC_OscConfig+0x470>)
 8003782:	f023 0304 	bic.w	r3, r3, #4
 8003786:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d015      	beq.n	80037bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003790:	f7ff fa20 	bl	8002bd4 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003796:	e00a      	b.n	80037ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003798:	f7ff fa1c 	bl	8002bd4 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e0cb      	b.n	8003946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ae:	4b49      	ldr	r3, [pc, #292]	@ (80038d4 <HAL_RCC_OscConfig+0x470>)
 80037b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0ee      	beq.n	8003798 <HAL_RCC_OscConfig+0x334>
 80037ba:	e014      	b.n	80037e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037bc:	f7ff fa0a 	bl	8002bd4 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c2:	e00a      	b.n	80037da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c4:	f7ff fa06 	bl	8002bd4 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e0b5      	b.n	8003946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037da:	4b3e      	ldr	r3, [pc, #248]	@ (80038d4 <HAL_RCC_OscConfig+0x470>)
 80037dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1ee      	bne.n	80037c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037e6:	7dfb      	ldrb	r3, [r7, #23]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d105      	bne.n	80037f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ec:	4b39      	ldr	r3, [pc, #228]	@ (80038d4 <HAL_RCC_OscConfig+0x470>)
 80037ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f0:	4a38      	ldr	r2, [pc, #224]	@ (80038d4 <HAL_RCC_OscConfig+0x470>)
 80037f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 80a1 	beq.w	8003944 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003802:	4b34      	ldr	r3, [pc, #208]	@ (80038d4 <HAL_RCC_OscConfig+0x470>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 030c 	and.w	r3, r3, #12
 800380a:	2b08      	cmp	r3, #8
 800380c:	d05c      	beq.n	80038c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	2b02      	cmp	r3, #2
 8003814:	d141      	bne.n	800389a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003816:	4b31      	ldr	r3, [pc, #196]	@ (80038dc <HAL_RCC_OscConfig+0x478>)
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7ff f9da 	bl	8002bd4 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003824:	f7ff f9d6 	bl	8002bd4 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e087      	b.n	8003946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003836:	4b27      	ldr	r3, [pc, #156]	@ (80038d4 <HAL_RCC_OscConfig+0x470>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f0      	bne.n	8003824 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69da      	ldr	r2, [r3, #28]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003850:	019b      	lsls	r3, r3, #6
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003858:	085b      	lsrs	r3, r3, #1
 800385a:	3b01      	subs	r3, #1
 800385c:	041b      	lsls	r3, r3, #16
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003864:	061b      	lsls	r3, r3, #24
 8003866:	491b      	ldr	r1, [pc, #108]	@ (80038d4 <HAL_RCC_OscConfig+0x470>)
 8003868:	4313      	orrs	r3, r2
 800386a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800386c:	4b1b      	ldr	r3, [pc, #108]	@ (80038dc <HAL_RCC_OscConfig+0x478>)
 800386e:	2201      	movs	r2, #1
 8003870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003872:	f7ff f9af 	bl	8002bd4 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387a:	f7ff f9ab 	bl	8002bd4 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e05c      	b.n	8003946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388c:	4b11      	ldr	r3, [pc, #68]	@ (80038d4 <HAL_RCC_OscConfig+0x470>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0f0      	beq.n	800387a <HAL_RCC_OscConfig+0x416>
 8003898:	e054      	b.n	8003944 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389a:	4b10      	ldr	r3, [pc, #64]	@ (80038dc <HAL_RCC_OscConfig+0x478>)
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a0:	f7ff f998 	bl	8002bd4 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a8:	f7ff f994 	bl	8002bd4 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e045      	b.n	8003946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ba:	4b06      	ldr	r3, [pc, #24]	@ (80038d4 <HAL_RCC_OscConfig+0x470>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f0      	bne.n	80038a8 <HAL_RCC_OscConfig+0x444>
 80038c6:	e03d      	b.n	8003944 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d107      	bne.n	80038e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e038      	b.n	8003946 <HAL_RCC_OscConfig+0x4e2>
 80038d4:	40023800 	.word	0x40023800
 80038d8:	40007000 	.word	0x40007000
 80038dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003950 <HAL_RCC_OscConfig+0x4ec>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d028      	beq.n	8003940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d121      	bne.n	8003940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003906:	429a      	cmp	r2, r3
 8003908:	d11a      	bne.n	8003940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003910:	4013      	ands	r3, r2
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003916:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003918:	4293      	cmp	r3, r2
 800391a:	d111      	bne.n	8003940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003926:	085b      	lsrs	r3, r3, #1
 8003928:	3b01      	subs	r3, #1
 800392a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800392c:	429a      	cmp	r2, r3
 800392e:	d107      	bne.n	8003940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800393c:	429a      	cmp	r2, r3
 800393e:	d001      	beq.n	8003944 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e000      	b.n	8003946 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40023800 	.word	0x40023800

08003954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0cc      	b.n	8003b02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003968:	4b68      	ldr	r3, [pc, #416]	@ (8003b0c <HAL_RCC_ClockConfig+0x1b8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d90c      	bls.n	8003990 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003976:	4b65      	ldr	r3, [pc, #404]	@ (8003b0c <HAL_RCC_ClockConfig+0x1b8>)
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800397e:	4b63      	ldr	r3, [pc, #396]	@ (8003b0c <HAL_RCC_ClockConfig+0x1b8>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	429a      	cmp	r2, r3
 800398a:	d001      	beq.n	8003990 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0b8      	b.n	8003b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d020      	beq.n	80039de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d005      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039a8:	4b59      	ldr	r3, [pc, #356]	@ (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	4a58      	ldr	r2, [pc, #352]	@ (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 80039ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0308 	and.w	r3, r3, #8
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039c0:	4b53      	ldr	r3, [pc, #332]	@ (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	4a52      	ldr	r2, [pc, #328]	@ (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80039ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039cc:	4b50      	ldr	r3, [pc, #320]	@ (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	494d      	ldr	r1, [pc, #308]	@ (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d044      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d107      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f2:	4b47      	ldr	r3, [pc, #284]	@ (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d119      	bne.n	8003a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e07f      	b.n	8003b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d003      	beq.n	8003a12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	d107      	bne.n	8003a22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a12:	4b3f      	ldr	r3, [pc, #252]	@ (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d109      	bne.n	8003a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e06f      	b.n	8003b02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a22:	4b3b      	ldr	r3, [pc, #236]	@ (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e067      	b.n	8003b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a32:	4b37      	ldr	r3, [pc, #220]	@ (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f023 0203 	bic.w	r2, r3, #3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	4934      	ldr	r1, [pc, #208]	@ (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a44:	f7ff f8c6 	bl	8002bd4 <HAL_GetTick>
 8003a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4a:	e00a      	b.n	8003a62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a4c:	f7ff f8c2 	bl	8002bd4 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e04f      	b.n	8003b02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a62:	4b2b      	ldr	r3, [pc, #172]	@ (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 020c 	and.w	r2, r3, #12
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d1eb      	bne.n	8003a4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a74:	4b25      	ldr	r3, [pc, #148]	@ (8003b0c <HAL_RCC_ClockConfig+0x1b8>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d20c      	bcs.n	8003a9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a82:	4b22      	ldr	r3, [pc, #136]	@ (8003b0c <HAL_RCC_ClockConfig+0x1b8>)
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8a:	4b20      	ldr	r3, [pc, #128]	@ (8003b0c <HAL_RCC_ClockConfig+0x1b8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d001      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e032      	b.n	8003b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aa8:	4b19      	ldr	r3, [pc, #100]	@ (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	4916      	ldr	r1, [pc, #88]	@ (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d009      	beq.n	8003ada <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ac6:	4b12      	ldr	r3, [pc, #72]	@ (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	490e      	ldr	r1, [pc, #56]	@ (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ada:	f000 f821 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	091b      	lsrs	r3, r3, #4
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	490a      	ldr	r1, [pc, #40]	@ (8003b14 <HAL_RCC_ClockConfig+0x1c0>)
 8003aec:	5ccb      	ldrb	r3, [r1, r3]
 8003aee:	fa22 f303 	lsr.w	r3, r2, r3
 8003af2:	4a09      	ldr	r2, [pc, #36]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c4>)
 8003af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003af6:	4b09      	ldr	r3, [pc, #36]	@ (8003b1c <HAL_RCC_ClockConfig+0x1c8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff f826 	bl	8002b4c <HAL_InitTick>

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40023c00 	.word	0x40023c00
 8003b10:	40023800 	.word	0x40023800
 8003b14:	08007080 	.word	0x08007080
 8003b18:	2000000c 	.word	0x2000000c
 8003b1c:	20000024 	.word	0x20000024

08003b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b24:	b094      	sub	sp, #80	@ 0x50
 8003b26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b38:	4b79      	ldr	r3, [pc, #484]	@ (8003d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 030c 	and.w	r3, r3, #12
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d00d      	beq.n	8003b60 <HAL_RCC_GetSysClockFreq+0x40>
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	f200 80e1 	bhi.w	8003d0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d002      	beq.n	8003b54 <HAL_RCC_GetSysClockFreq+0x34>
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d003      	beq.n	8003b5a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b52:	e0db      	b.n	8003d0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b54:	4b73      	ldr	r3, [pc, #460]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b58:	e0db      	b.n	8003d12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b5a:	4b73      	ldr	r3, [pc, #460]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b5e:	e0d8      	b.n	8003d12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b60:	4b6f      	ldr	r3, [pc, #444]	@ (8003d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b68:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b6a:	4b6d      	ldr	r3, [pc, #436]	@ (8003d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d063      	beq.n	8003c3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b76:	4b6a      	ldr	r3, [pc, #424]	@ (8003d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	099b      	lsrs	r3, r3, #6
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b88:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b92:	4622      	mov	r2, r4
 8003b94:	462b      	mov	r3, r5
 8003b96:	f04f 0000 	mov.w	r0, #0
 8003b9a:	f04f 0100 	mov.w	r1, #0
 8003b9e:	0159      	lsls	r1, r3, #5
 8003ba0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ba4:	0150      	lsls	r0, r2, #5
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4621      	mov	r1, r4
 8003bac:	1a51      	subs	r1, r2, r1
 8003bae:	6139      	str	r1, [r7, #16]
 8003bb0:	4629      	mov	r1, r5
 8003bb2:	eb63 0301 	sbc.w	r3, r3, r1
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bc4:	4659      	mov	r1, fp
 8003bc6:	018b      	lsls	r3, r1, #6
 8003bc8:	4651      	mov	r1, sl
 8003bca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bce:	4651      	mov	r1, sl
 8003bd0:	018a      	lsls	r2, r1, #6
 8003bd2:	4651      	mov	r1, sl
 8003bd4:	ebb2 0801 	subs.w	r8, r2, r1
 8003bd8:	4659      	mov	r1, fp
 8003bda:	eb63 0901 	sbc.w	r9, r3, r1
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bf2:	4690      	mov	r8, r2
 8003bf4:	4699      	mov	r9, r3
 8003bf6:	4623      	mov	r3, r4
 8003bf8:	eb18 0303 	adds.w	r3, r8, r3
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	462b      	mov	r3, r5
 8003c00:	eb49 0303 	adc.w	r3, r9, r3
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	f04f 0300 	mov.w	r3, #0
 8003c0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c12:	4629      	mov	r1, r5
 8003c14:	024b      	lsls	r3, r1, #9
 8003c16:	4621      	mov	r1, r4
 8003c18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c1c:	4621      	mov	r1, r4
 8003c1e:	024a      	lsls	r2, r1, #9
 8003c20:	4610      	mov	r0, r2
 8003c22:	4619      	mov	r1, r3
 8003c24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c26:	2200      	movs	r2, #0
 8003c28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c30:	f7fc fb26 	bl	8000280 <__aeabi_uldivmod>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4613      	mov	r3, r2
 8003c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c3c:	e058      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c3e:	4b38      	ldr	r3, [pc, #224]	@ (8003d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	099b      	lsrs	r3, r3, #6
 8003c44:	2200      	movs	r2, #0
 8003c46:	4618      	mov	r0, r3
 8003c48:	4611      	mov	r1, r2
 8003c4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c4e:	623b      	str	r3, [r7, #32]
 8003c50:	2300      	movs	r3, #0
 8003c52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c58:	4642      	mov	r2, r8
 8003c5a:	464b      	mov	r3, r9
 8003c5c:	f04f 0000 	mov.w	r0, #0
 8003c60:	f04f 0100 	mov.w	r1, #0
 8003c64:	0159      	lsls	r1, r3, #5
 8003c66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c6a:	0150      	lsls	r0, r2, #5
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4641      	mov	r1, r8
 8003c72:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c76:	4649      	mov	r1, r9
 8003c78:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c90:	ebb2 040a 	subs.w	r4, r2, sl
 8003c94:	eb63 050b 	sbc.w	r5, r3, fp
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	00eb      	lsls	r3, r5, #3
 8003ca2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ca6:	00e2      	lsls	r2, r4, #3
 8003ca8:	4614      	mov	r4, r2
 8003caa:	461d      	mov	r5, r3
 8003cac:	4643      	mov	r3, r8
 8003cae:	18e3      	adds	r3, r4, r3
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	464b      	mov	r3, r9
 8003cb4:	eb45 0303 	adc.w	r3, r5, r3
 8003cb8:	607b      	str	r3, [r7, #4]
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	028b      	lsls	r3, r1, #10
 8003cca:	4621      	mov	r1, r4
 8003ccc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	028a      	lsls	r2, r1, #10
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cda:	2200      	movs	r2, #0
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	61fa      	str	r2, [r7, #28]
 8003ce0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ce4:	f7fc facc 	bl	8000280 <__aeabi_uldivmod>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4613      	mov	r3, r2
 8003cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8003d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	0c1b      	lsrs	r3, r3, #16
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d0a:	e002      	b.n	8003d12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d0c:	4b05      	ldr	r3, [pc, #20]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3750      	adds	r7, #80	@ 0x50
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d1e:	bf00      	nop
 8003d20:	40023800 	.word	0x40023800
 8003d24:	00f42400 	.word	0x00f42400
 8003d28:	007a1200 	.word	0x007a1200

08003d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d30:	4b03      	ldr	r3, [pc, #12]	@ (8003d40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d32:	681b      	ldr	r3, [r3, #0]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	2000000c 	.word	0x2000000c

08003d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d48:	f7ff fff0 	bl	8003d2c <HAL_RCC_GetHCLKFreq>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	4b05      	ldr	r3, [pc, #20]	@ (8003d64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	0a9b      	lsrs	r3, r3, #10
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	4903      	ldr	r1, [pc, #12]	@ (8003d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d5a:	5ccb      	ldrb	r3, [r1, r3]
 8003d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40023800 	.word	0x40023800
 8003d68:	08007090 	.word	0x08007090

08003d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d70:	f7ff ffdc 	bl	8003d2c <HAL_RCC_GetHCLKFreq>
 8003d74:	4602      	mov	r2, r0
 8003d76:	4b05      	ldr	r3, [pc, #20]	@ (8003d8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	0b5b      	lsrs	r3, r3, #13
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	4903      	ldr	r1, [pc, #12]	@ (8003d90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d82:	5ccb      	ldrb	r3, [r1, r3]
 8003d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	08007090 	.word	0x08007090

08003d94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e07b      	b.n	8003e9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d108      	bne.n	8003dc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003db6:	d009      	beq.n	8003dcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	61da      	str	r2, [r3, #28]
 8003dbe:	e005      	b.n	8003dcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f85d 	bl	8003ea6 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e50:	ea42 0103 	orr.w	r1, r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e58:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	0c1b      	lsrs	r3, r3, #16
 8003e6a:	f003 0104 	and.w	r1, r3, #4
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	f003 0210 	and.w	r2, r3, #16
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69da      	ldr	r2, [r3, #28]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b08a      	sub	sp, #40	@ 0x28
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	60f8      	str	r0, [r7, #12]
 8003ec2:	60b9      	str	r1, [r7, #8]
 8003ec4:	607a      	str	r2, [r7, #4]
 8003ec6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ecc:	f7fe fe82 	bl	8002bd4 <HAL_GetTick>
 8003ed0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ed8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003ee0:	887b      	ldrh	r3, [r7, #2]
 8003ee2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ee4:	7ffb      	ldrb	r3, [r7, #31]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d00c      	beq.n	8003f04 <HAL_SPI_TransmitReceive+0x4a>
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ef0:	d106      	bne.n	8003f00 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d102      	bne.n	8003f00 <HAL_SPI_TransmitReceive+0x46>
 8003efa:	7ffb      	ldrb	r3, [r7, #31]
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d001      	beq.n	8003f04 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003f00:	2302      	movs	r3, #2
 8003f02:	e17f      	b.n	8004204 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d005      	beq.n	8003f16 <HAL_SPI_TransmitReceive+0x5c>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <HAL_SPI_TransmitReceive+0x5c>
 8003f10:	887b      	ldrh	r3, [r7, #2]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e174      	b.n	8004204 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_SPI_TransmitReceive+0x6e>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e16d      	b.n	8004204 <HAL_SPI_TransmitReceive+0x34a>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d003      	beq.n	8003f44 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2205      	movs	r2, #5
 8003f40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	887a      	ldrh	r2, [r7, #2]
 8003f54:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	887a      	ldrh	r2, [r7, #2]
 8003f5a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	887a      	ldrh	r2, [r7, #2]
 8003f66:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	887a      	ldrh	r2, [r7, #2]
 8003f6c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f84:	2b40      	cmp	r3, #64	@ 0x40
 8003f86:	d007      	beq.n	8003f98 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fa0:	d17e      	bne.n	80040a0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_SPI_TransmitReceive+0xf6>
 8003faa:	8afb      	ldrh	r3, [r7, #22]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d16c      	bne.n	800408a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb4:	881a      	ldrh	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc0:	1c9a      	adds	r2, r3, #2
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fd4:	e059      	b.n	800408a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d11b      	bne.n	800401c <HAL_SPI_TransmitReceive+0x162>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d016      	beq.n	800401c <HAL_SPI_TransmitReceive+0x162>
 8003fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d113      	bne.n	800401c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff8:	881a      	ldrh	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004004:	1c9a      	adds	r2, r3, #2
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b01      	cmp	r3, #1
 8004028:	d119      	bne.n	800405e <HAL_SPI_TransmitReceive+0x1a4>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800402e:	b29b      	uxth	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d014      	beq.n	800405e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800403e:	b292      	uxth	r2, r2
 8004040:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004046:	1c9a      	adds	r2, r3, #2
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800405a:	2301      	movs	r3, #1
 800405c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800405e:	f7fe fdb9 	bl	8002bd4 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	6a3b      	ldr	r3, [r7, #32]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800406a:	429a      	cmp	r2, r3
 800406c:	d80d      	bhi.n	800408a <HAL_SPI_TransmitReceive+0x1d0>
 800406e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004074:	d009      	beq.n	800408a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e0bc      	b.n	8004204 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800408e:	b29b      	uxth	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1a0      	bne.n	8003fd6 <HAL_SPI_TransmitReceive+0x11c>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d19b      	bne.n	8003fd6 <HAL_SPI_TransmitReceive+0x11c>
 800409e:	e082      	b.n	80041a6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <HAL_SPI_TransmitReceive+0x1f4>
 80040a8:	8afb      	ldrh	r3, [r7, #22]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d171      	bne.n	8004192 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	330c      	adds	r3, #12
 80040b8:	7812      	ldrb	r2, [r2, #0]
 80040ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040d4:	e05d      	b.n	8004192 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d11c      	bne.n	800411e <HAL_SPI_TransmitReceive+0x264>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d017      	beq.n	800411e <HAL_SPI_TransmitReceive+0x264>
 80040ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d114      	bne.n	800411e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	330c      	adds	r3, #12
 80040fe:	7812      	ldrb	r2, [r2, #0]
 8004100:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004110:	b29b      	uxth	r3, r3
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b01      	cmp	r3, #1
 800412a:	d119      	bne.n	8004160 <HAL_SPI_TransmitReceive+0x2a6>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d014      	beq.n	8004160 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68da      	ldr	r2, [r3, #12]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800415c:	2301      	movs	r3, #1
 800415e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004160:	f7fe fd38 	bl	8002bd4 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800416c:	429a      	cmp	r2, r3
 800416e:	d803      	bhi.n	8004178 <HAL_SPI_TransmitReceive+0x2be>
 8004170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004176:	d102      	bne.n	800417e <HAL_SPI_TransmitReceive+0x2c4>
 8004178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417a:	2b00      	cmp	r3, #0
 800417c:	d109      	bne.n	8004192 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e038      	b.n	8004204 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004196:	b29b      	uxth	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d19c      	bne.n	80040d6 <HAL_SPI_TransmitReceive+0x21c>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d197      	bne.n	80040d6 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041a6:	6a3a      	ldr	r2, [r7, #32]
 80041a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 f8c4 	bl	8004338 <SPI_EndRxTxTransaction>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d008      	beq.n	80041c8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e01d      	b.n	8004204 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10a      	bne.n	80041e6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041d0:	2300      	movs	r3, #0
 80041d2:	613b      	str	r3, [r7, #16]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	613b      	str	r3, [r7, #16]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004202:	2300      	movs	r3, #0
  }
}
 8004204:	4618      	mov	r0, r3
 8004206:	3728      	adds	r7, #40	@ 0x28
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800421a:	b2db      	uxtb	r3, r3
}
 800421c:	4618      	mov	r0, r3
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	4613      	mov	r3, r2
 8004236:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004238:	f7fe fccc 	bl	8002bd4 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004240:	1a9b      	subs	r3, r3, r2
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	4413      	add	r3, r2
 8004246:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004248:	f7fe fcc4 	bl	8002bd4 <HAL_GetTick>
 800424c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800424e:	4b39      	ldr	r3, [pc, #228]	@ (8004334 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	015b      	lsls	r3, r3, #5
 8004254:	0d1b      	lsrs	r3, r3, #20
 8004256:	69fa      	ldr	r2, [r7, #28]
 8004258:	fb02 f303 	mul.w	r3, r2, r3
 800425c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800425e:	e054      	b.n	800430a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004266:	d050      	beq.n	800430a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004268:	f7fe fcb4 	bl	8002bd4 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	69fa      	ldr	r2, [r7, #28]
 8004274:	429a      	cmp	r2, r3
 8004276:	d902      	bls.n	800427e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d13d      	bne.n	80042fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800428c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004296:	d111      	bne.n	80042bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042a0:	d004      	beq.n	80042ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042aa:	d107      	bne.n	80042bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042c4:	d10f      	bne.n	80042e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e017      	b.n	800432a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	3b01      	subs	r3, #1
 8004308:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4013      	ands	r3, r2
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	429a      	cmp	r2, r3
 8004318:	bf0c      	ite	eq
 800431a:	2301      	moveq	r3, #1
 800431c:	2300      	movne	r3, #0
 800431e:	b2db      	uxtb	r3, r3
 8004320:	461a      	mov	r2, r3
 8004322:	79fb      	ldrb	r3, [r7, #7]
 8004324:	429a      	cmp	r2, r3
 8004326:	d19b      	bne.n	8004260 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3720      	adds	r7, #32
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	2000000c 	.word	0x2000000c

08004338 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af02      	add	r7, sp, #8
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2201      	movs	r2, #1
 800434c:	2102      	movs	r1, #2
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f7ff ff6a 	bl	8004228 <SPI_WaitFlagStateUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d007      	beq.n	800436a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435e:	f043 0220 	orr.w	r2, r3, #32
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e032      	b.n	80043d0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800436a:	4b1b      	ldr	r3, [pc, #108]	@ (80043d8 <SPI_EndRxTxTransaction+0xa0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a1b      	ldr	r2, [pc, #108]	@ (80043dc <SPI_EndRxTxTransaction+0xa4>)
 8004370:	fba2 2303 	umull	r2, r3, r2, r3
 8004374:	0d5b      	lsrs	r3, r3, #21
 8004376:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800437a:	fb02 f303 	mul.w	r3, r2, r3
 800437e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004388:	d112      	bne.n	80043b0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2200      	movs	r2, #0
 8004392:	2180      	movs	r1, #128	@ 0x80
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f7ff ff47 	bl	8004228 <SPI_WaitFlagStateUntilTimeout>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d016      	beq.n	80043ce <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a4:	f043 0220 	orr.w	r2, r3, #32
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e00f      	b.n	80043d0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	3b01      	subs	r3, #1
 80043ba:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c6:	2b80      	cmp	r3, #128	@ 0x80
 80043c8:	d0f2      	beq.n	80043b0 <SPI_EndRxTxTransaction+0x78>
 80043ca:	e000      	b.n	80043ce <SPI_EndRxTxTransaction+0x96>
        break;
 80043cc:	bf00      	nop
  }

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	2000000c 	.word	0x2000000c
 80043dc:	165e9f81 	.word	0x165e9f81

080043e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e042      	b.n	8004478 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fd fe8e 	bl	8002128 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2224      	movs	r2, #36	@ 0x24
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004422:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f973 	bl	8004710 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004438:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695a      	ldr	r2, [r3, #20]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004448:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004458:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b08a      	sub	sp, #40	@ 0x28
 8004484:	af02      	add	r7, sp, #8
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	603b      	str	r3, [r7, #0]
 800448c:	4613      	mov	r3, r2
 800448e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b20      	cmp	r3, #32
 800449e:	d175      	bne.n	800458c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <HAL_UART_Transmit+0x2c>
 80044a6:	88fb      	ldrh	r3, [r7, #6]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e06e      	b.n	800458e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2221      	movs	r2, #33	@ 0x21
 80044ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044be:	f7fe fb89 	bl	8002bd4 <HAL_GetTick>
 80044c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	88fa      	ldrh	r2, [r7, #6]
 80044c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	88fa      	ldrh	r2, [r7, #6]
 80044ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044d8:	d108      	bne.n	80044ec <HAL_UART_Transmit+0x6c>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d104      	bne.n	80044ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	61bb      	str	r3, [r7, #24]
 80044ea:	e003      	b.n	80044f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044f0:	2300      	movs	r3, #0
 80044f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044f4:	e02e      	b.n	8004554 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2200      	movs	r2, #0
 80044fe:	2180      	movs	r1, #128	@ 0x80
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 f848 	bl	8004596 <UART_WaitOnFlagUntilTimeout>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d005      	beq.n	8004518 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e03a      	b.n	800458e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10b      	bne.n	8004536 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800452c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	3302      	adds	r3, #2
 8004532:	61bb      	str	r3, [r7, #24]
 8004534:	e007      	b.n	8004546 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	781a      	ldrb	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	3301      	adds	r3, #1
 8004544:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800454a:	b29b      	uxth	r3, r3
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1cb      	bne.n	80044f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2200      	movs	r2, #0
 8004566:	2140      	movs	r1, #64	@ 0x40
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 f814 	bl	8004596 <UART_WaitOnFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d005      	beq.n	8004580 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e006      	b.n	800458e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	e000      	b.n	800458e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800458c:	2302      	movs	r3, #2
  }
}
 800458e:	4618      	mov	r0, r3
 8004590:	3720      	adds	r7, #32
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b086      	sub	sp, #24
 800459a:	af00      	add	r7, sp, #0
 800459c:	60f8      	str	r0, [r7, #12]
 800459e:	60b9      	str	r1, [r7, #8]
 80045a0:	603b      	str	r3, [r7, #0]
 80045a2:	4613      	mov	r3, r2
 80045a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a6:	e03b      	b.n	8004620 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ae:	d037      	beq.n	8004620 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b0:	f7fe fb10 	bl	8002bd4 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	6a3a      	ldr	r2, [r7, #32]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d302      	bcc.n	80045c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e03a      	b.n	8004640 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d023      	beq.n	8004620 <UART_WaitOnFlagUntilTimeout+0x8a>
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2b80      	cmp	r3, #128	@ 0x80
 80045dc:	d020      	beq.n	8004620 <UART_WaitOnFlagUntilTimeout+0x8a>
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2b40      	cmp	r3, #64	@ 0x40
 80045e2:	d01d      	beq.n	8004620 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	d116      	bne.n	8004620 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80045f2:	2300      	movs	r3, #0
 80045f4:	617b      	str	r3, [r7, #20]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 f81d 	bl	8004648 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2208      	movs	r2, #8
 8004612:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e00f      	b.n	8004640 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	4013      	ands	r3, r2
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	429a      	cmp	r2, r3
 800462e:	bf0c      	ite	eq
 8004630:	2301      	moveq	r3, #1
 8004632:	2300      	movne	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	461a      	mov	r2, r3
 8004638:	79fb      	ldrb	r3, [r7, #7]
 800463a:	429a      	cmp	r2, r3
 800463c:	d0b4      	beq.n	80045a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004648:	b480      	push	{r7}
 800464a:	b095      	sub	sp, #84	@ 0x54
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	330c      	adds	r3, #12
 8004656:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800465a:	e853 3f00 	ldrex	r3, [r3]
 800465e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004662:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004666:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	330c      	adds	r3, #12
 800466e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004670:	643a      	str	r2, [r7, #64]	@ 0x40
 8004672:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004674:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004676:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004678:	e841 2300 	strex	r3, r2, [r1]
 800467c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800467e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1e5      	bne.n	8004650 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3314      	adds	r3, #20
 800468a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	e853 3f00 	ldrex	r3, [r3]
 8004692:	61fb      	str	r3, [r7, #28]
   return(result);
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	f023 0301 	bic.w	r3, r3, #1
 800469a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3314      	adds	r3, #20
 80046a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046ac:	e841 2300 	strex	r3, r2, [r1]
 80046b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1e5      	bne.n	8004684 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d119      	bne.n	80046f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	330c      	adds	r3, #12
 80046c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	e853 3f00 	ldrex	r3, [r3]
 80046ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f023 0310 	bic.w	r3, r3, #16
 80046d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	330c      	adds	r3, #12
 80046de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046e0:	61ba      	str	r2, [r7, #24]
 80046e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e4:	6979      	ldr	r1, [r7, #20]
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	e841 2300 	strex	r3, r2, [r1]
 80046ec:	613b      	str	r3, [r7, #16]
   return(result);
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1e5      	bne.n	80046c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004702:	bf00      	nop
 8004704:	3754      	adds	r7, #84	@ 0x54
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
	...

08004710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004714:	b0c0      	sub	sp, #256	@ 0x100
 8004716:	af00      	add	r7, sp, #0
 8004718:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800471c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800472c:	68d9      	ldr	r1, [r3, #12]
 800472e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	ea40 0301 	orr.w	r3, r0, r1
 8004738:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800473a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	431a      	orrs	r2, r3
 8004748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	431a      	orrs	r2, r3
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800475c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004768:	f021 010c 	bic.w	r1, r1, #12
 800476c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004776:	430b      	orrs	r3, r1
 8004778:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800477a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800478a:	6999      	ldr	r1, [r3, #24]
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	ea40 0301 	orr.w	r3, r0, r1
 8004796:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	4b8f      	ldr	r3, [pc, #572]	@ (80049dc <UART_SetConfig+0x2cc>)
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d005      	beq.n	80047b0 <UART_SetConfig+0xa0>
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	4b8d      	ldr	r3, [pc, #564]	@ (80049e0 <UART_SetConfig+0x2d0>)
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d104      	bne.n	80047ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047b0:	f7ff fadc 	bl	8003d6c <HAL_RCC_GetPCLK2Freq>
 80047b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80047b8:	e003      	b.n	80047c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047ba:	f7ff fac3 	bl	8003d44 <HAL_RCC_GetPCLK1Freq>
 80047be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047cc:	f040 810c 	bne.w	80049e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047d4:	2200      	movs	r2, #0
 80047d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80047da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80047de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80047e2:	4622      	mov	r2, r4
 80047e4:	462b      	mov	r3, r5
 80047e6:	1891      	adds	r1, r2, r2
 80047e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80047ea:	415b      	adcs	r3, r3
 80047ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80047f2:	4621      	mov	r1, r4
 80047f4:	eb12 0801 	adds.w	r8, r2, r1
 80047f8:	4629      	mov	r1, r5
 80047fa:	eb43 0901 	adc.w	r9, r3, r1
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800480a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800480e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004812:	4690      	mov	r8, r2
 8004814:	4699      	mov	r9, r3
 8004816:	4623      	mov	r3, r4
 8004818:	eb18 0303 	adds.w	r3, r8, r3
 800481c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004820:	462b      	mov	r3, r5
 8004822:	eb49 0303 	adc.w	r3, r9, r3
 8004826:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800482a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004836:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800483a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800483e:	460b      	mov	r3, r1
 8004840:	18db      	adds	r3, r3, r3
 8004842:	653b      	str	r3, [r7, #80]	@ 0x50
 8004844:	4613      	mov	r3, r2
 8004846:	eb42 0303 	adc.w	r3, r2, r3
 800484a:	657b      	str	r3, [r7, #84]	@ 0x54
 800484c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004850:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004854:	f7fb fd14 	bl	8000280 <__aeabi_uldivmod>
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	4b61      	ldr	r3, [pc, #388]	@ (80049e4 <UART_SetConfig+0x2d4>)
 800485e:	fba3 2302 	umull	r2, r3, r3, r2
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	011c      	lsls	r4, r3, #4
 8004866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800486a:	2200      	movs	r2, #0
 800486c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004870:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004874:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004878:	4642      	mov	r2, r8
 800487a:	464b      	mov	r3, r9
 800487c:	1891      	adds	r1, r2, r2
 800487e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004880:	415b      	adcs	r3, r3
 8004882:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004884:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004888:	4641      	mov	r1, r8
 800488a:	eb12 0a01 	adds.w	sl, r2, r1
 800488e:	4649      	mov	r1, r9
 8004890:	eb43 0b01 	adc.w	fp, r3, r1
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	f04f 0300 	mov.w	r3, #0
 800489c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048a8:	4692      	mov	sl, r2
 80048aa:	469b      	mov	fp, r3
 80048ac:	4643      	mov	r3, r8
 80048ae:	eb1a 0303 	adds.w	r3, sl, r3
 80048b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048b6:	464b      	mov	r3, r9
 80048b8:	eb4b 0303 	adc.w	r3, fp, r3
 80048bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80048c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80048d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80048d4:	460b      	mov	r3, r1
 80048d6:	18db      	adds	r3, r3, r3
 80048d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80048da:	4613      	mov	r3, r2
 80048dc:	eb42 0303 	adc.w	r3, r2, r3
 80048e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80048e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80048e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80048ea:	f7fb fcc9 	bl	8000280 <__aeabi_uldivmod>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4611      	mov	r1, r2
 80048f4:	4b3b      	ldr	r3, [pc, #236]	@ (80049e4 <UART_SetConfig+0x2d4>)
 80048f6:	fba3 2301 	umull	r2, r3, r3, r1
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	2264      	movs	r2, #100	@ 0x64
 80048fe:	fb02 f303 	mul.w	r3, r2, r3
 8004902:	1acb      	subs	r3, r1, r3
 8004904:	00db      	lsls	r3, r3, #3
 8004906:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800490a:	4b36      	ldr	r3, [pc, #216]	@ (80049e4 <UART_SetConfig+0x2d4>)
 800490c:	fba3 2302 	umull	r2, r3, r3, r2
 8004910:	095b      	lsrs	r3, r3, #5
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004918:	441c      	add	r4, r3
 800491a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800491e:	2200      	movs	r2, #0
 8004920:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004924:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004928:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800492c:	4642      	mov	r2, r8
 800492e:	464b      	mov	r3, r9
 8004930:	1891      	adds	r1, r2, r2
 8004932:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004934:	415b      	adcs	r3, r3
 8004936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004938:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800493c:	4641      	mov	r1, r8
 800493e:	1851      	adds	r1, r2, r1
 8004940:	6339      	str	r1, [r7, #48]	@ 0x30
 8004942:	4649      	mov	r1, r9
 8004944:	414b      	adcs	r3, r1
 8004946:	637b      	str	r3, [r7, #52]	@ 0x34
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	f04f 0300 	mov.w	r3, #0
 8004950:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004954:	4659      	mov	r1, fp
 8004956:	00cb      	lsls	r3, r1, #3
 8004958:	4651      	mov	r1, sl
 800495a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800495e:	4651      	mov	r1, sl
 8004960:	00ca      	lsls	r2, r1, #3
 8004962:	4610      	mov	r0, r2
 8004964:	4619      	mov	r1, r3
 8004966:	4603      	mov	r3, r0
 8004968:	4642      	mov	r2, r8
 800496a:	189b      	adds	r3, r3, r2
 800496c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004970:	464b      	mov	r3, r9
 8004972:	460a      	mov	r2, r1
 8004974:	eb42 0303 	adc.w	r3, r2, r3
 8004978:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800497c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004988:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800498c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004990:	460b      	mov	r3, r1
 8004992:	18db      	adds	r3, r3, r3
 8004994:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004996:	4613      	mov	r3, r2
 8004998:	eb42 0303 	adc.w	r3, r2, r3
 800499c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800499e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80049a6:	f7fb fc6b 	bl	8000280 <__aeabi_uldivmod>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4b0d      	ldr	r3, [pc, #52]	@ (80049e4 <UART_SetConfig+0x2d4>)
 80049b0:	fba3 1302 	umull	r1, r3, r3, r2
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	2164      	movs	r1, #100	@ 0x64
 80049b8:	fb01 f303 	mul.w	r3, r1, r3
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	3332      	adds	r3, #50	@ 0x32
 80049c2:	4a08      	ldr	r2, [pc, #32]	@ (80049e4 <UART_SetConfig+0x2d4>)
 80049c4:	fba2 2303 	umull	r2, r3, r2, r3
 80049c8:	095b      	lsrs	r3, r3, #5
 80049ca:	f003 0207 	and.w	r2, r3, #7
 80049ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4422      	add	r2, r4
 80049d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049d8:	e106      	b.n	8004be8 <UART_SetConfig+0x4d8>
 80049da:	bf00      	nop
 80049dc:	40011000 	.word	0x40011000
 80049e0:	40011400 	.word	0x40011400
 80049e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049ec:	2200      	movs	r2, #0
 80049ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80049f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80049f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80049fa:	4642      	mov	r2, r8
 80049fc:	464b      	mov	r3, r9
 80049fe:	1891      	adds	r1, r2, r2
 8004a00:	6239      	str	r1, [r7, #32]
 8004a02:	415b      	adcs	r3, r3
 8004a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a0a:	4641      	mov	r1, r8
 8004a0c:	1854      	adds	r4, r2, r1
 8004a0e:	4649      	mov	r1, r9
 8004a10:	eb43 0501 	adc.w	r5, r3, r1
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	00eb      	lsls	r3, r5, #3
 8004a1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a22:	00e2      	lsls	r2, r4, #3
 8004a24:	4614      	mov	r4, r2
 8004a26:	461d      	mov	r5, r3
 8004a28:	4643      	mov	r3, r8
 8004a2a:	18e3      	adds	r3, r4, r3
 8004a2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a30:	464b      	mov	r3, r9
 8004a32:	eb45 0303 	adc.w	r3, r5, r3
 8004a36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	f04f 0300 	mov.w	r3, #0
 8004a52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004a56:	4629      	mov	r1, r5
 8004a58:	008b      	lsls	r3, r1, #2
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a60:	4621      	mov	r1, r4
 8004a62:	008a      	lsls	r2, r1, #2
 8004a64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004a68:	f7fb fc0a 	bl	8000280 <__aeabi_uldivmod>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4b60      	ldr	r3, [pc, #384]	@ (8004bf4 <UART_SetConfig+0x4e4>)
 8004a72:	fba3 2302 	umull	r2, r3, r3, r2
 8004a76:	095b      	lsrs	r3, r3, #5
 8004a78:	011c      	lsls	r4, r3, #4
 8004a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004a88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	464b      	mov	r3, r9
 8004a90:	1891      	adds	r1, r2, r2
 8004a92:	61b9      	str	r1, [r7, #24]
 8004a94:	415b      	adcs	r3, r3
 8004a96:	61fb      	str	r3, [r7, #28]
 8004a98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a9c:	4641      	mov	r1, r8
 8004a9e:	1851      	adds	r1, r2, r1
 8004aa0:	6139      	str	r1, [r7, #16]
 8004aa2:	4649      	mov	r1, r9
 8004aa4:	414b      	adcs	r3, r1
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ab4:	4659      	mov	r1, fp
 8004ab6:	00cb      	lsls	r3, r1, #3
 8004ab8:	4651      	mov	r1, sl
 8004aba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004abe:	4651      	mov	r1, sl
 8004ac0:	00ca      	lsls	r2, r1, #3
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	4642      	mov	r2, r8
 8004aca:	189b      	adds	r3, r3, r2
 8004acc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ad0:	464b      	mov	r3, r9
 8004ad2:	460a      	mov	r2, r1
 8004ad4:	eb42 0303 	adc.w	r3, r2, r3
 8004ad8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ae6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004af4:	4649      	mov	r1, r9
 8004af6:	008b      	lsls	r3, r1, #2
 8004af8:	4641      	mov	r1, r8
 8004afa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004afe:	4641      	mov	r1, r8
 8004b00:	008a      	lsls	r2, r1, #2
 8004b02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004b06:	f7fb fbbb 	bl	8000280 <__aeabi_uldivmod>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4611      	mov	r1, r2
 8004b10:	4b38      	ldr	r3, [pc, #224]	@ (8004bf4 <UART_SetConfig+0x4e4>)
 8004b12:	fba3 2301 	umull	r2, r3, r3, r1
 8004b16:	095b      	lsrs	r3, r3, #5
 8004b18:	2264      	movs	r2, #100	@ 0x64
 8004b1a:	fb02 f303 	mul.w	r3, r2, r3
 8004b1e:	1acb      	subs	r3, r1, r3
 8004b20:	011b      	lsls	r3, r3, #4
 8004b22:	3332      	adds	r3, #50	@ 0x32
 8004b24:	4a33      	ldr	r2, [pc, #204]	@ (8004bf4 <UART_SetConfig+0x4e4>)
 8004b26:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b30:	441c      	add	r4, r3
 8004b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b36:	2200      	movs	r2, #0
 8004b38:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b3a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004b40:	4642      	mov	r2, r8
 8004b42:	464b      	mov	r3, r9
 8004b44:	1891      	adds	r1, r2, r2
 8004b46:	60b9      	str	r1, [r7, #8]
 8004b48:	415b      	adcs	r3, r3
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b50:	4641      	mov	r1, r8
 8004b52:	1851      	adds	r1, r2, r1
 8004b54:	6039      	str	r1, [r7, #0]
 8004b56:	4649      	mov	r1, r9
 8004b58:	414b      	adcs	r3, r1
 8004b5a:	607b      	str	r3, [r7, #4]
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b68:	4659      	mov	r1, fp
 8004b6a:	00cb      	lsls	r3, r1, #3
 8004b6c:	4651      	mov	r1, sl
 8004b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b72:	4651      	mov	r1, sl
 8004b74:	00ca      	lsls	r2, r1, #3
 8004b76:	4610      	mov	r0, r2
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	189b      	adds	r3, r3, r2
 8004b80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b82:	464b      	mov	r3, r9
 8004b84:	460a      	mov	r2, r1
 8004b86:	eb42 0303 	adc.w	r3, r2, r3
 8004b8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b96:	667a      	str	r2, [r7, #100]	@ 0x64
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004ba4:	4649      	mov	r1, r9
 8004ba6:	008b      	lsls	r3, r1, #2
 8004ba8:	4641      	mov	r1, r8
 8004baa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bae:	4641      	mov	r1, r8
 8004bb0:	008a      	lsls	r2, r1, #2
 8004bb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004bb6:	f7fb fb63 	bl	8000280 <__aeabi_uldivmod>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf4 <UART_SetConfig+0x4e4>)
 8004bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	2164      	movs	r1, #100	@ 0x64
 8004bc8:	fb01 f303 	mul.w	r3, r1, r3
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	3332      	adds	r3, #50	@ 0x32
 8004bd2:	4a08      	ldr	r2, [pc, #32]	@ (8004bf4 <UART_SetConfig+0x4e4>)
 8004bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd8:	095b      	lsrs	r3, r3, #5
 8004bda:	f003 020f 	and.w	r2, r3, #15
 8004bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4422      	add	r2, r4
 8004be6:	609a      	str	r2, [r3, #8]
}
 8004be8:	bf00      	nop
 8004bea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bf4:	51eb851f 	.word	0x51eb851f

08004bf8 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08c      	sub	sp, #48	@ 0x30
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	603b      	str	r3, [r7, #0]
 8004c00:	4603      	mov	r3, r0
 8004c02:	71fb      	strb	r3, [r7, #7]
 8004c04:	460b      	mov	r3, r1
 8004c06:	71bb      	strb	r3, [r7, #6]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8004c10:	79bb      	ldrb	r3, [r7, #6]
 8004c12:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8004c14:	797b      	ldrb	r3, [r7, #5]
 8004c16:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004c18:	f107 030c 	add.w	r3, r7, #12
 8004c1c:	2207      	movs	r2, #7
 8004c1e:	2100      	movs	r1, #0
 8004c20:	4618      	mov	r0, r3
 8004c22:	f001 fc0d 	bl	8006440 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004c26:	f107 0318 	add.w	r3, r7, #24
 8004c2a:	2218      	movs	r2, #24
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f001 fc06 	bl	8006440 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004c34:	233f      	movs	r3, #63	@ 0x3f
 8004c36:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8004c38:	238a      	movs	r3, #138	@ 0x8a
 8004c3a:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8004c3c:	f107 0314 	add.w	r3, r7, #20
 8004c40:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8004c42:	2303      	movs	r3, #3
 8004c44:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &resp;
 8004c46:	f107 030c 	add.w	r3, r7, #12
 8004c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8004c4c:	2307      	movs	r3, #7
 8004c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8004c50:	f107 0318 	add.w	r3, r7, #24
 8004c54:	2100      	movs	r1, #0
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 fe78 	bl	800594c <hci_send_req>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	da01      	bge.n	8004c66 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8004c62:	23ff      	movs	r3, #255	@ 0xff
 8004c64:	e014      	b.n	8004c90 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8004c66:	7b3b      	ldrb	r3, [r7, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8004c6c:	7b3b      	ldrb	r3, [r7, #12]
 8004c6e:	e00f      	b.n	8004c90 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8004c70:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8004c7a:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c82:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8004c84:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c8c:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3730      	adds	r7, #48	@ 0x30
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b08e      	sub	sp, #56	@ 0x38
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60b9      	str	r1, [r7, #8]
 8004ca0:	607a      	str	r2, [r7, #4]
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
 8004caa:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004cac:	f107 0314 	add.w	r3, r7, #20
 8004cb0:	2207      	movs	r2, #7
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f001 fbc3 	bl	8006440 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004cba:	f107 0320 	add.w	r3, r7, #32
 8004cbe:	2218      	movs	r2, #24
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f001 fbbc 	bl	8006440 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004cc8:	233f      	movs	r3, #63	@ 0x3f
 8004cca:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 8004ccc:	238a      	movs	r3, #138	@ 0x8a
 8004cce:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = &cp;
 8004cd0:	f107 031c 	add.w	r3, r7, #28
 8004cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = sizeof(cp);
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8004cda:	f107 0314 	add.w	r3, r7, #20
 8004cde:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8004ce0:	2307      	movs	r3, #7
 8004ce2:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8004ce4:	f107 0320 	add.w	r3, r7, #32
 8004ce8:	2100      	movs	r1, #0
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 fe2e 	bl	800594c <hci_send_req>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	da01      	bge.n	8004cfa <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8004cf6:	23ff      	movs	r3, #255	@ 0xff
 8004cf8:	e014      	b.n	8004d24 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 8004cfa:	7d3b      	ldrb	r3, [r7, #20]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8004d00:	7d3b      	ldrb	r3, [r7, #20]
 8004d02:	e00f      	b.n	8004d24 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8004d04:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8004d0e:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8004d18:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3738      	adds	r7, #56	@ 0x38
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8004d2c:	b590      	push	{r4, r7, lr}
 8004d2e:	b095      	sub	sp, #84	@ 0x54
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	4604      	mov	r4, r0
 8004d34:	4608      	mov	r0, r1
 8004d36:	4611      	mov	r1, r2
 8004d38:	461a      	mov	r2, r3
 8004d3a:	4623      	mov	r3, r4
 8004d3c:	71fb      	strb	r3, [r7, #7]
 8004d3e:	4603      	mov	r3, r0
 8004d40:	80bb      	strh	r3, [r7, #4]
 8004d42:	460b      	mov	r3, r1
 8004d44:	807b      	strh	r3, [r7, #2]
 8004d46:	4613      	mov	r3, r2
 8004d48:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8004d50:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8004d54:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8004d58:	4413      	add	r3, r2
 8004d5a:	330e      	adds	r3, #14
 8004d5c:	2b28      	cmp	r3, #40	@ 0x28
 8004d5e:	d901      	bls.n	8004d64 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8004d60:	2342      	movs	r3, #66	@ 0x42
 8004d62:	e0c9      	b.n	8004ef8 <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 8004d64:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004d68:	3350      	adds	r3, #80	@ 0x50
 8004d6a:	443b      	add	r3, r7
 8004d6c:	79fa      	ldrb	r2, [r7, #7]
 8004d6e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8004d72:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004d76:	3301      	adds	r3, #1
 8004d78:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8004d7c:	88bb      	ldrh	r3, [r7, #4]
 8004d7e:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8004d80:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004d84:	f107 0208 	add.w	r2, r7, #8
 8004d88:	4413      	add	r3, r2
 8004d8a:	88ba      	ldrh	r2, [r7, #4]
 8004d8c:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8004d8e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004d92:	3302      	adds	r3, #2
 8004d94:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8004d98:	887b      	ldrh	r3, [r7, #2]
 8004d9a:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8004d9c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004da0:	f107 0208 	add.w	r2, r7, #8
 8004da4:	4413      	add	r3, r2
 8004da6:	887a      	ldrh	r2, [r7, #2]
 8004da8:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8004daa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004dae:	3302      	adds	r3, #2
 8004db0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = OwnAddrType;
 8004db4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004db8:	3350      	adds	r3, #80	@ 0x50
 8004dba:	443b      	add	r3, r7
 8004dbc:	79ba      	ldrb	r2, [r7, #6]
 8004dbe:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8004dc2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8004dcc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004dd0:	3350      	adds	r3, #80	@ 0x50
 8004dd2:	443b      	add	r3, r7
 8004dd4:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8004dd8:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8004ddc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004de0:	3301      	adds	r3, #1
 8004de2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = LocalNameLen;
 8004de6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004dea:	3350      	adds	r3, #80	@ 0x50
 8004dec:	443b      	add	r3, r7
 8004dee:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8004df2:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8004df6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8004e00:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004e04:	f107 0208 	add.w	r2, r7, #8
 8004e08:	4413      	add	r3, r2
 8004e0a:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8004e0e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004e10:	4618      	mov	r0, r3
 8004e12:	f001 fb90 	bl	8006536 <memcpy>
  indx +=  LocalNameLen;
 8004e16:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004e1a:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8004e1e:	4413      	add	r3, r2
 8004e20:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8004e24:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004e28:	3350      	adds	r3, #80	@ 0x50
 8004e2a:	443b      	add	r3, r7
 8004e2c:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8004e30:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8004e34:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004e38:	3301      	adds	r3, #1
 8004e3a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8004e3e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004e42:	f107 0208 	add.w	r2, r7, #8
 8004e46:	4413      	add	r3, r2
 8004e48:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8004e4c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f001 fb71 	bl	8006536 <memcpy>
  indx +=  ServiceUUIDLen;  
 8004e54:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004e58:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8004e62:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8004e66:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8004e6a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004e6e:	f107 0208 	add.w	r2, r7, #8
 8004e72:	4413      	add	r3, r2
 8004e74:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8004e78:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8004e7a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004e7e:	3302      	adds	r3, #2
 8004e80:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8004e84:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8004e88:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8004e8c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004e90:	f107 0208 	add.w	r2, r7, #8
 8004e94:	4413      	add	r3, r2
 8004e96:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8004e9a:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8004e9c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004ea0:	3302      	adds	r3, #2
 8004ea2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004ea6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004eaa:	2218      	movs	r2, #24
 8004eac:	2100      	movs	r1, #0
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f001 fac6 	bl	8006440 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004eb4:	233f      	movs	r3, #63	@ 0x3f
 8004eb6:	86bb      	strh	r3, [r7, #52]	@ 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8004eb8:	2383      	movs	r3, #131	@ 0x83
 8004eba:	86fb      	strh	r3, [r7, #54]	@ 0x36
  rq.cparam = (void *)buffer;
 8004ebc:	f107 0308 	add.w	r3, r7, #8
 8004ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.clen = indx;
 8004ec2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004ec6:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rparam = &status;
 8004ec8:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 8004ecc:	647b      	str	r3, [r7, #68]	@ 0x44
  rq.rlen = 1;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8004ed2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 fd37 	bl	800594c <hci_send_req>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	da01      	bge.n	8004ee8 <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 8004ee4:	23ff      	movs	r3, #255	@ 0xff
 8004ee6:	e007      	b.n	8004ef8 <aci_gap_set_discoverable+0x1cc>

  if (status) {
 8004ee8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <aci_gap_set_discoverable+0x1ca>
    return status;
 8004ef0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004ef4:	e000      	b.n	8004ef8 <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3754      	adds	r7, #84	@ 0x54
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd90      	pop	{r4, r7, pc}

08004f00 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8004f00:	b590      	push	{r4, r7, lr}
 8004f02:	b091      	sub	sp, #68	@ 0x44
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	603a      	str	r2, [r7, #0]
 8004f08:	461a      	mov	r2, r3
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	71fb      	strb	r3, [r7, #7]
 8004f0e:	460b      	mov	r3, r1
 8004f10:	71bb      	strb	r3, [r7, #6]
 8004f12:	4613      	mov	r3, r2
 8004f14:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8004f16:	79fb      	ldrb	r3, [r7, #7]
 8004f18:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 8004f1a:	79bb      	ldrb	r3, [r7, #6]
 8004f1c:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8004f1e:	79bb      	ldrb	r3, [r7, #6]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00a      	beq.n	8004f3a <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	f107 030e 	add.w	r3, r7, #14
 8004f2a:	6814      	ldr	r4, [r2, #0]
 8004f2c:	6850      	ldr	r0, [r2, #4]
 8004f2e:	6891      	ldr	r1, [r2, #8]
 8004f30:	68d2      	ldr	r2, [r2, #12]
 8004f32:	601c      	str	r4, [r3, #0]
 8004f34:	6058      	str	r0, [r3, #4]
 8004f36:	6099      	str	r1, [r3, #8]
 8004f38:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8004f3a:	797b      	ldrb	r3, [r7, #5]
 8004f3c:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8004f3e:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8004f42:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8004f44:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8004f48:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8004f4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f4e:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
  cp.bonding_mode = bonding_mode;
 8004f52:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8004f56:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004f5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004f5e:	2218      	movs	r2, #24
 8004f60:	2100      	movs	r1, #0
 8004f62:	4618      	mov	r0, r3
 8004f64:	f001 fa6c 	bl	8006440 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004f68:	233f      	movs	r3, #63	@ 0x3f
 8004f6a:	853b      	strh	r3, [r7, #40]	@ 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8004f6c:	2386      	movs	r3, #134	@ 0x86
 8004f6e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rq.cparam = &cp;
 8004f70:	f107 030c 	add.w	r3, r7, #12
 8004f74:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.clen = sizeof(cp);
 8004f76:	231a      	movs	r3, #26
 8004f78:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rparam = &status;
 8004f7a:	f107 030b 	add.w	r3, r7, #11
 8004f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rlen = 1;
 8004f80:	2301      	movs	r3, #1
 8004f82:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8004f84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004f88:	2100      	movs	r1, #0
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fcde 	bl	800594c <hci_send_req>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	da01      	bge.n	8004f9a <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 8004f96:	23ff      	movs	r3, #255	@ 0xff
 8004f98:	e005      	b.n	8004fa6 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 8004f9a:	7afb      	ldrb	r3, [r7, #11]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <aci_gap_set_auth_requirement+0xa4>
    return status;
 8004fa0:	7afb      	ldrb	r3, [r7, #11]
 8004fa2:	e000      	b.n	8004fa6 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3744      	adds	r7, #68	@ 0x44
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd90      	pop	{r4, r7, pc}

08004fae <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b088      	sub	sp, #32
 8004fb2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004fb4:	f107 0308 	add.w	r3, r7, #8
 8004fb8:	2218      	movs	r2, #24
 8004fba:	2100      	movs	r1, #0
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f001 fa3f 	bl	8006440 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004fc2:	233f      	movs	r3, #63	@ 0x3f
 8004fc4:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8004fc6:	f240 1301 	movw	r3, #257	@ 0x101
 8004fca:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004fcc:	1dfb      	adds	r3, r7, #7
 8004fce:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8004fd4:	f107 0308 	add.w	r3, r7, #8
 8004fd8:	2100      	movs	r1, #0
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 fcb6 	bl	800594c <hci_send_req>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	da01      	bge.n	8004fea <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8004fe6:	23ff      	movs	r3, #255	@ 0xff
 8004fe8:	e000      	b.n	8004fec <aci_gatt_init+0x3e>

  return status;
 8004fea:	79fb      	ldrb	r3, [r7, #7]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3720      	adds	r7, #32
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b090      	sub	sp, #64	@ 0x40
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6039      	str	r1, [r7, #0]
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	461a      	mov	r2, r3
 8005000:	4603      	mov	r3, r0
 8005002:	71fb      	strb	r3, [r7, #7]
 8005004:	460b      	mov	r3, r1
 8005006:	71bb      	strb	r3, [r7, #6]
 8005008:	4613      	mov	r3, r2
 800500a:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800500c:	2300      	movs	r3, #0
 800500e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_uuid_type;
 8005012:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005016:	3340      	adds	r3, #64	@ 0x40
 8005018:	443b      	add	r3, r7
 800501a:	79fa      	ldrb	r2, [r7, #7]
 800501c:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8005020:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005024:	3301      	adds	r3, #1
 8005026:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 800502a:	79fb      	ldrb	r3, [r7, #7]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d103      	bne.n	8005038 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 8005030:	2302      	movs	r3, #2
 8005032:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005036:	e002      	b.n	800503e <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 8005038:	2310      	movs	r3, #16
 800503a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800503e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005042:	f107 020c 	add.w	r2, r7, #12
 8005046:	4413      	add	r3, r2
 8005048:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800504c:	6839      	ldr	r1, [r7, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f001 fa71 	bl	8006536 <memcpy>
  indx +=  uuid_len;
 8005054:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8005058:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800505c:	4413      	add	r3, r2
 800505e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_type;
 8005062:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005066:	3340      	adds	r3, #64	@ 0x40
 8005068:	443b      	add	r3, r7
 800506a:	79ba      	ldrb	r2, [r7, #6]
 800506c:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8005070:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005074:	3301      	adds	r3, #1
 8005076:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = max_attr_records;
 800507a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800507e:	3340      	adds	r3, #64	@ 0x40
 8005080:	443b      	add	r3, r7
 8005082:	797a      	ldrb	r2, [r7, #5]
 8005084:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8005088:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800508c:	3301      	adds	r3, #1
 800508e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005092:	f107 0320 	add.w	r3, r7, #32
 8005096:	2203      	movs	r2, #3
 8005098:	2100      	movs	r1, #0
 800509a:	4618      	mov	r0, r3
 800509c:	f001 f9d0 	bl	8006440 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80050a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050a4:	2218      	movs	r2, #24
 80050a6:	2100      	movs	r1, #0
 80050a8:	4618      	mov	r0, r3
 80050aa:	f001 f9c9 	bl	8006440 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80050ae:	233f      	movs	r3, #63	@ 0x3f
 80050b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 80050b2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80050b6:	84fb      	strh	r3, [r7, #38]	@ 0x26
  rq.cparam = (void *)buffer;
 80050b8:	f107 030c 	add.w	r3, r7, #12
 80050bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.clen = indx;
 80050be:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80050c2:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rparam = &resp;
 80050c4:	f107 0320 	add.w	r3, r7, #32
 80050c8:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80050ca:	2303      	movs	r3, #3
 80050cc:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 80050ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050d2:	2100      	movs	r1, #0
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 fc39 	bl	800594c <hci_send_req>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	da01      	bge.n	80050e4 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 80050e0:	23ff      	movs	r3, #255	@ 0xff
 80050e2:	e00c      	b.n	80050fe <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 80050e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <aci_gatt_add_serv+0xfe>
    return resp.status;
 80050ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80050f0:	e005      	b.n	80050fe <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 80050f2:	f8b7 3021 	ldrh.w	r3, [r7, #33]	@ 0x21
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050fa:	801a      	strh	r2, [r3, #0]

  return 0;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3740      	adds	r7, #64	@ 0x40
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b092      	sub	sp, #72	@ 0x48
 800510a:	af00      	add	r7, sp, #0
 800510c:	603a      	str	r2, [r7, #0]
 800510e:	461a      	mov	r2, r3
 8005110:	4603      	mov	r3, r0
 8005112:	80fb      	strh	r3, [r7, #6]
 8005114:	460b      	mov	r3, r1
 8005116:	717b      	strb	r3, [r7, #5]
 8005118:	4613      	mov	r3, r2
 800511a:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800511c:	2300      	movs	r3, #0
 800511e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  serviceHandle = htobs(serviceHandle);
 8005122:	88fb      	ldrh	r3, [r7, #6]
 8005124:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8005126:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800512a:	f107 020c 	add.w	r2, r7, #12
 800512e:	4413      	add	r3, r2
 8005130:	88fa      	ldrh	r2, [r7, #6]
 8005132:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005134:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005138:	3302      	adds	r3, #2
 800513a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charUuidType;
 800513e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005142:	3348      	adds	r3, #72	@ 0x48
 8005144:	443b      	add	r3, r7
 8005146:	797a      	ldrb	r2, [r7, #5]
 8005148:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800514c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005150:	3301      	adds	r3, #1
 8005152:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8005156:	797b      	ldrb	r3, [r7, #5]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d103      	bne.n	8005164 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 800515c:	2302      	movs	r3, #2
 800515e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005162:	e002      	b.n	800516a <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 8005164:	2310      	movs	r3, #16
 8005166:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800516a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800516e:	f107 020c 	add.w	r2, r7, #12
 8005172:	4413      	add	r3, r2
 8005174:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8005178:	6839      	ldr	r1, [r7, #0]
 800517a:	4618      	mov	r0, r3
 800517c:	f001 f9db 	bl	8006536 <memcpy>
  indx +=  uuid_len;
 8005180:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8005184:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005188:	4413      	add	r3, r2
 800518a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charValueLen;
 800518e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005192:	3348      	adds	r3, #72	@ 0x48
 8005194:	443b      	add	r3, r7
 8005196:	793a      	ldrb	r2, [r7, #4]
 8005198:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800519c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80051a0:	3301      	adds	r3, #1
 80051a2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charProperties;
 80051a6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80051aa:	3348      	adds	r3, #72	@ 0x48
 80051ac:	443b      	add	r3, r7
 80051ae:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80051b2:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80051b6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80051ba:	3301      	adds	r3, #1
 80051bc:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = secPermissions;
 80051c0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80051c4:	3348      	adds	r3, #72	@ 0x48
 80051c6:	443b      	add	r3, r7
 80051c8:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 80051cc:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80051d0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80051d4:	3301      	adds	r3, #1
 80051d6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = gattEvtMask;
 80051da:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80051de:	3348      	adds	r3, #72	@ 0x48
 80051e0:	443b      	add	r3, r7
 80051e2:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 80051e6:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80051ea:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80051ee:	3301      	adds	r3, #1
 80051f0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = encryKeySize;
 80051f4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80051f8:	3348      	adds	r3, #72	@ 0x48
 80051fa:	443b      	add	r3, r7
 80051fc:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8005200:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005204:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005208:	3301      	adds	r3, #1
 800520a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = isVariable;
 800520e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005212:	3348      	adds	r3, #72	@ 0x48
 8005214:	443b      	add	r3, r7
 8005216:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800521a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800521e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005222:	3301      	adds	r3, #1
 8005224:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005228:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800522c:	2203      	movs	r2, #3
 800522e:	2100      	movs	r1, #0
 8005230:	4618      	mov	r0, r3
 8005232:	f001 f905 	bl	8006440 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005236:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800523a:	2218      	movs	r2, #24
 800523c:	2100      	movs	r1, #0
 800523e:	4618      	mov	r0, r3
 8005240:	f001 f8fe 	bl	8006440 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005244:	233f      	movs	r3, #63	@ 0x3f
 8005246:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8005248:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800524c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 800524e:	f107 030c 	add.w	r3, r7, #12
 8005252:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8005254:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005258:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &resp;
 800525a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800525e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8005260:	2303      	movs	r3, #3
 8005262:	643b      	str	r3, [r7, #64]	@ 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8005264:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005268:	2100      	movs	r1, #0
 800526a:	4618      	mov	r0, r3
 800526c:	f000 fb6e 	bl	800594c <hci_send_req>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	da01      	bge.n	800527a <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 8005276:	23ff      	movs	r3, #255	@ 0xff
 8005278:	e00c      	b.n	8005294 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 800527a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <aci_gatt_add_char+0x182>
    return resp.status;
 8005282:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005286:	e005      	b.n	8005294 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8005288:	f8b7 3029 	ldrh.w	r3, [r7, #41]	@ 0x29
 800528c:	b29a      	uxth	r2, r3
 800528e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005290:	801a      	strh	r2, [r3, #0]

  return 0;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3748      	adds	r7, #72	@ 0x48
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800529c:	b590      	push	{r4, r7, lr}
 800529e:	b0ab      	sub	sp, #172	@ 0xac
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	4604      	mov	r4, r0
 80052a4:	4608      	mov	r0, r1
 80052a6:	4611      	mov	r1, r2
 80052a8:	461a      	mov	r2, r3
 80052aa:	4623      	mov	r3, r4
 80052ac:	80fb      	strh	r3, [r7, #6]
 80052ae:	4603      	mov	r3, r0
 80052b0:	80bb      	strh	r3, [r7, #4]
 80052b2:	460b      	mov	r3, r1
 80052b4:	70fb      	strb	r3, [r7, #3]
 80052b6:	4613      	mov	r3, r2
 80052b8:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 80052ba:	2300      	movs	r3, #0
 80052bc:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 80052c0:	78bb      	ldrb	r3, [r7, #2]
 80052c2:	2b7a      	cmp	r3, #122	@ 0x7a
 80052c4:	d901      	bls.n	80052ca <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 80052c6:	2342      	movs	r3, #66	@ 0x42
 80052c8:	e074      	b.n	80053b4 <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 80052ca:	88fb      	ldrh	r3, [r7, #6]
 80052cc:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 80052ce:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80052d2:	f107 0208 	add.w	r2, r7, #8
 80052d6:	4413      	add	r3, r2
 80052d8:	88fa      	ldrh	r2, [r7, #6]
 80052da:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80052dc:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80052e0:	3302      	adds	r3, #2
 80052e2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  charHandle = htobs(charHandle);
 80052e6:	88bb      	ldrh	r3, [r7, #4]
 80052e8:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 80052ea:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80052ee:	f107 0208 	add.w	r2, r7, #8
 80052f2:	4413      	add	r3, r2
 80052f4:	88ba      	ldrh	r2, [r7, #4]
 80052f6:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80052f8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80052fc:	3302      	adds	r3, #2
 80052fe:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValOffset;
 8005302:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005306:	33a8      	adds	r3, #168	@ 0xa8
 8005308:	443b      	add	r3, r7
 800530a:	78fa      	ldrb	r2, [r7, #3]
 800530c:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8005310:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005314:	3301      	adds	r3, #1
 8005316:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValueLen;
 800531a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800531e:	33a8      	adds	r3, #168	@ 0xa8
 8005320:	443b      	add	r3, r7
 8005322:	78ba      	ldrb	r2, [r7, #2]
 8005324:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8005328:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800532c:	3301      	adds	r3, #1
 800532e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8005332:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005336:	f107 0208 	add.w	r2, r7, #8
 800533a:	4413      	add	r3, r2
 800533c:	78ba      	ldrb	r2, [r7, #2]
 800533e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8005342:	4618      	mov	r0, r3
 8005344:	f001 f8f7 	bl	8006536 <memcpy>
  indx +=  charValueLen;
 8005348:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 800534c:	78bb      	ldrb	r3, [r7, #2]
 800534e:	4413      	add	r3, r2
 8005350:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005354:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8005358:	2218      	movs	r2, #24
 800535a:	2100      	movs	r1, #0
 800535c:	4618      	mov	r0, r3
 800535e:	f001 f86f 	bl	8006440 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005362:	233f      	movs	r3, #63	@ 0x3f
 8005364:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8005368:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800536c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 8005370:	f107 0308 	add.w	r3, r7, #8
 8005374:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 8005378:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800537c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 8005380:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 8005384:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 8005388:	2301      	movs	r3, #1
 800538a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800538e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8005392:	2100      	movs	r1, #0
 8005394:	4618      	mov	r0, r3
 8005396:	f000 fad9 	bl	800594c <hci_send_req>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	da01      	bge.n	80053a4 <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 80053a0:	23ff      	movs	r3, #255	@ 0xff
 80053a2:	e007      	b.n	80053b4 <aci_gatt_update_char_value+0x118>

  if (status) {
 80053a4:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d002      	beq.n	80053b2 <aci_gatt_update_char_value+0x116>
    return status;
 80053ac:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80053b0:	e000      	b.n	80053b4 <aci_gatt_update_char_value+0x118>
  }

  return 0;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	37ac      	adds	r7, #172	@ 0xac
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd90      	pop	{r4, r7, pc}

080053bc <aci_gatt_write_without_response>:
  return status;
}

tBleStatus aci_gatt_write_without_response(uint16_t conn_handle, uint16_t attr_handle,
                                              uint8_t val_len, const uint8_t* attr_val)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b092      	sub	sp, #72	@ 0x48
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	607b      	str	r3, [r7, #4]
 80053c4:	4603      	mov	r3, r0
 80053c6:	81fb      	strh	r3, [r7, #14]
 80053c8:	460b      	mov	r3, r1
 80053ca:	81bb      	strh	r3, [r7, #12]
 80053cc:	4613      	mov	r3, r2
 80053ce:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  gatt_write_without_resp_cp cp;
  
  if(val_len > sizeof(cp.attr_val))
 80053d0:	7afb      	ldrb	r3, [r7, #11]
 80053d2:	2b14      	cmp	r3, #20
 80053d4:	d901      	bls.n	80053da <aci_gatt_write_without_response+0x1e>
    return BLE_STATUS_INVALID_PARAMS;
 80053d6:	2342      	movs	r3, #66	@ 0x42
 80053d8:	e031      	b.n	800543e <aci_gatt_write_without_response+0x82>

  cp.conn_handle = htobs(conn_handle);
 80053da:	89fb      	ldrh	r3, [r7, #14]
 80053dc:	82bb      	strh	r3, [r7, #20]
  cp.attr_handle = htobs(attr_handle);
 80053de:	89bb      	ldrh	r3, [r7, #12]
 80053e0:	82fb      	strh	r3, [r7, #22]
  cp.val_len = val_len;
 80053e2:	7afb      	ldrb	r3, [r7, #11]
 80053e4:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 80053e6:	7afa      	ldrb	r2, [r7, #11]
 80053e8:	f107 0314 	add.w	r3, r7, #20
 80053ec:	3305      	adds	r3, #5
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f001 f8a0 	bl	8006536 <memcpy>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80053f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80053fa:	2218      	movs	r2, #24
 80053fc:	2100      	movs	r1, #0
 80053fe:	4618      	mov	r0, r3
 8005400:	f001 f81e 	bl	8006440 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005404:	233f      	movs	r3, #63	@ 0x3f
 8005406:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_GATT_WRITE_WITHOUT_RESPONSE;
 8005408:	f240 1323 	movw	r3, #291	@ 0x123
 800540c:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &cp;
 800540e:	f107 0314 	add.w	r3, r7, #20
 8005412:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 8005414:	7afb      	ldrb	r3, [r7, #11]
 8005416:	3305      	adds	r3, #5
 8005418:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 800541a:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 800541e:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 8005420:	2301      	movs	r3, #1
 8005422:	647b      	str	r3, [r7, #68]	@ 0x44

  if (hci_send_req(&rq, FALSE) < 0)
 8005424:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005428:	2100      	movs	r1, #0
 800542a:	4618      	mov	r0, r3
 800542c:	f000 fa8e 	bl	800594c <hci_send_req>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	da01      	bge.n	800543a <aci_gatt_write_without_response+0x7e>
    return BLE_STATUS_TIMEOUT;
 8005436:	23ff      	movs	r3, #255	@ 0xff
 8005438:	e001      	b.n	800543e <aci_gatt_write_without_response+0x82>

  return status;
 800543a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800543e:	4618      	mov	r0, r3
 8005440:	3748      	adds	r7, #72	@ 0x48
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b0aa      	sub	sp, #168	@ 0xa8
 800544a:	af00      	add	r7, sp, #0
 800544c:	4603      	mov	r3, r0
 800544e:	603a      	str	r2, [r7, #0]
 8005450:	71fb      	strb	r3, [r7, #7]
 8005452:	460b      	mov	r3, r1
 8005454:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8005456:	2300      	movs	r3, #0
 8005458:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 800545c:	79bb      	ldrb	r3, [r7, #6]
 800545e:	2b7e      	cmp	r3, #126	@ 0x7e
 8005460:	d901      	bls.n	8005466 <aci_hal_write_config_data+0x20>
    return BLE_STATUS_INVALID_PARAMS;
 8005462:	2342      	movs	r3, #66	@ 0x42
 8005464:	e050      	b.n	8005508 <aci_hal_write_config_data+0xc2>

  buffer[indx] = offset;
 8005466:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800546a:	33a8      	adds	r3, #168	@ 0xa8
 800546c:	443b      	add	r3, r7
 800546e:	79fa      	ldrb	r2, [r7, #7]
 8005470:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8005474:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005478:	3301      	adds	r3, #1
 800547a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = len;
 800547e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005482:	33a8      	adds	r3, #168	@ 0xa8
 8005484:	443b      	add	r3, r7
 8005486:	79ba      	ldrb	r2, [r7, #6]
 8005488:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800548c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005490:	3301      	adds	r3, #1
 8005492:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8005496:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800549a:	f107 0208 	add.w	r2, r7, #8
 800549e:	4413      	add	r3, r2
 80054a0:	79ba      	ldrb	r2, [r7, #6]
 80054a2:	6839      	ldr	r1, [r7, #0]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f001 f846 	bl	8006536 <memcpy>
  indx +=  len;
 80054aa:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 80054ae:	79bb      	ldrb	r3, [r7, #6]
 80054b0:	4413      	add	r3, r2
 80054b2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80054b6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80054ba:	2218      	movs	r2, #24
 80054bc:	2100      	movs	r1, #0
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 ffbe 	bl	8006440 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80054c4:	233f      	movs	r3, #63	@ 0x3f
 80054c6:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 80054ca:	230c      	movs	r3, #12
 80054cc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 80054d0:	f107 0308 	add.w	r3, r7, #8
 80054d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 80054d8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80054dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 80054e0:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 80054e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 80054e8:	2301      	movs	r3, #1
 80054ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 80054ee:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80054f2:	2100      	movs	r1, #0
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 fa29 	bl	800594c <hci_send_req>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	da01      	bge.n	8005504 <aci_hal_write_config_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 8005500:	23ff      	movs	r3, #255	@ 0xff
 8005502:	e001      	b.n	8005508 <aci_hal_write_config_data+0xc2>

  return status;
 8005504:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
}
 8005508:	4618      	mov	r0, r3
 800550a:	37a8      	adds	r7, #168	@ 0xa8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b08a      	sub	sp, #40	@ 0x28
 8005514:	af00      	add	r7, sp, #0
 8005516:	4603      	mov	r3, r0
 8005518:	460a      	mov	r2, r1
 800551a:	71fb      	strb	r3, [r7, #7]
 800551c:	4613      	mov	r3, r2
 800551e:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8005520:	79fb      	ldrb	r3, [r7, #7]
 8005522:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8005524:	79bb      	ldrb	r3, [r7, #6]
 8005526:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005528:	f107 0310 	add.w	r3, r7, #16
 800552c:	2218      	movs	r2, #24
 800552e:	2100      	movs	r1, #0
 8005530:	4618      	mov	r0, r3
 8005532:	f000 ff85 	bl	8006440 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005536:	233f      	movs	r3, #63	@ 0x3f
 8005538:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800553a:	230f      	movs	r3, #15
 800553c:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800553e:	f107 030c 	add.w	r3, r7, #12
 8005542:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8005544:	2302      	movs	r3, #2
 8005546:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8005548:	f107 030b 	add.w	r3, r7, #11
 800554c:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800554e:	2301      	movs	r3, #1
 8005550:	627b      	str	r3, [r7, #36]	@ 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8005552:	f107 0310 	add.w	r3, r7, #16
 8005556:	2100      	movs	r1, #0
 8005558:	4618      	mov	r0, r3
 800555a:	f000 f9f7 	bl	800594c <hci_send_req>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	da01      	bge.n	8005568 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8005564:	23ff      	movs	r3, #255	@ 0xff
 8005566:	e000      	b.n	800556a <aci_hal_set_tx_power_level+0x5a>

  return status;
 8005568:	7afb      	ldrb	r3, [r7, #11]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3728      	adds	r7, #40	@ 0x28
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8005572:	b590      	push	{r4, r7, lr}
 8005574:	b089      	sub	sp, #36	@ 0x24
 8005576:	af02      	add	r7, sp, #8
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800557c:	f107 0410 	add.w	r4, r7, #16
 8005580:	f107 0215 	add.w	r2, r7, #21
 8005584:	f107 0112 	add.w	r1, r7, #18
 8005588:	f107 0016 	add.w	r0, r7, #22
 800558c:	f107 030e 	add.w	r3, r7, #14
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	4623      	mov	r3, r4
 8005594:	f000 f853 	bl	800563e <hci_le_read_local_version>
 8005598:	4603      	mov	r3, r0
 800559a:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800559c:	7dfb      	ldrb	r3, [r7, #23]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d126      	bne.n	80055f0 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 80055a2:	8a7b      	ldrh	r3, [r7, #18]
 80055a4:	0a1b      	lsrs	r3, r3, #8
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 80055ae:	8a7b      	ldrh	r3, [r7, #18]
 80055b0:	021b      	lsls	r3, r3, #8
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	b21a      	sxth	r2, r3
 80055be:	89fb      	ldrh	r3, [r7, #14]
 80055c0:	091b      	lsrs	r3, r3, #4
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	011b      	lsls	r3, r3, #4
 80055c6:	b21b      	sxth	r3, r3
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	b21b      	sxth	r3, r3
 80055cc:	4313      	orrs	r3, r2
 80055ce:	b21b      	sxth	r3, r3
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	b21a      	sxth	r2, r3
 80055dc:	89fb      	ldrh	r3, [r7, #14]
 80055de:	b21b      	sxth	r3, r3
 80055e0:	f003 030f 	and.w	r3, r3, #15
 80055e4:	b21b      	sxth	r3, r3
 80055e6:	4313      	orrs	r3, r2
 80055e8:	b21b      	sxth	r3, r3
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	801a      	strh	r2, [r3, #0]
  }
  return status;
 80055f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	371c      	adds	r7, #28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd90      	pop	{r4, r7, pc}

080055fa <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b088      	sub	sp, #32
 80055fe:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005600:	f107 0308 	add.w	r3, r7, #8
 8005604:	2218      	movs	r2, #24
 8005606:	2100      	movs	r1, #0
 8005608:	4618      	mov	r0, r3
 800560a:	f000 ff19 	bl	8006440 <memset>
  rq.ogf = OGF_HOST_CTL;
 800560e:	2303      	movs	r3, #3
 8005610:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8005612:	2303      	movs	r3, #3
 8005614:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005616:	1dfb      	adds	r3, r7, #7
 8005618:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800561a:	2301      	movs	r3, #1
 800561c:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800561e:	f107 0308 	add.w	r3, r7, #8
 8005622:	2100      	movs	r1, #0
 8005624:	4618      	mov	r0, r3
 8005626:	f000 f991 	bl	800594c <hci_send_req>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	da01      	bge.n	8005634 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8005630:	23ff      	movs	r3, #255	@ 0xff
 8005632:	e000      	b.n	8005636 <hci_reset+0x3c>
  
  return status;  
 8005634:	79fb      	ldrb	r3, [r7, #7]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3720      	adds	r7, #32
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b08e      	sub	sp, #56	@ 0x38
 8005642:	af00      	add	r7, sp, #0
 8005644:	60f8      	str	r0, [r7, #12]
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	607a      	str	r2, [r7, #4]
 800564a:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800564c:	f107 0314 	add.w	r3, r7, #20
 8005650:	2209      	movs	r2, #9
 8005652:	2100      	movs	r1, #0
 8005654:	4618      	mov	r0, r3
 8005656:	f000 fef3 	bl	8006440 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800565a:	f107 0320 	add.w	r3, r7, #32
 800565e:	2218      	movs	r2, #24
 8005660:	2100      	movs	r1, #0
 8005662:	4618      	mov	r0, r3
 8005664:	f000 feec 	bl	8006440 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8005668:	2304      	movs	r3, #4
 800566a:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800566c:	2301      	movs	r3, #1
 800566e:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = NULL;
 8005670:	2300      	movs	r3, #0
 8005672:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = 0;
 8005674:	2300      	movs	r3, #0
 8005676:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8005678:	f107 0314 	add.w	r3, r7, #20
 800567c:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800567e:	2309      	movs	r3, #9
 8005680:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8005682:	f107 0320 	add.w	r3, r7, #32
 8005686:	2100      	movs	r1, #0
 8005688:	4618      	mov	r0, r3
 800568a:	f000 f95f 	bl	800594c <hci_send_req>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	da01      	bge.n	8005698 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8005694:	23ff      	movs	r3, #255	@ 0xff
 8005696:	e018      	b.n	80056ca <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8005698:	7d3b      	ldrb	r3, [r7, #20]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <hci_le_read_local_version+0x64>
    return resp.status;
 800569e:	7d3b      	ldrb	r3, [r7, #20]
 80056a0:	e013      	b.n	80056ca <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 80056a2:	7d7a      	ldrb	r2, [r7, #21]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 80056a8:	8afa      	ldrh	r2, [r7, #22]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 80056ae:	7e3a      	ldrb	r2, [r7, #24]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 80056b4:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 80056be:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056c6:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3738      	adds	r7, #56	@ 0x38
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b092      	sub	sp, #72	@ 0x48
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	4603      	mov	r3, r0
 80056da:	6039      	str	r1, [r7, #0]
 80056dc:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 80056de:	f107 0310 	add.w	r3, r7, #16
 80056e2:	2220      	movs	r2, #32
 80056e4:	2100      	movs	r1, #0
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 feaa 	bl	8006440 <memset>
  scan_resp_cp.length = length;
 80056ec:	79fb      	ldrb	r3, [r7, #7]
 80056ee:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 80056f0:	79fb      	ldrb	r3, [r7, #7]
 80056f2:	2b1f      	cmp	r3, #31
 80056f4:	bf28      	it	cs
 80056f6:	231f      	movcs	r3, #31
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	461a      	mov	r2, r3
 80056fc:	f107 0310 	add.w	r3, r7, #16
 8005700:	3301      	adds	r3, #1
 8005702:	6839      	ldr	r1, [r7, #0]
 8005704:	4618      	mov	r0, r3
 8005706:	f000 ff16 	bl	8006536 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800570a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800570e:	2218      	movs	r2, #24
 8005710:	2100      	movs	r1, #0
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fe94 	bl	8006440 <memset>
  rq.ogf = OGF_LE_CTL;
 8005718:	2308      	movs	r3, #8
 800571a:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800571c:	2309      	movs	r3, #9
 800571e:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &scan_resp_cp;
 8005720:	f107 0310 	add.w	r3, r7, #16
 8005724:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8005726:	2320      	movs	r3, #32
 8005728:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 800572a:	f107 030f 	add.w	r3, r7, #15
 800572e:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 8005730:	2301      	movs	r3, #1
 8005732:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8005734:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005738:	2100      	movs	r1, #0
 800573a:	4618      	mov	r0, r3
 800573c:	f000 f906 	bl	800594c <hci_send_req>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	da01      	bge.n	800574a <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 8005746:	23ff      	movs	r3, #255	@ 0xff
 8005748:	e000      	b.n	800574c <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 800574a:	7bfb      	ldrb	r3, [r7, #15]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3748      	adds	r7, #72	@ 0x48
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	3308      	adds	r3, #8
 8005760:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b04      	cmp	r3, #4
 8005768:	d001      	beq.n	800576e <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800576a:	2301      	movs	r3, #1
 800576c:	e00c      	b.n	8005788 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	3302      	adds	r3, #2
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	461a      	mov	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800577c:	3b03      	subs	r3, #3
 800577e:	429a      	cmp	r2, r3
 8005780:	d001      	beq.n	8005786 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8005782:	2302      	movs	r3, #2
 8005784:	e000      	b.n	8005788 <verify_packet+0x34>
  
  return 0;      
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b0a6      	sub	sp, #152	@ 0x98
 8005798:	af00      	add	r7, sp, #0
 800579a:	607b      	str	r3, [r7, #4]
 800579c:	4603      	mov	r3, r0
 800579e:	81fb      	strh	r3, [r7, #14]
 80057a0:	460b      	mov	r3, r1
 80057a2:	81bb      	strh	r3, [r7, #12]
 80057a4:	4613      	mov	r3, r2
 80057a6:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 80057a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80057ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057b0:	b21a      	sxth	r2, r3
 80057b2:	89fb      	ldrh	r3, [r7, #14]
 80057b4:	029b      	lsls	r3, r3, #10
 80057b6:	b21b      	sxth	r3, r3
 80057b8:	4313      	orrs	r3, r2
 80057ba:	b21b      	sxth	r3, r3
 80057bc:	b29b      	uxth	r3, r3
 80057be:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 80057c0:	7afb      	ldrb	r3, [r7, #11]
 80057c2:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 80057c4:	2301      	movs	r3, #1
 80057c6:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80057c8:	f107 0318 	add.w	r3, r7, #24
 80057cc:	3301      	adds	r3, #1
 80057ce:	461a      	mov	r2, r3
 80057d0:	f107 0314 	add.w	r3, r7, #20
 80057d4:	8819      	ldrh	r1, [r3, #0]
 80057d6:	789b      	ldrb	r3, [r3, #2]
 80057d8:	8011      	strh	r1, [r2, #0]
 80057da:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 80057dc:	f107 0318 	add.w	r3, r7, #24
 80057e0:	3304      	adds	r3, #4
 80057e2:	7afa      	ldrb	r2, [r7, #11]
 80057e4:	6879      	ldr	r1, [r7, #4]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fea5 	bl	8006536 <memcpy>
  
  if (hciContext.io.Send)
 80057ec:	4b08      	ldr	r3, [pc, #32]	@ (8005810 <send_cmd+0x7c>)
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d009      	beq.n	8005808 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 80057f4:	4b06      	ldr	r3, [pc, #24]	@ (8005810 <send_cmd+0x7c>)
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	7afa      	ldrb	r2, [r7, #11]
 80057fa:	b292      	uxth	r2, r2
 80057fc:	3204      	adds	r2, #4
 80057fe:	b291      	uxth	r1, r2
 8005800:	f107 0218 	add.w	r2, r7, #24
 8005804:	4610      	mov	r0, r2
 8005806:	4798      	blx	r3
  }
}
 8005808:	bf00      	nop
 800580a:	3798      	adds	r7, #152	@ 0x98
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	2000058c 	.word	0x2000058c

08005814 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800581e:	e00a      	b.n	8005836 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8005820:	f107 030c 	add.w	r3, r7, #12
 8005824:	4619      	mov	r1, r3
 8005826:	6838      	ldr	r0, [r7, #0]
 8005828:	f000 fae8 	bl	8005dfc <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4619      	mov	r1, r3
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fa4f 	bl	8005cd4 <list_insert_head>
  while (!list_is_empty(src_list))
 8005836:	6838      	ldr	r0, [r7, #0]
 8005838:	f000 fa2a 	bl	8005c90 <list_is_empty>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0ee      	beq.n	8005820 <move_list+0xc>
  }
}
 8005842:	bf00      	nop
 8005844:	bf00      	nop
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8005852:	e009      	b.n	8005868 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8005854:	1d3b      	adds	r3, r7, #4
 8005856:	4619      	mov	r1, r3
 8005858:	4809      	ldr	r0, [pc, #36]	@ (8005880 <free_event_list+0x34>)
 800585a:	f000 faa8 	bl	8005dae <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4619      	mov	r1, r3
 8005862:	4808      	ldr	r0, [pc, #32]	@ (8005884 <free_event_list+0x38>)
 8005864:	f000 fa5c 	bl	8005d20 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8005868:	4806      	ldr	r0, [pc, #24]	@ (8005884 <free_event_list+0x38>)
 800586a:	f000 faee 	bl	8005e4a <list_get_size>
 800586e:	4603      	mov	r3, r0
 8005870:	2b01      	cmp	r3, #1
 8005872:	ddef      	ble.n	8005854 <free_event_list+0x8>
  }
}
 8005874:	bf00      	nop
 8005876:	bf00      	nop
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	200002c8 	.word	0x200002c8
 8005884:	200002c0 	.word	0x200002c0

08005888 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8005898:	4a18      	ldr	r2, [pc, #96]	@ (80058fc <hci_init+0x74>)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800589e:	4818      	ldr	r0, [pc, #96]	@ (8005900 <hci_init+0x78>)
 80058a0:	f000 f9e6 	bl	8005c70 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 80058a4:	4817      	ldr	r0, [pc, #92]	@ (8005904 <hci_init+0x7c>)
 80058a6:	f000 f9e3 	bl	8005c70 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 80058aa:	f7fb fb75 	bl	8000f98 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80058ae:	2300      	movs	r3, #0
 80058b0:	73fb      	strb	r3, [r7, #15]
 80058b2:	e00c      	b.n	80058ce <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
 80058b6:	228c      	movs	r2, #140	@ 0x8c
 80058b8:	fb02 f303 	mul.w	r3, r2, r3
 80058bc:	4a12      	ldr	r2, [pc, #72]	@ (8005908 <hci_init+0x80>)
 80058be:	4413      	add	r3, r2
 80058c0:	4619      	mov	r1, r3
 80058c2:	480f      	ldr	r0, [pc, #60]	@ (8005900 <hci_init+0x78>)
 80058c4:	f000 fa2c 	bl	8005d20 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
 80058ca:	3301      	adds	r3, #1
 80058cc:	73fb      	strb	r3, [r7, #15]
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	d9ef      	bls.n	80058b4 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 80058d4:	4b09      	ldr	r3, [pc, #36]	@ (80058fc <hci_init+0x74>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <hci_init+0x5c>
 80058dc:	4b07      	ldr	r3, [pc, #28]	@ (80058fc <hci_init+0x74>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2000      	movs	r0, #0
 80058e2:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 80058e4:	4b05      	ldr	r3, [pc, #20]	@ (80058fc <hci_init+0x74>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <hci_init+0x6a>
 80058ec:	4b03      	ldr	r3, [pc, #12]	@ (80058fc <hci_init+0x74>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	4798      	blx	r3
}
 80058f2:	bf00      	nop
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	2000058c 	.word	0x2000058c
 8005900:	200002c0 	.word	0x200002c0
 8005904:	200002c8 	.word	0x200002c8
 8005908:	200002d0 	.word	0x200002d0

0800590c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a0b      	ldr	r2, [pc, #44]	@ (8005948 <hci_register_io_bus+0x3c>)
 800591a:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	4a09      	ldr	r2, [pc, #36]	@ (8005948 <hci_register_io_bus+0x3c>)
 8005922:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	4a07      	ldr	r2, [pc, #28]	@ (8005948 <hci_register_io_bus+0x3c>)
 800592a:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	4a05      	ldr	r2, [pc, #20]	@ (8005948 <hci_register_io_bus+0x3c>)
 8005932:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	4a03      	ldr	r2, [pc, #12]	@ (8005948 <hci_register_io_bus+0x3c>)
 800593a:	6093      	str	r3, [r2, #8]
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr
 8005948:	2000058c 	.word	0x2000058c

0800594c <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b08e      	sub	sp, #56	@ 0x38
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	460b      	mov	r3, r1
 8005956:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	885b      	ldrh	r3, [r3, #2]
 800595c:	b21b      	sxth	r3, r3
 800595e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005962:	b21a      	sxth	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	029b      	lsls	r3, r3, #10
 800596a:	b21b      	sxth	r3, r3
 800596c:	4313      	orrs	r3, r2
 800596e:	b21b      	sxth	r3, r3
 8005970:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8005972:	2300      	movs	r3, #0
 8005974:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8005976:	f107 0308 	add.w	r3, r7, #8
 800597a:	4618      	mov	r0, r3
 800597c:	f000 f978 	bl	8005c70 <list_init_head>

  free_event_list();
 8005980:	f7ff ff64 	bl	800584c <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	8818      	ldrh	r0, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	8859      	ldrh	r1, [r3, #2]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	b2da      	uxtb	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f7ff fefd 	bl	8005794 <send_cmd>
  
  if (async)
 800599a:	78fb      	ldrb	r3, [r7, #3]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <hci_send_req+0x58>
  {
    return 0;
 80059a0:	2300      	movs	r3, #0
 80059a2:	e0e2      	b.n	8005b6a <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 80059a4:	f7fd f916 	bl	8002bd4 <HAL_GetTick>
 80059a8:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80059aa:	f7fd f913 	bl	8002bd4 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80059b8:	f200 80b3 	bhi.w	8005b22 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80059bc:	486d      	ldr	r0, [pc, #436]	@ (8005b74 <hci_send_req+0x228>)
 80059be:	f000 f967 	bl	8005c90 <list_is_empty>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d000      	beq.n	80059ca <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80059c8:	e7ef      	b.n	80059aa <hci_send_req+0x5e>
      {
        break;
 80059ca:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 80059cc:	f107 0310 	add.w	r3, r7, #16
 80059d0:	4619      	mov	r1, r3
 80059d2:	4868      	ldr	r0, [pc, #416]	@ (8005b74 <hci_send_req+0x228>)
 80059d4:	f000 f9eb 	bl	8005dae <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	3308      	adds	r3, #8
 80059dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 80059de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	2b04      	cmp	r3, #4
 80059e4:	d17f      	bne.n	8005ae6 <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 80059e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e8:	3301      	adds	r3, #1
 80059ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	3308      	adds	r3, #8
 80059f0:	3303      	adds	r3, #3
 80059f2:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80059fa:	3b03      	subs	r3, #3
 80059fc:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 80059fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a04:	d04c      	beq.n	8005aa0 <hci_send_req+0x154>
 8005a06:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a08:	dc68      	bgt.n	8005adc <hci_send_req+0x190>
 8005a0a:	2b10      	cmp	r3, #16
 8005a0c:	f000 808b 	beq.w	8005b26 <hci_send_req+0x1da>
 8005a10:	2b10      	cmp	r3, #16
 8005a12:	dc63      	bgt.n	8005adc <hci_send_req+0x190>
 8005a14:	2b0e      	cmp	r3, #14
 8005a16:	d023      	beq.n	8005a60 <hci_send_req+0x114>
 8005a18:	2b0f      	cmp	r3, #15
 8005a1a:	d15f      	bne.n	8005adc <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1e:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	885b      	ldrh	r3, [r3, #2]
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d17e      	bne.n	8005b2a <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	2b0f      	cmp	r3, #15
 8005a32:	d004      	beq.n	8005a3e <hci_send_req+0xf2>
          if (cs->status) {
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d051      	beq.n	8005ae0 <hci_send_req+0x194>
            goto failed;
 8005a3c:	e078      	b.n	8005b30 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	695a      	ldr	r2, [r3, #20]
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	bf28      	it	cs
 8005a48:	461a      	movcs	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6918      	ldr	r0, [r3, #16]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	461a      	mov	r2, r3
 8005a58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a5a:	f000 fd6c 	bl	8006536 <memcpy>
        goto done;
 8005a5e:	e078      	b.n	8005b52 <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8005a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a62:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d15d      	bne.n	8005b2e <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8005a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a74:	3303      	adds	r3, #3
 8005a76:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	3b03      	subs	r3, #3
 8005a7c:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	695a      	ldr	r2, [r3, #20]
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	bf28      	it	cs
 8005a88:	461a      	movcs	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6918      	ldr	r0, [r3, #16]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	461a      	mov	r2, r3
 8005a98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a9a:	f000 fd4c 	bl	8006536 <memcpy>
        goto done;
 8005a9e:	e058      	b.n	8005b52 <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa2:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d118      	bne.n	8005ae4 <hci_send_req+0x198>
          break;
      
        len -= 1;
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	695a      	ldr	r2, [r3, #20]
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	bf28      	it	cs
 8005ac2:	461a      	movcs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6918      	ldr	r0, [r3, #16]
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	1c59      	adds	r1, r3, #1
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	f000 fd2e 	bl	8006536 <memcpy>
        goto done;
 8005ada:	e03a      	b.n	8005b52 <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8005adc:	bf00      	nop
 8005ade:	e002      	b.n	8005ae6 <hci_send_req+0x19a>
          break;
 8005ae0:	bf00      	nop
 8005ae2:	e000      	b.n	8005ae6 <hci_send_req+0x19a>
          break;
 8005ae4:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8005ae6:	4824      	ldr	r0, [pc, #144]	@ (8005b78 <hci_send_req+0x22c>)
 8005ae8:	f000 f8d2 	bl	8005c90 <list_is_empty>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00d      	beq.n	8005b0e <hci_send_req+0x1c2>
 8005af2:	4820      	ldr	r0, [pc, #128]	@ (8005b74 <hci_send_req+0x228>)
 8005af4:	f000 f8cc 	bl	8005c90 <list_is_empty>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d007      	beq.n	8005b0e <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	4619      	mov	r1, r3
 8005b02:	481d      	ldr	r0, [pc, #116]	@ (8005b78 <hci_send_req+0x22c>)
 8005b04:	f000 f90c 	bl	8005d20 <list_insert_tail>
      hciReadPacket=NULL;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	613b      	str	r3, [r7, #16]
 8005b0c:	e008      	b.n	8005b20 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	f107 0308 	add.w	r3, r7, #8
 8005b14:	4611      	mov	r1, r2
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 f902 	bl	8005d20 <list_insert_tail>
      hciReadPacket=NULL;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	613b      	str	r3, [r7, #16]
  {
 8005b20:	e740      	b.n	80059a4 <hci_send_req+0x58>
        goto failed;
 8005b22:	bf00      	nop
 8005b24:	e004      	b.n	8005b30 <hci_send_req+0x1e4>
        goto failed;
 8005b26:	bf00      	nop
 8005b28:	e002      	b.n	8005b30 <hci_send_req+0x1e4>
          goto failed;
 8005b2a:	bf00      	nop
 8005b2c:	e000      	b.n	8005b30 <hci_send_req+0x1e4>
          goto failed;
 8005b2e:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d004      	beq.n	8005b40 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	4619      	mov	r1, r3
 8005b3a:	480f      	ldr	r0, [pc, #60]	@ (8005b78 <hci_send_req+0x22c>)
 8005b3c:	f000 f8ca 	bl	8005cd4 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8005b40:	f107 0308 	add.w	r3, r7, #8
 8005b44:	4619      	mov	r1, r3
 8005b46:	480b      	ldr	r0, [pc, #44]	@ (8005b74 <hci_send_req+0x228>)
 8005b48:	f7ff fe64 	bl	8005814 <move_list>

  return -1;
 8005b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b50:	e00b      	b.n	8005b6a <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	4619      	mov	r1, r3
 8005b56:	4808      	ldr	r0, [pc, #32]	@ (8005b78 <hci_send_req+0x22c>)
 8005b58:	f000 f8bc 	bl	8005cd4 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8005b5c:	f107 0308 	add.w	r3, r7, #8
 8005b60:	4619      	mov	r1, r3
 8005b62:	4804      	ldr	r0, [pc, #16]	@ (8005b74 <hci_send_req+0x228>)
 8005b64:	f7ff fe56 	bl	8005814 <move_list>

  return 0;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3738      	adds	r7, #56	@ 0x38
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	200002c8 	.word	0x200002c8
 8005b78:	200002c0 	.word	0x200002c0

08005b7c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8005b82:	2300      	movs	r3, #0
 8005b84:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8005b86:	e013      	b.n	8005bb0 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8005b88:	1d3b      	adds	r3, r7, #4
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	480e      	ldr	r0, [pc, #56]	@ (8005bc8 <hci_user_evt_proc+0x4c>)
 8005b8e:	f000 f90e 	bl	8005dae <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8005b92:	4b0e      	ldr	r3, [pc, #56]	@ (8005bcc <hci_user_evt_proc+0x50>)
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d005      	beq.n	8005ba6 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8005b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8005bcc <hci_user_evt_proc+0x50>)
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	3208      	adds	r2, #8
 8005ba2:	4610      	mov	r0, r2
 8005ba4:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4619      	mov	r1, r3
 8005baa:	4809      	ldr	r0, [pc, #36]	@ (8005bd0 <hci_user_evt_proc+0x54>)
 8005bac:	f000 f8b8 	bl	8005d20 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8005bb0:	4805      	ldr	r0, [pc, #20]	@ (8005bc8 <hci_user_evt_proc+0x4c>)
 8005bb2:	f000 f86d 	bl	8005c90 <list_is_empty>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d0e5      	beq.n	8005b88 <hci_user_evt_proc+0xc>
  }
}
 8005bbc:	bf00      	nop
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	200002c8 	.word	0x200002c8
 8005bcc:	2000058c 	.word	0x2000058c
 8005bd0:	200002c0 	.word	0x200002c0

08005bd4 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8005be0:	2300      	movs	r3, #0
 8005be2:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8005be4:	481f      	ldr	r0, [pc, #124]	@ (8005c64 <hci_notify_asynch_evt+0x90>)
 8005be6:	f000 f853 	bl	8005c90 <list_is_empty>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d132      	bne.n	8005c56 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8005bf0:	f107 030c 	add.w	r3, r7, #12
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	481b      	ldr	r0, [pc, #108]	@ (8005c64 <hci_notify_asynch_evt+0x90>)
 8005bf8:	f000 f8d9 	bl	8005dae <list_remove_head>
    
    if (hciContext.io.Receive)
 8005bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8005c68 <hci_notify_asynch_evt+0x94>)
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d02a      	beq.n	8005c5a <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8005c04:	4b18      	ldr	r3, [pc, #96]	@ (8005c68 <hci_notify_asynch_evt+0x94>)
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	3208      	adds	r2, #8
 8005c0c:	2180      	movs	r1, #128	@ 0x80
 8005c0e:	4610      	mov	r0, r2
 8005c10:	4798      	blx	r3
 8005c12:	4603      	mov	r3, r0
 8005c14:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8005c16:	7cfb      	ldrb	r3, [r7, #19]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d016      	beq.n	8005c4a <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	7cfa      	ldrb	r2, [r7, #19]
 8005c20:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7ff fd94 	bl	8005754 <verify_packet>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d105      	bne.n	8005c3e <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	4619      	mov	r1, r3
 8005c36:	480d      	ldr	r0, [pc, #52]	@ (8005c6c <hci_notify_asynch_evt+0x98>)
 8005c38:	f000 f872 	bl	8005d20 <list_insert_tail>
 8005c3c:	e00d      	b.n	8005c5a <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4619      	mov	r1, r3
 8005c42:	4808      	ldr	r0, [pc, #32]	@ (8005c64 <hci_notify_asynch_evt+0x90>)
 8005c44:	f000 f846 	bl	8005cd4 <list_insert_head>
 8005c48:	e007      	b.n	8005c5a <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4805      	ldr	r0, [pc, #20]	@ (8005c64 <hci_notify_asynch_evt+0x90>)
 8005c50:	f000 f840 	bl	8005cd4 <list_insert_head>
 8005c54:	e001      	b.n	8005c5a <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8005c56:	2301      	movs	r3, #1
 8005c58:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8005c5a:	697b      	ldr	r3, [r7, #20]

}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	200002c0 	.word	0x200002c0
 8005c68:	2000058c 	.word	0x2000058c
 8005c6c:	200002c8 	.word	0x200002c8

08005c70 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	605a      	str	r2, [r3, #4]
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c98:	f3ef 8310 	mrs	r3, PRIMASK
 8005c9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005ca0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ca2:	b672      	cpsid	i
}
 8005ca4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d102      	bne.n	8005cb6 <list_is_empty+0x26>
  {
    return_value = 1;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	75fb      	strb	r3, [r7, #23]
 8005cb4:	e001      	b.n	8005cba <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	75fb      	strb	r3, [r7, #23]
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	f383 8810 	msr	PRIMASK, r3
}
 8005cc4:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8005cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	371c      	adds	r7, #28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005cde:	f3ef 8310 	mrs	r3, PRIMASK
 8005ce2:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005ce6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ce8:	b672      	cpsid	i
}
 8005cea:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	605a      	str	r2, [r3, #4]
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f383 8810 	msr	PRIMASK, r3
}
 8005d12:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005d14:	bf00      	nop
 8005d16:	371c      	adds	r7, #28
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d30:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005d32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005d34:	b672      	cpsid	i
}
 8005d36:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	683a      	ldr	r2, [r7, #0]
 8005d4a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f383 8810 	msr	PRIMASK, r3
}
 8005d5e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005d60:	bf00      	nop
 8005d62:	371c      	adds	r7, #28
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005d74:	f3ef 8310 	mrs	r3, PRIMASK
 8005d78:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005d7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005d7e:	b672      	cpsid	i
}
 8005d80:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6812      	ldr	r2, [r2, #0]
 8005d8a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6852      	ldr	r2, [r2, #4]
 8005d94:	605a      	str	r2, [r3, #4]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f383 8810 	msr	PRIMASK, r3
}
 8005da0:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005da2:	bf00      	nop
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b086      	sub	sp, #24
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005db8:	f3ef 8310 	mrs	r3, PRIMASK
 8005dbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005dc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005dc2:	b672      	cpsid	i
}
 8005dc4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7ff ffca 	bl	8005d6c <list_remove_node>
  (*node)->next = NULL;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2200      	movs	r2, #0
 8005de6:	605a      	str	r2, [r3, #4]
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f383 8810 	msr	PRIMASK, r3
}
 8005df2:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005df4:	bf00      	nop
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005e06:	f3ef 8310 	mrs	r3, PRIMASK
 8005e0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005e0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e10:	b672      	cpsid	i
}
 8005e12:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7ff ffa3 	bl	8005d6c <list_remove_node>
  (*node)->next = NULL;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2200      	movs	r2, #0
 8005e34:	605a      	str	r2, [r3, #4]
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f383 8810 	msr	PRIMASK, r3
}
 8005e40:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005e42:	bf00      	nop
 8005e44:	3718      	adds	r7, #24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b089      	sub	sp, #36	@ 0x24
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  int size = 0;
 8005e52:	2300      	movs	r3, #0
 8005e54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005e56:	f3ef 8310 	mrs	r3, PRIMASK
 8005e5a:	613b      	str	r3, [r7, #16]
  return(result);
 8005e5c:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005e5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e60:	b672      	cpsid	i
}
 8005e62:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8005e6a:	e005      	b.n	8005e78 <list_get_size+0x2e>
  {
    size++;
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d1f5      	bne.n	8005e6c <list_get_size+0x22>
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f383 8810 	msr	PRIMASK, r3
}
 8005e8a:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8005e8c:	69fb      	ldr	r3, [r7, #28]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3724      	adds	r7, #36	@ 0x24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
	...

08005e9c <__sflush_r>:
 8005e9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea4:	0716      	lsls	r6, r2, #28
 8005ea6:	4605      	mov	r5, r0
 8005ea8:	460c      	mov	r4, r1
 8005eaa:	d454      	bmi.n	8005f56 <__sflush_r+0xba>
 8005eac:	684b      	ldr	r3, [r1, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	dc02      	bgt.n	8005eb8 <__sflush_r+0x1c>
 8005eb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	dd48      	ble.n	8005f4a <__sflush_r+0xae>
 8005eb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005eba:	2e00      	cmp	r6, #0
 8005ebc:	d045      	beq.n	8005f4a <__sflush_r+0xae>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005ec4:	682f      	ldr	r7, [r5, #0]
 8005ec6:	6a21      	ldr	r1, [r4, #32]
 8005ec8:	602b      	str	r3, [r5, #0]
 8005eca:	d030      	beq.n	8005f2e <__sflush_r+0x92>
 8005ecc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005ece:	89a3      	ldrh	r3, [r4, #12]
 8005ed0:	0759      	lsls	r1, r3, #29
 8005ed2:	d505      	bpl.n	8005ee0 <__sflush_r+0x44>
 8005ed4:	6863      	ldr	r3, [r4, #4]
 8005ed6:	1ad2      	subs	r2, r2, r3
 8005ed8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005eda:	b10b      	cbz	r3, 8005ee0 <__sflush_r+0x44>
 8005edc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ede:	1ad2      	subs	r2, r2, r3
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ee4:	6a21      	ldr	r1, [r4, #32]
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	47b0      	blx	r6
 8005eea:	1c43      	adds	r3, r0, #1
 8005eec:	89a3      	ldrh	r3, [r4, #12]
 8005eee:	d106      	bne.n	8005efe <__sflush_r+0x62>
 8005ef0:	6829      	ldr	r1, [r5, #0]
 8005ef2:	291d      	cmp	r1, #29
 8005ef4:	d82b      	bhi.n	8005f4e <__sflush_r+0xb2>
 8005ef6:	4a2a      	ldr	r2, [pc, #168]	@ (8005fa0 <__sflush_r+0x104>)
 8005ef8:	410a      	asrs	r2, r1
 8005efa:	07d6      	lsls	r6, r2, #31
 8005efc:	d427      	bmi.n	8005f4e <__sflush_r+0xb2>
 8005efe:	2200      	movs	r2, #0
 8005f00:	6062      	str	r2, [r4, #4]
 8005f02:	04d9      	lsls	r1, r3, #19
 8005f04:	6922      	ldr	r2, [r4, #16]
 8005f06:	6022      	str	r2, [r4, #0]
 8005f08:	d504      	bpl.n	8005f14 <__sflush_r+0x78>
 8005f0a:	1c42      	adds	r2, r0, #1
 8005f0c:	d101      	bne.n	8005f12 <__sflush_r+0x76>
 8005f0e:	682b      	ldr	r3, [r5, #0]
 8005f10:	b903      	cbnz	r3, 8005f14 <__sflush_r+0x78>
 8005f12:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f16:	602f      	str	r7, [r5, #0]
 8005f18:	b1b9      	cbz	r1, 8005f4a <__sflush_r+0xae>
 8005f1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f1e:	4299      	cmp	r1, r3
 8005f20:	d002      	beq.n	8005f28 <__sflush_r+0x8c>
 8005f22:	4628      	mov	r0, r5
 8005f24:	f000 fb16 	bl	8006554 <_free_r>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f2c:	e00d      	b.n	8005f4a <__sflush_r+0xae>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	4628      	mov	r0, r5
 8005f32:	47b0      	blx	r6
 8005f34:	4602      	mov	r2, r0
 8005f36:	1c50      	adds	r0, r2, #1
 8005f38:	d1c9      	bne.n	8005ece <__sflush_r+0x32>
 8005f3a:	682b      	ldr	r3, [r5, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0c6      	beq.n	8005ece <__sflush_r+0x32>
 8005f40:	2b1d      	cmp	r3, #29
 8005f42:	d001      	beq.n	8005f48 <__sflush_r+0xac>
 8005f44:	2b16      	cmp	r3, #22
 8005f46:	d11e      	bne.n	8005f86 <__sflush_r+0xea>
 8005f48:	602f      	str	r7, [r5, #0]
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	e022      	b.n	8005f94 <__sflush_r+0xf8>
 8005f4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f52:	b21b      	sxth	r3, r3
 8005f54:	e01b      	b.n	8005f8e <__sflush_r+0xf2>
 8005f56:	690f      	ldr	r7, [r1, #16]
 8005f58:	2f00      	cmp	r7, #0
 8005f5a:	d0f6      	beq.n	8005f4a <__sflush_r+0xae>
 8005f5c:	0793      	lsls	r3, r2, #30
 8005f5e:	680e      	ldr	r6, [r1, #0]
 8005f60:	bf08      	it	eq
 8005f62:	694b      	ldreq	r3, [r1, #20]
 8005f64:	600f      	str	r7, [r1, #0]
 8005f66:	bf18      	it	ne
 8005f68:	2300      	movne	r3, #0
 8005f6a:	eba6 0807 	sub.w	r8, r6, r7
 8005f6e:	608b      	str	r3, [r1, #8]
 8005f70:	f1b8 0f00 	cmp.w	r8, #0
 8005f74:	dde9      	ble.n	8005f4a <__sflush_r+0xae>
 8005f76:	6a21      	ldr	r1, [r4, #32]
 8005f78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005f7a:	4643      	mov	r3, r8
 8005f7c:	463a      	mov	r2, r7
 8005f7e:	4628      	mov	r0, r5
 8005f80:	47b0      	blx	r6
 8005f82:	2800      	cmp	r0, #0
 8005f84:	dc08      	bgt.n	8005f98 <__sflush_r+0xfc>
 8005f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f8e:	81a3      	strh	r3, [r4, #12]
 8005f90:	f04f 30ff 	mov.w	r0, #4294967295
 8005f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f98:	4407      	add	r7, r0
 8005f9a:	eba8 0800 	sub.w	r8, r8, r0
 8005f9e:	e7e7      	b.n	8005f70 <__sflush_r+0xd4>
 8005fa0:	dfbffffe 	.word	0xdfbffffe

08005fa4 <_fflush_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	690b      	ldr	r3, [r1, #16]
 8005fa8:	4605      	mov	r5, r0
 8005faa:	460c      	mov	r4, r1
 8005fac:	b913      	cbnz	r3, 8005fb4 <_fflush_r+0x10>
 8005fae:	2500      	movs	r5, #0
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	bd38      	pop	{r3, r4, r5, pc}
 8005fb4:	b118      	cbz	r0, 8005fbe <_fflush_r+0x1a>
 8005fb6:	6a03      	ldr	r3, [r0, #32]
 8005fb8:	b90b      	cbnz	r3, 8005fbe <_fflush_r+0x1a>
 8005fba:	f000 f8bb 	bl	8006134 <__sinit>
 8005fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d0f3      	beq.n	8005fae <_fflush_r+0xa>
 8005fc6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005fc8:	07d0      	lsls	r0, r2, #31
 8005fca:	d404      	bmi.n	8005fd6 <_fflush_r+0x32>
 8005fcc:	0599      	lsls	r1, r3, #22
 8005fce:	d402      	bmi.n	8005fd6 <_fflush_r+0x32>
 8005fd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fd2:	f000 faae 	bl	8006532 <__retarget_lock_acquire_recursive>
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	4621      	mov	r1, r4
 8005fda:	f7ff ff5f 	bl	8005e9c <__sflush_r>
 8005fde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fe0:	07da      	lsls	r2, r3, #31
 8005fe2:	4605      	mov	r5, r0
 8005fe4:	d4e4      	bmi.n	8005fb0 <_fflush_r+0xc>
 8005fe6:	89a3      	ldrh	r3, [r4, #12]
 8005fe8:	059b      	lsls	r3, r3, #22
 8005fea:	d4e1      	bmi.n	8005fb0 <_fflush_r+0xc>
 8005fec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fee:	f000 faa1 	bl	8006534 <__retarget_lock_release_recursive>
 8005ff2:	e7dd      	b.n	8005fb0 <_fflush_r+0xc>

08005ff4 <fflush>:
 8005ff4:	4601      	mov	r1, r0
 8005ff6:	b920      	cbnz	r0, 8006002 <fflush+0xe>
 8005ff8:	4a04      	ldr	r2, [pc, #16]	@ (800600c <fflush+0x18>)
 8005ffa:	4905      	ldr	r1, [pc, #20]	@ (8006010 <fflush+0x1c>)
 8005ffc:	4805      	ldr	r0, [pc, #20]	@ (8006014 <fflush+0x20>)
 8005ffe:	f000 b8b1 	b.w	8006164 <_fwalk_sglue>
 8006002:	4b05      	ldr	r3, [pc, #20]	@ (8006018 <fflush+0x24>)
 8006004:	6818      	ldr	r0, [r3, #0]
 8006006:	f7ff bfcd 	b.w	8005fa4 <_fflush_r>
 800600a:	bf00      	nop
 800600c:	2000002c 	.word	0x2000002c
 8006010:	08005fa5 	.word	0x08005fa5
 8006014:	2000003c 	.word	0x2000003c
 8006018:	20000038 	.word	0x20000038

0800601c <std>:
 800601c:	2300      	movs	r3, #0
 800601e:	b510      	push	{r4, lr}
 8006020:	4604      	mov	r4, r0
 8006022:	e9c0 3300 	strd	r3, r3, [r0]
 8006026:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800602a:	6083      	str	r3, [r0, #8]
 800602c:	8181      	strh	r1, [r0, #12]
 800602e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006030:	81c2      	strh	r2, [r0, #14]
 8006032:	6183      	str	r3, [r0, #24]
 8006034:	4619      	mov	r1, r3
 8006036:	2208      	movs	r2, #8
 8006038:	305c      	adds	r0, #92	@ 0x5c
 800603a:	f000 fa01 	bl	8006440 <memset>
 800603e:	4b0d      	ldr	r3, [pc, #52]	@ (8006074 <std+0x58>)
 8006040:	6263      	str	r3, [r4, #36]	@ 0x24
 8006042:	4b0d      	ldr	r3, [pc, #52]	@ (8006078 <std+0x5c>)
 8006044:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006046:	4b0d      	ldr	r3, [pc, #52]	@ (800607c <std+0x60>)
 8006048:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800604a:	4b0d      	ldr	r3, [pc, #52]	@ (8006080 <std+0x64>)
 800604c:	6323      	str	r3, [r4, #48]	@ 0x30
 800604e:	4b0d      	ldr	r3, [pc, #52]	@ (8006084 <std+0x68>)
 8006050:	6224      	str	r4, [r4, #32]
 8006052:	429c      	cmp	r4, r3
 8006054:	d006      	beq.n	8006064 <std+0x48>
 8006056:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800605a:	4294      	cmp	r4, r2
 800605c:	d002      	beq.n	8006064 <std+0x48>
 800605e:	33d0      	adds	r3, #208	@ 0xd0
 8006060:	429c      	cmp	r4, r3
 8006062:	d105      	bne.n	8006070 <std+0x54>
 8006064:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800606c:	f000 ba60 	b.w	8006530 <__retarget_lock_init_recursive>
 8006070:	bd10      	pop	{r4, pc}
 8006072:	bf00      	nop
 8006074:	08006291 	.word	0x08006291
 8006078:	080062b3 	.word	0x080062b3
 800607c:	080062eb 	.word	0x080062eb
 8006080:	0800630f 	.word	0x0800630f
 8006084:	200005ac 	.word	0x200005ac

08006088 <stdio_exit_handler>:
 8006088:	4a02      	ldr	r2, [pc, #8]	@ (8006094 <stdio_exit_handler+0xc>)
 800608a:	4903      	ldr	r1, [pc, #12]	@ (8006098 <stdio_exit_handler+0x10>)
 800608c:	4803      	ldr	r0, [pc, #12]	@ (800609c <stdio_exit_handler+0x14>)
 800608e:	f000 b869 	b.w	8006164 <_fwalk_sglue>
 8006092:	bf00      	nop
 8006094:	2000002c 	.word	0x2000002c
 8006098:	08005fa5 	.word	0x08005fa5
 800609c:	2000003c 	.word	0x2000003c

080060a0 <cleanup_stdio>:
 80060a0:	6841      	ldr	r1, [r0, #4]
 80060a2:	4b0c      	ldr	r3, [pc, #48]	@ (80060d4 <cleanup_stdio+0x34>)
 80060a4:	4299      	cmp	r1, r3
 80060a6:	b510      	push	{r4, lr}
 80060a8:	4604      	mov	r4, r0
 80060aa:	d001      	beq.n	80060b0 <cleanup_stdio+0x10>
 80060ac:	f7ff ff7a 	bl	8005fa4 <_fflush_r>
 80060b0:	68a1      	ldr	r1, [r4, #8]
 80060b2:	4b09      	ldr	r3, [pc, #36]	@ (80060d8 <cleanup_stdio+0x38>)
 80060b4:	4299      	cmp	r1, r3
 80060b6:	d002      	beq.n	80060be <cleanup_stdio+0x1e>
 80060b8:	4620      	mov	r0, r4
 80060ba:	f7ff ff73 	bl	8005fa4 <_fflush_r>
 80060be:	68e1      	ldr	r1, [r4, #12]
 80060c0:	4b06      	ldr	r3, [pc, #24]	@ (80060dc <cleanup_stdio+0x3c>)
 80060c2:	4299      	cmp	r1, r3
 80060c4:	d004      	beq.n	80060d0 <cleanup_stdio+0x30>
 80060c6:	4620      	mov	r0, r4
 80060c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060cc:	f7ff bf6a 	b.w	8005fa4 <_fflush_r>
 80060d0:	bd10      	pop	{r4, pc}
 80060d2:	bf00      	nop
 80060d4:	200005ac 	.word	0x200005ac
 80060d8:	20000614 	.word	0x20000614
 80060dc:	2000067c 	.word	0x2000067c

080060e0 <global_stdio_init.part.0>:
 80060e0:	b510      	push	{r4, lr}
 80060e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006110 <global_stdio_init.part.0+0x30>)
 80060e4:	4c0b      	ldr	r4, [pc, #44]	@ (8006114 <global_stdio_init.part.0+0x34>)
 80060e6:	4a0c      	ldr	r2, [pc, #48]	@ (8006118 <global_stdio_init.part.0+0x38>)
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	4620      	mov	r0, r4
 80060ec:	2200      	movs	r2, #0
 80060ee:	2104      	movs	r1, #4
 80060f0:	f7ff ff94 	bl	800601c <std>
 80060f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80060f8:	2201      	movs	r2, #1
 80060fa:	2109      	movs	r1, #9
 80060fc:	f7ff ff8e 	bl	800601c <std>
 8006100:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006104:	2202      	movs	r2, #2
 8006106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800610a:	2112      	movs	r1, #18
 800610c:	f7ff bf86 	b.w	800601c <std>
 8006110:	200006e4 	.word	0x200006e4
 8006114:	200005ac 	.word	0x200005ac
 8006118:	08006089 	.word	0x08006089

0800611c <__sfp_lock_acquire>:
 800611c:	4801      	ldr	r0, [pc, #4]	@ (8006124 <__sfp_lock_acquire+0x8>)
 800611e:	f000 ba08 	b.w	8006532 <__retarget_lock_acquire_recursive>
 8006122:	bf00      	nop
 8006124:	200006ed 	.word	0x200006ed

08006128 <__sfp_lock_release>:
 8006128:	4801      	ldr	r0, [pc, #4]	@ (8006130 <__sfp_lock_release+0x8>)
 800612a:	f000 ba03 	b.w	8006534 <__retarget_lock_release_recursive>
 800612e:	bf00      	nop
 8006130:	200006ed 	.word	0x200006ed

08006134 <__sinit>:
 8006134:	b510      	push	{r4, lr}
 8006136:	4604      	mov	r4, r0
 8006138:	f7ff fff0 	bl	800611c <__sfp_lock_acquire>
 800613c:	6a23      	ldr	r3, [r4, #32]
 800613e:	b11b      	cbz	r3, 8006148 <__sinit+0x14>
 8006140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006144:	f7ff bff0 	b.w	8006128 <__sfp_lock_release>
 8006148:	4b04      	ldr	r3, [pc, #16]	@ (800615c <__sinit+0x28>)
 800614a:	6223      	str	r3, [r4, #32]
 800614c:	4b04      	ldr	r3, [pc, #16]	@ (8006160 <__sinit+0x2c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1f5      	bne.n	8006140 <__sinit+0xc>
 8006154:	f7ff ffc4 	bl	80060e0 <global_stdio_init.part.0>
 8006158:	e7f2      	b.n	8006140 <__sinit+0xc>
 800615a:	bf00      	nop
 800615c:	080060a1 	.word	0x080060a1
 8006160:	200006e4 	.word	0x200006e4

08006164 <_fwalk_sglue>:
 8006164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006168:	4607      	mov	r7, r0
 800616a:	4688      	mov	r8, r1
 800616c:	4614      	mov	r4, r2
 800616e:	2600      	movs	r6, #0
 8006170:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006174:	f1b9 0901 	subs.w	r9, r9, #1
 8006178:	d505      	bpl.n	8006186 <_fwalk_sglue+0x22>
 800617a:	6824      	ldr	r4, [r4, #0]
 800617c:	2c00      	cmp	r4, #0
 800617e:	d1f7      	bne.n	8006170 <_fwalk_sglue+0xc>
 8006180:	4630      	mov	r0, r6
 8006182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006186:	89ab      	ldrh	r3, [r5, #12]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d907      	bls.n	800619c <_fwalk_sglue+0x38>
 800618c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006190:	3301      	adds	r3, #1
 8006192:	d003      	beq.n	800619c <_fwalk_sglue+0x38>
 8006194:	4629      	mov	r1, r5
 8006196:	4638      	mov	r0, r7
 8006198:	47c0      	blx	r8
 800619a:	4306      	orrs	r6, r0
 800619c:	3568      	adds	r5, #104	@ 0x68
 800619e:	e7e9      	b.n	8006174 <_fwalk_sglue+0x10>

080061a0 <iprintf>:
 80061a0:	b40f      	push	{r0, r1, r2, r3}
 80061a2:	b507      	push	{r0, r1, r2, lr}
 80061a4:	4906      	ldr	r1, [pc, #24]	@ (80061c0 <iprintf+0x20>)
 80061a6:	ab04      	add	r3, sp, #16
 80061a8:	6808      	ldr	r0, [r1, #0]
 80061aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80061ae:	6881      	ldr	r1, [r0, #8]
 80061b0:	9301      	str	r3, [sp, #4]
 80061b2:	f000 faf1 	bl	8006798 <_vfiprintf_r>
 80061b6:	b003      	add	sp, #12
 80061b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80061bc:	b004      	add	sp, #16
 80061be:	4770      	bx	lr
 80061c0:	20000038 	.word	0x20000038

080061c4 <putchar>:
 80061c4:	4b02      	ldr	r3, [pc, #8]	@ (80061d0 <putchar+0xc>)
 80061c6:	4601      	mov	r1, r0
 80061c8:	6818      	ldr	r0, [r3, #0]
 80061ca:	6882      	ldr	r2, [r0, #8]
 80061cc:	f000 bdec 	b.w	8006da8 <_putc_r>
 80061d0:	20000038 	.word	0x20000038

080061d4 <_puts_r>:
 80061d4:	6a03      	ldr	r3, [r0, #32]
 80061d6:	b570      	push	{r4, r5, r6, lr}
 80061d8:	6884      	ldr	r4, [r0, #8]
 80061da:	4605      	mov	r5, r0
 80061dc:	460e      	mov	r6, r1
 80061de:	b90b      	cbnz	r3, 80061e4 <_puts_r+0x10>
 80061e0:	f7ff ffa8 	bl	8006134 <__sinit>
 80061e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80061e6:	07db      	lsls	r3, r3, #31
 80061e8:	d405      	bmi.n	80061f6 <_puts_r+0x22>
 80061ea:	89a3      	ldrh	r3, [r4, #12]
 80061ec:	0598      	lsls	r0, r3, #22
 80061ee:	d402      	bmi.n	80061f6 <_puts_r+0x22>
 80061f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061f2:	f000 f99e 	bl	8006532 <__retarget_lock_acquire_recursive>
 80061f6:	89a3      	ldrh	r3, [r4, #12]
 80061f8:	0719      	lsls	r1, r3, #28
 80061fa:	d502      	bpl.n	8006202 <_puts_r+0x2e>
 80061fc:	6923      	ldr	r3, [r4, #16]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d135      	bne.n	800626e <_puts_r+0x9a>
 8006202:	4621      	mov	r1, r4
 8006204:	4628      	mov	r0, r5
 8006206:	f000 f8c5 	bl	8006394 <__swsetup_r>
 800620a:	b380      	cbz	r0, 800626e <_puts_r+0x9a>
 800620c:	f04f 35ff 	mov.w	r5, #4294967295
 8006210:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006212:	07da      	lsls	r2, r3, #31
 8006214:	d405      	bmi.n	8006222 <_puts_r+0x4e>
 8006216:	89a3      	ldrh	r3, [r4, #12]
 8006218:	059b      	lsls	r3, r3, #22
 800621a:	d402      	bmi.n	8006222 <_puts_r+0x4e>
 800621c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800621e:	f000 f989 	bl	8006534 <__retarget_lock_release_recursive>
 8006222:	4628      	mov	r0, r5
 8006224:	bd70      	pop	{r4, r5, r6, pc}
 8006226:	2b00      	cmp	r3, #0
 8006228:	da04      	bge.n	8006234 <_puts_r+0x60>
 800622a:	69a2      	ldr	r2, [r4, #24]
 800622c:	429a      	cmp	r2, r3
 800622e:	dc17      	bgt.n	8006260 <_puts_r+0x8c>
 8006230:	290a      	cmp	r1, #10
 8006232:	d015      	beq.n	8006260 <_puts_r+0x8c>
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	1c5a      	adds	r2, r3, #1
 8006238:	6022      	str	r2, [r4, #0]
 800623a:	7019      	strb	r1, [r3, #0]
 800623c:	68a3      	ldr	r3, [r4, #8]
 800623e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006242:	3b01      	subs	r3, #1
 8006244:	60a3      	str	r3, [r4, #8]
 8006246:	2900      	cmp	r1, #0
 8006248:	d1ed      	bne.n	8006226 <_puts_r+0x52>
 800624a:	2b00      	cmp	r3, #0
 800624c:	da11      	bge.n	8006272 <_puts_r+0x9e>
 800624e:	4622      	mov	r2, r4
 8006250:	210a      	movs	r1, #10
 8006252:	4628      	mov	r0, r5
 8006254:	f000 f85f 	bl	8006316 <__swbuf_r>
 8006258:	3001      	adds	r0, #1
 800625a:	d0d7      	beq.n	800620c <_puts_r+0x38>
 800625c:	250a      	movs	r5, #10
 800625e:	e7d7      	b.n	8006210 <_puts_r+0x3c>
 8006260:	4622      	mov	r2, r4
 8006262:	4628      	mov	r0, r5
 8006264:	f000 f857 	bl	8006316 <__swbuf_r>
 8006268:	3001      	adds	r0, #1
 800626a:	d1e7      	bne.n	800623c <_puts_r+0x68>
 800626c:	e7ce      	b.n	800620c <_puts_r+0x38>
 800626e:	3e01      	subs	r6, #1
 8006270:	e7e4      	b.n	800623c <_puts_r+0x68>
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	1c5a      	adds	r2, r3, #1
 8006276:	6022      	str	r2, [r4, #0]
 8006278:	220a      	movs	r2, #10
 800627a:	701a      	strb	r2, [r3, #0]
 800627c:	e7ee      	b.n	800625c <_puts_r+0x88>
	...

08006280 <puts>:
 8006280:	4b02      	ldr	r3, [pc, #8]	@ (800628c <puts+0xc>)
 8006282:	4601      	mov	r1, r0
 8006284:	6818      	ldr	r0, [r3, #0]
 8006286:	f7ff bfa5 	b.w	80061d4 <_puts_r>
 800628a:	bf00      	nop
 800628c:	20000038 	.word	0x20000038

08006290 <__sread>:
 8006290:	b510      	push	{r4, lr}
 8006292:	460c      	mov	r4, r1
 8006294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006298:	f000 f8fc 	bl	8006494 <_read_r>
 800629c:	2800      	cmp	r0, #0
 800629e:	bfab      	itete	ge
 80062a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80062a2:	89a3      	ldrhlt	r3, [r4, #12]
 80062a4:	181b      	addge	r3, r3, r0
 80062a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80062aa:	bfac      	ite	ge
 80062ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80062ae:	81a3      	strhlt	r3, [r4, #12]
 80062b0:	bd10      	pop	{r4, pc}

080062b2 <__swrite>:
 80062b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b6:	461f      	mov	r7, r3
 80062b8:	898b      	ldrh	r3, [r1, #12]
 80062ba:	05db      	lsls	r3, r3, #23
 80062bc:	4605      	mov	r5, r0
 80062be:	460c      	mov	r4, r1
 80062c0:	4616      	mov	r6, r2
 80062c2:	d505      	bpl.n	80062d0 <__swrite+0x1e>
 80062c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062c8:	2302      	movs	r3, #2
 80062ca:	2200      	movs	r2, #0
 80062cc:	f000 f8d0 	bl	8006470 <_lseek_r>
 80062d0:	89a3      	ldrh	r3, [r4, #12]
 80062d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062da:	81a3      	strh	r3, [r4, #12]
 80062dc:	4632      	mov	r2, r6
 80062de:	463b      	mov	r3, r7
 80062e0:	4628      	mov	r0, r5
 80062e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062e6:	f000 b8e7 	b.w	80064b8 <_write_r>

080062ea <__sseek>:
 80062ea:	b510      	push	{r4, lr}
 80062ec:	460c      	mov	r4, r1
 80062ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062f2:	f000 f8bd 	bl	8006470 <_lseek_r>
 80062f6:	1c43      	adds	r3, r0, #1
 80062f8:	89a3      	ldrh	r3, [r4, #12]
 80062fa:	bf15      	itete	ne
 80062fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80062fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006302:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006306:	81a3      	strheq	r3, [r4, #12]
 8006308:	bf18      	it	ne
 800630a:	81a3      	strhne	r3, [r4, #12]
 800630c:	bd10      	pop	{r4, pc}

0800630e <__sclose>:
 800630e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006312:	f000 b89d 	b.w	8006450 <_close_r>

08006316 <__swbuf_r>:
 8006316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006318:	460e      	mov	r6, r1
 800631a:	4614      	mov	r4, r2
 800631c:	4605      	mov	r5, r0
 800631e:	b118      	cbz	r0, 8006328 <__swbuf_r+0x12>
 8006320:	6a03      	ldr	r3, [r0, #32]
 8006322:	b90b      	cbnz	r3, 8006328 <__swbuf_r+0x12>
 8006324:	f7ff ff06 	bl	8006134 <__sinit>
 8006328:	69a3      	ldr	r3, [r4, #24]
 800632a:	60a3      	str	r3, [r4, #8]
 800632c:	89a3      	ldrh	r3, [r4, #12]
 800632e:	071a      	lsls	r2, r3, #28
 8006330:	d501      	bpl.n	8006336 <__swbuf_r+0x20>
 8006332:	6923      	ldr	r3, [r4, #16]
 8006334:	b943      	cbnz	r3, 8006348 <__swbuf_r+0x32>
 8006336:	4621      	mov	r1, r4
 8006338:	4628      	mov	r0, r5
 800633a:	f000 f82b 	bl	8006394 <__swsetup_r>
 800633e:	b118      	cbz	r0, 8006348 <__swbuf_r+0x32>
 8006340:	f04f 37ff 	mov.w	r7, #4294967295
 8006344:	4638      	mov	r0, r7
 8006346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	6922      	ldr	r2, [r4, #16]
 800634c:	1a98      	subs	r0, r3, r2
 800634e:	6963      	ldr	r3, [r4, #20]
 8006350:	b2f6      	uxtb	r6, r6
 8006352:	4283      	cmp	r3, r0
 8006354:	4637      	mov	r7, r6
 8006356:	dc05      	bgt.n	8006364 <__swbuf_r+0x4e>
 8006358:	4621      	mov	r1, r4
 800635a:	4628      	mov	r0, r5
 800635c:	f7ff fe22 	bl	8005fa4 <_fflush_r>
 8006360:	2800      	cmp	r0, #0
 8006362:	d1ed      	bne.n	8006340 <__swbuf_r+0x2a>
 8006364:	68a3      	ldr	r3, [r4, #8]
 8006366:	3b01      	subs	r3, #1
 8006368:	60a3      	str	r3, [r4, #8]
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	6022      	str	r2, [r4, #0]
 8006370:	701e      	strb	r6, [r3, #0]
 8006372:	6962      	ldr	r2, [r4, #20]
 8006374:	1c43      	adds	r3, r0, #1
 8006376:	429a      	cmp	r2, r3
 8006378:	d004      	beq.n	8006384 <__swbuf_r+0x6e>
 800637a:	89a3      	ldrh	r3, [r4, #12]
 800637c:	07db      	lsls	r3, r3, #31
 800637e:	d5e1      	bpl.n	8006344 <__swbuf_r+0x2e>
 8006380:	2e0a      	cmp	r6, #10
 8006382:	d1df      	bne.n	8006344 <__swbuf_r+0x2e>
 8006384:	4621      	mov	r1, r4
 8006386:	4628      	mov	r0, r5
 8006388:	f7ff fe0c 	bl	8005fa4 <_fflush_r>
 800638c:	2800      	cmp	r0, #0
 800638e:	d0d9      	beq.n	8006344 <__swbuf_r+0x2e>
 8006390:	e7d6      	b.n	8006340 <__swbuf_r+0x2a>
	...

08006394 <__swsetup_r>:
 8006394:	b538      	push	{r3, r4, r5, lr}
 8006396:	4b29      	ldr	r3, [pc, #164]	@ (800643c <__swsetup_r+0xa8>)
 8006398:	4605      	mov	r5, r0
 800639a:	6818      	ldr	r0, [r3, #0]
 800639c:	460c      	mov	r4, r1
 800639e:	b118      	cbz	r0, 80063a8 <__swsetup_r+0x14>
 80063a0:	6a03      	ldr	r3, [r0, #32]
 80063a2:	b90b      	cbnz	r3, 80063a8 <__swsetup_r+0x14>
 80063a4:	f7ff fec6 	bl	8006134 <__sinit>
 80063a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ac:	0719      	lsls	r1, r3, #28
 80063ae:	d422      	bmi.n	80063f6 <__swsetup_r+0x62>
 80063b0:	06da      	lsls	r2, r3, #27
 80063b2:	d407      	bmi.n	80063c4 <__swsetup_r+0x30>
 80063b4:	2209      	movs	r2, #9
 80063b6:	602a      	str	r2, [r5, #0]
 80063b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063bc:	81a3      	strh	r3, [r4, #12]
 80063be:	f04f 30ff 	mov.w	r0, #4294967295
 80063c2:	e033      	b.n	800642c <__swsetup_r+0x98>
 80063c4:	0758      	lsls	r0, r3, #29
 80063c6:	d512      	bpl.n	80063ee <__swsetup_r+0x5a>
 80063c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80063ca:	b141      	cbz	r1, 80063de <__swsetup_r+0x4a>
 80063cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80063d0:	4299      	cmp	r1, r3
 80063d2:	d002      	beq.n	80063da <__swsetup_r+0x46>
 80063d4:	4628      	mov	r0, r5
 80063d6:	f000 f8bd 	bl	8006554 <_free_r>
 80063da:	2300      	movs	r3, #0
 80063dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80063de:	89a3      	ldrh	r3, [r4, #12]
 80063e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80063e4:	81a3      	strh	r3, [r4, #12]
 80063e6:	2300      	movs	r3, #0
 80063e8:	6063      	str	r3, [r4, #4]
 80063ea:	6923      	ldr	r3, [r4, #16]
 80063ec:	6023      	str	r3, [r4, #0]
 80063ee:	89a3      	ldrh	r3, [r4, #12]
 80063f0:	f043 0308 	orr.w	r3, r3, #8
 80063f4:	81a3      	strh	r3, [r4, #12]
 80063f6:	6923      	ldr	r3, [r4, #16]
 80063f8:	b94b      	cbnz	r3, 800640e <__swsetup_r+0x7a>
 80063fa:	89a3      	ldrh	r3, [r4, #12]
 80063fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006404:	d003      	beq.n	800640e <__swsetup_r+0x7a>
 8006406:	4621      	mov	r1, r4
 8006408:	4628      	mov	r0, r5
 800640a:	f000 fc91 	bl	8006d30 <__smakebuf_r>
 800640e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006412:	f013 0201 	ands.w	r2, r3, #1
 8006416:	d00a      	beq.n	800642e <__swsetup_r+0x9a>
 8006418:	2200      	movs	r2, #0
 800641a:	60a2      	str	r2, [r4, #8]
 800641c:	6962      	ldr	r2, [r4, #20]
 800641e:	4252      	negs	r2, r2
 8006420:	61a2      	str	r2, [r4, #24]
 8006422:	6922      	ldr	r2, [r4, #16]
 8006424:	b942      	cbnz	r2, 8006438 <__swsetup_r+0xa4>
 8006426:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800642a:	d1c5      	bne.n	80063b8 <__swsetup_r+0x24>
 800642c:	bd38      	pop	{r3, r4, r5, pc}
 800642e:	0799      	lsls	r1, r3, #30
 8006430:	bf58      	it	pl
 8006432:	6962      	ldrpl	r2, [r4, #20]
 8006434:	60a2      	str	r2, [r4, #8]
 8006436:	e7f4      	b.n	8006422 <__swsetup_r+0x8e>
 8006438:	2000      	movs	r0, #0
 800643a:	e7f7      	b.n	800642c <__swsetup_r+0x98>
 800643c:	20000038 	.word	0x20000038

08006440 <memset>:
 8006440:	4402      	add	r2, r0
 8006442:	4603      	mov	r3, r0
 8006444:	4293      	cmp	r3, r2
 8006446:	d100      	bne.n	800644a <memset+0xa>
 8006448:	4770      	bx	lr
 800644a:	f803 1b01 	strb.w	r1, [r3], #1
 800644e:	e7f9      	b.n	8006444 <memset+0x4>

08006450 <_close_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	4d06      	ldr	r5, [pc, #24]	@ (800646c <_close_r+0x1c>)
 8006454:	2300      	movs	r3, #0
 8006456:	4604      	mov	r4, r0
 8006458:	4608      	mov	r0, r1
 800645a:	602b      	str	r3, [r5, #0]
 800645c:	f7fc f825 	bl	80024aa <_close>
 8006460:	1c43      	adds	r3, r0, #1
 8006462:	d102      	bne.n	800646a <_close_r+0x1a>
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	b103      	cbz	r3, 800646a <_close_r+0x1a>
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	bd38      	pop	{r3, r4, r5, pc}
 800646c:	200006e8 	.word	0x200006e8

08006470 <_lseek_r>:
 8006470:	b538      	push	{r3, r4, r5, lr}
 8006472:	4d07      	ldr	r5, [pc, #28]	@ (8006490 <_lseek_r+0x20>)
 8006474:	4604      	mov	r4, r0
 8006476:	4608      	mov	r0, r1
 8006478:	4611      	mov	r1, r2
 800647a:	2200      	movs	r2, #0
 800647c:	602a      	str	r2, [r5, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	f7fc f83a 	bl	80024f8 <_lseek>
 8006484:	1c43      	adds	r3, r0, #1
 8006486:	d102      	bne.n	800648e <_lseek_r+0x1e>
 8006488:	682b      	ldr	r3, [r5, #0]
 800648a:	b103      	cbz	r3, 800648e <_lseek_r+0x1e>
 800648c:	6023      	str	r3, [r4, #0]
 800648e:	bd38      	pop	{r3, r4, r5, pc}
 8006490:	200006e8 	.word	0x200006e8

08006494 <_read_r>:
 8006494:	b538      	push	{r3, r4, r5, lr}
 8006496:	4d07      	ldr	r5, [pc, #28]	@ (80064b4 <_read_r+0x20>)
 8006498:	4604      	mov	r4, r0
 800649a:	4608      	mov	r0, r1
 800649c:	4611      	mov	r1, r2
 800649e:	2200      	movs	r2, #0
 80064a0:	602a      	str	r2, [r5, #0]
 80064a2:	461a      	mov	r2, r3
 80064a4:	f7fb ffc8 	bl	8002438 <_read>
 80064a8:	1c43      	adds	r3, r0, #1
 80064aa:	d102      	bne.n	80064b2 <_read_r+0x1e>
 80064ac:	682b      	ldr	r3, [r5, #0]
 80064ae:	b103      	cbz	r3, 80064b2 <_read_r+0x1e>
 80064b0:	6023      	str	r3, [r4, #0]
 80064b2:	bd38      	pop	{r3, r4, r5, pc}
 80064b4:	200006e8 	.word	0x200006e8

080064b8 <_write_r>:
 80064b8:	b538      	push	{r3, r4, r5, lr}
 80064ba:	4d07      	ldr	r5, [pc, #28]	@ (80064d8 <_write_r+0x20>)
 80064bc:	4604      	mov	r4, r0
 80064be:	4608      	mov	r0, r1
 80064c0:	4611      	mov	r1, r2
 80064c2:	2200      	movs	r2, #0
 80064c4:	602a      	str	r2, [r5, #0]
 80064c6:	461a      	mov	r2, r3
 80064c8:	f7fb ffd3 	bl	8002472 <_write>
 80064cc:	1c43      	adds	r3, r0, #1
 80064ce:	d102      	bne.n	80064d6 <_write_r+0x1e>
 80064d0:	682b      	ldr	r3, [r5, #0]
 80064d2:	b103      	cbz	r3, 80064d6 <_write_r+0x1e>
 80064d4:	6023      	str	r3, [r4, #0]
 80064d6:	bd38      	pop	{r3, r4, r5, pc}
 80064d8:	200006e8 	.word	0x200006e8

080064dc <__errno>:
 80064dc:	4b01      	ldr	r3, [pc, #4]	@ (80064e4 <__errno+0x8>)
 80064de:	6818      	ldr	r0, [r3, #0]
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	20000038 	.word	0x20000038

080064e8 <__libc_init_array>:
 80064e8:	b570      	push	{r4, r5, r6, lr}
 80064ea:	4d0d      	ldr	r5, [pc, #52]	@ (8006520 <__libc_init_array+0x38>)
 80064ec:	4c0d      	ldr	r4, [pc, #52]	@ (8006524 <__libc_init_array+0x3c>)
 80064ee:	1b64      	subs	r4, r4, r5
 80064f0:	10a4      	asrs	r4, r4, #2
 80064f2:	2600      	movs	r6, #0
 80064f4:	42a6      	cmp	r6, r4
 80064f6:	d109      	bne.n	800650c <__libc_init_array+0x24>
 80064f8:	4d0b      	ldr	r5, [pc, #44]	@ (8006528 <__libc_init_array+0x40>)
 80064fa:	4c0c      	ldr	r4, [pc, #48]	@ (800652c <__libc_init_array+0x44>)
 80064fc:	f000 fcba 	bl	8006e74 <_init>
 8006500:	1b64      	subs	r4, r4, r5
 8006502:	10a4      	asrs	r4, r4, #2
 8006504:	2600      	movs	r6, #0
 8006506:	42a6      	cmp	r6, r4
 8006508:	d105      	bne.n	8006516 <__libc_init_array+0x2e>
 800650a:	bd70      	pop	{r4, r5, r6, pc}
 800650c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006510:	4798      	blx	r3
 8006512:	3601      	adds	r6, #1
 8006514:	e7ee      	b.n	80064f4 <__libc_init_array+0xc>
 8006516:	f855 3b04 	ldr.w	r3, [r5], #4
 800651a:	4798      	blx	r3
 800651c:	3601      	adds	r6, #1
 800651e:	e7f2      	b.n	8006506 <__libc_init_array+0x1e>
 8006520:	080070e8 	.word	0x080070e8
 8006524:	080070e8 	.word	0x080070e8
 8006528:	080070e8 	.word	0x080070e8
 800652c:	080070ec 	.word	0x080070ec

08006530 <__retarget_lock_init_recursive>:
 8006530:	4770      	bx	lr

08006532 <__retarget_lock_acquire_recursive>:
 8006532:	4770      	bx	lr

08006534 <__retarget_lock_release_recursive>:
 8006534:	4770      	bx	lr

08006536 <memcpy>:
 8006536:	440a      	add	r2, r1
 8006538:	4291      	cmp	r1, r2
 800653a:	f100 33ff 	add.w	r3, r0, #4294967295
 800653e:	d100      	bne.n	8006542 <memcpy+0xc>
 8006540:	4770      	bx	lr
 8006542:	b510      	push	{r4, lr}
 8006544:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006548:	f803 4f01 	strb.w	r4, [r3, #1]!
 800654c:	4291      	cmp	r1, r2
 800654e:	d1f9      	bne.n	8006544 <memcpy+0xe>
 8006550:	bd10      	pop	{r4, pc}
	...

08006554 <_free_r>:
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	4605      	mov	r5, r0
 8006558:	2900      	cmp	r1, #0
 800655a:	d041      	beq.n	80065e0 <_free_r+0x8c>
 800655c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006560:	1f0c      	subs	r4, r1, #4
 8006562:	2b00      	cmp	r3, #0
 8006564:	bfb8      	it	lt
 8006566:	18e4      	addlt	r4, r4, r3
 8006568:	f000 f8e0 	bl	800672c <__malloc_lock>
 800656c:	4a1d      	ldr	r2, [pc, #116]	@ (80065e4 <_free_r+0x90>)
 800656e:	6813      	ldr	r3, [r2, #0]
 8006570:	b933      	cbnz	r3, 8006580 <_free_r+0x2c>
 8006572:	6063      	str	r3, [r4, #4]
 8006574:	6014      	str	r4, [r2, #0]
 8006576:	4628      	mov	r0, r5
 8006578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800657c:	f000 b8dc 	b.w	8006738 <__malloc_unlock>
 8006580:	42a3      	cmp	r3, r4
 8006582:	d908      	bls.n	8006596 <_free_r+0x42>
 8006584:	6820      	ldr	r0, [r4, #0]
 8006586:	1821      	adds	r1, r4, r0
 8006588:	428b      	cmp	r3, r1
 800658a:	bf01      	itttt	eq
 800658c:	6819      	ldreq	r1, [r3, #0]
 800658e:	685b      	ldreq	r3, [r3, #4]
 8006590:	1809      	addeq	r1, r1, r0
 8006592:	6021      	streq	r1, [r4, #0]
 8006594:	e7ed      	b.n	8006572 <_free_r+0x1e>
 8006596:	461a      	mov	r2, r3
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	b10b      	cbz	r3, 80065a0 <_free_r+0x4c>
 800659c:	42a3      	cmp	r3, r4
 800659e:	d9fa      	bls.n	8006596 <_free_r+0x42>
 80065a0:	6811      	ldr	r1, [r2, #0]
 80065a2:	1850      	adds	r0, r2, r1
 80065a4:	42a0      	cmp	r0, r4
 80065a6:	d10b      	bne.n	80065c0 <_free_r+0x6c>
 80065a8:	6820      	ldr	r0, [r4, #0]
 80065aa:	4401      	add	r1, r0
 80065ac:	1850      	adds	r0, r2, r1
 80065ae:	4283      	cmp	r3, r0
 80065b0:	6011      	str	r1, [r2, #0]
 80065b2:	d1e0      	bne.n	8006576 <_free_r+0x22>
 80065b4:	6818      	ldr	r0, [r3, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	6053      	str	r3, [r2, #4]
 80065ba:	4408      	add	r0, r1
 80065bc:	6010      	str	r0, [r2, #0]
 80065be:	e7da      	b.n	8006576 <_free_r+0x22>
 80065c0:	d902      	bls.n	80065c8 <_free_r+0x74>
 80065c2:	230c      	movs	r3, #12
 80065c4:	602b      	str	r3, [r5, #0]
 80065c6:	e7d6      	b.n	8006576 <_free_r+0x22>
 80065c8:	6820      	ldr	r0, [r4, #0]
 80065ca:	1821      	adds	r1, r4, r0
 80065cc:	428b      	cmp	r3, r1
 80065ce:	bf04      	itt	eq
 80065d0:	6819      	ldreq	r1, [r3, #0]
 80065d2:	685b      	ldreq	r3, [r3, #4]
 80065d4:	6063      	str	r3, [r4, #4]
 80065d6:	bf04      	itt	eq
 80065d8:	1809      	addeq	r1, r1, r0
 80065da:	6021      	streq	r1, [r4, #0]
 80065dc:	6054      	str	r4, [r2, #4]
 80065de:	e7ca      	b.n	8006576 <_free_r+0x22>
 80065e0:	bd38      	pop	{r3, r4, r5, pc}
 80065e2:	bf00      	nop
 80065e4:	200006f4 	.word	0x200006f4

080065e8 <sbrk_aligned>:
 80065e8:	b570      	push	{r4, r5, r6, lr}
 80065ea:	4e0f      	ldr	r6, [pc, #60]	@ (8006628 <sbrk_aligned+0x40>)
 80065ec:	460c      	mov	r4, r1
 80065ee:	6831      	ldr	r1, [r6, #0]
 80065f0:	4605      	mov	r5, r0
 80065f2:	b911      	cbnz	r1, 80065fa <sbrk_aligned+0x12>
 80065f4:	f000 fc2e 	bl	8006e54 <_sbrk_r>
 80065f8:	6030      	str	r0, [r6, #0]
 80065fa:	4621      	mov	r1, r4
 80065fc:	4628      	mov	r0, r5
 80065fe:	f000 fc29 	bl	8006e54 <_sbrk_r>
 8006602:	1c43      	adds	r3, r0, #1
 8006604:	d103      	bne.n	800660e <sbrk_aligned+0x26>
 8006606:	f04f 34ff 	mov.w	r4, #4294967295
 800660a:	4620      	mov	r0, r4
 800660c:	bd70      	pop	{r4, r5, r6, pc}
 800660e:	1cc4      	adds	r4, r0, #3
 8006610:	f024 0403 	bic.w	r4, r4, #3
 8006614:	42a0      	cmp	r0, r4
 8006616:	d0f8      	beq.n	800660a <sbrk_aligned+0x22>
 8006618:	1a21      	subs	r1, r4, r0
 800661a:	4628      	mov	r0, r5
 800661c:	f000 fc1a 	bl	8006e54 <_sbrk_r>
 8006620:	3001      	adds	r0, #1
 8006622:	d1f2      	bne.n	800660a <sbrk_aligned+0x22>
 8006624:	e7ef      	b.n	8006606 <sbrk_aligned+0x1e>
 8006626:	bf00      	nop
 8006628:	200006f0 	.word	0x200006f0

0800662c <_malloc_r>:
 800662c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006630:	1ccd      	adds	r5, r1, #3
 8006632:	f025 0503 	bic.w	r5, r5, #3
 8006636:	3508      	adds	r5, #8
 8006638:	2d0c      	cmp	r5, #12
 800663a:	bf38      	it	cc
 800663c:	250c      	movcc	r5, #12
 800663e:	2d00      	cmp	r5, #0
 8006640:	4606      	mov	r6, r0
 8006642:	db01      	blt.n	8006648 <_malloc_r+0x1c>
 8006644:	42a9      	cmp	r1, r5
 8006646:	d904      	bls.n	8006652 <_malloc_r+0x26>
 8006648:	230c      	movs	r3, #12
 800664a:	6033      	str	r3, [r6, #0]
 800664c:	2000      	movs	r0, #0
 800664e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006652:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006728 <_malloc_r+0xfc>
 8006656:	f000 f869 	bl	800672c <__malloc_lock>
 800665a:	f8d8 3000 	ldr.w	r3, [r8]
 800665e:	461c      	mov	r4, r3
 8006660:	bb44      	cbnz	r4, 80066b4 <_malloc_r+0x88>
 8006662:	4629      	mov	r1, r5
 8006664:	4630      	mov	r0, r6
 8006666:	f7ff ffbf 	bl	80065e8 <sbrk_aligned>
 800666a:	1c43      	adds	r3, r0, #1
 800666c:	4604      	mov	r4, r0
 800666e:	d158      	bne.n	8006722 <_malloc_r+0xf6>
 8006670:	f8d8 4000 	ldr.w	r4, [r8]
 8006674:	4627      	mov	r7, r4
 8006676:	2f00      	cmp	r7, #0
 8006678:	d143      	bne.n	8006702 <_malloc_r+0xd6>
 800667a:	2c00      	cmp	r4, #0
 800667c:	d04b      	beq.n	8006716 <_malloc_r+0xea>
 800667e:	6823      	ldr	r3, [r4, #0]
 8006680:	4639      	mov	r1, r7
 8006682:	4630      	mov	r0, r6
 8006684:	eb04 0903 	add.w	r9, r4, r3
 8006688:	f000 fbe4 	bl	8006e54 <_sbrk_r>
 800668c:	4581      	cmp	r9, r0
 800668e:	d142      	bne.n	8006716 <_malloc_r+0xea>
 8006690:	6821      	ldr	r1, [r4, #0]
 8006692:	1a6d      	subs	r5, r5, r1
 8006694:	4629      	mov	r1, r5
 8006696:	4630      	mov	r0, r6
 8006698:	f7ff ffa6 	bl	80065e8 <sbrk_aligned>
 800669c:	3001      	adds	r0, #1
 800669e:	d03a      	beq.n	8006716 <_malloc_r+0xea>
 80066a0:	6823      	ldr	r3, [r4, #0]
 80066a2:	442b      	add	r3, r5
 80066a4:	6023      	str	r3, [r4, #0]
 80066a6:	f8d8 3000 	ldr.w	r3, [r8]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	bb62      	cbnz	r2, 8006708 <_malloc_r+0xdc>
 80066ae:	f8c8 7000 	str.w	r7, [r8]
 80066b2:	e00f      	b.n	80066d4 <_malloc_r+0xa8>
 80066b4:	6822      	ldr	r2, [r4, #0]
 80066b6:	1b52      	subs	r2, r2, r5
 80066b8:	d420      	bmi.n	80066fc <_malloc_r+0xd0>
 80066ba:	2a0b      	cmp	r2, #11
 80066bc:	d917      	bls.n	80066ee <_malloc_r+0xc2>
 80066be:	1961      	adds	r1, r4, r5
 80066c0:	42a3      	cmp	r3, r4
 80066c2:	6025      	str	r5, [r4, #0]
 80066c4:	bf18      	it	ne
 80066c6:	6059      	strne	r1, [r3, #4]
 80066c8:	6863      	ldr	r3, [r4, #4]
 80066ca:	bf08      	it	eq
 80066cc:	f8c8 1000 	streq.w	r1, [r8]
 80066d0:	5162      	str	r2, [r4, r5]
 80066d2:	604b      	str	r3, [r1, #4]
 80066d4:	4630      	mov	r0, r6
 80066d6:	f000 f82f 	bl	8006738 <__malloc_unlock>
 80066da:	f104 000b 	add.w	r0, r4, #11
 80066de:	1d23      	adds	r3, r4, #4
 80066e0:	f020 0007 	bic.w	r0, r0, #7
 80066e4:	1ac2      	subs	r2, r0, r3
 80066e6:	bf1c      	itt	ne
 80066e8:	1a1b      	subne	r3, r3, r0
 80066ea:	50a3      	strne	r3, [r4, r2]
 80066ec:	e7af      	b.n	800664e <_malloc_r+0x22>
 80066ee:	6862      	ldr	r2, [r4, #4]
 80066f0:	42a3      	cmp	r3, r4
 80066f2:	bf0c      	ite	eq
 80066f4:	f8c8 2000 	streq.w	r2, [r8]
 80066f8:	605a      	strne	r2, [r3, #4]
 80066fa:	e7eb      	b.n	80066d4 <_malloc_r+0xa8>
 80066fc:	4623      	mov	r3, r4
 80066fe:	6864      	ldr	r4, [r4, #4]
 8006700:	e7ae      	b.n	8006660 <_malloc_r+0x34>
 8006702:	463c      	mov	r4, r7
 8006704:	687f      	ldr	r7, [r7, #4]
 8006706:	e7b6      	b.n	8006676 <_malloc_r+0x4a>
 8006708:	461a      	mov	r2, r3
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	42a3      	cmp	r3, r4
 800670e:	d1fb      	bne.n	8006708 <_malloc_r+0xdc>
 8006710:	2300      	movs	r3, #0
 8006712:	6053      	str	r3, [r2, #4]
 8006714:	e7de      	b.n	80066d4 <_malloc_r+0xa8>
 8006716:	230c      	movs	r3, #12
 8006718:	6033      	str	r3, [r6, #0]
 800671a:	4630      	mov	r0, r6
 800671c:	f000 f80c 	bl	8006738 <__malloc_unlock>
 8006720:	e794      	b.n	800664c <_malloc_r+0x20>
 8006722:	6005      	str	r5, [r0, #0]
 8006724:	e7d6      	b.n	80066d4 <_malloc_r+0xa8>
 8006726:	bf00      	nop
 8006728:	200006f4 	.word	0x200006f4

0800672c <__malloc_lock>:
 800672c:	4801      	ldr	r0, [pc, #4]	@ (8006734 <__malloc_lock+0x8>)
 800672e:	f7ff bf00 	b.w	8006532 <__retarget_lock_acquire_recursive>
 8006732:	bf00      	nop
 8006734:	200006ec 	.word	0x200006ec

08006738 <__malloc_unlock>:
 8006738:	4801      	ldr	r0, [pc, #4]	@ (8006740 <__malloc_unlock+0x8>)
 800673a:	f7ff befb 	b.w	8006534 <__retarget_lock_release_recursive>
 800673e:	bf00      	nop
 8006740:	200006ec 	.word	0x200006ec

08006744 <__sfputc_r>:
 8006744:	6893      	ldr	r3, [r2, #8]
 8006746:	3b01      	subs	r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	b410      	push	{r4}
 800674c:	6093      	str	r3, [r2, #8]
 800674e:	da08      	bge.n	8006762 <__sfputc_r+0x1e>
 8006750:	6994      	ldr	r4, [r2, #24]
 8006752:	42a3      	cmp	r3, r4
 8006754:	db01      	blt.n	800675a <__sfputc_r+0x16>
 8006756:	290a      	cmp	r1, #10
 8006758:	d103      	bne.n	8006762 <__sfputc_r+0x1e>
 800675a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800675e:	f7ff bdda 	b.w	8006316 <__swbuf_r>
 8006762:	6813      	ldr	r3, [r2, #0]
 8006764:	1c58      	adds	r0, r3, #1
 8006766:	6010      	str	r0, [r2, #0]
 8006768:	7019      	strb	r1, [r3, #0]
 800676a:	4608      	mov	r0, r1
 800676c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006770:	4770      	bx	lr

08006772 <__sfputs_r>:
 8006772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006774:	4606      	mov	r6, r0
 8006776:	460f      	mov	r7, r1
 8006778:	4614      	mov	r4, r2
 800677a:	18d5      	adds	r5, r2, r3
 800677c:	42ac      	cmp	r4, r5
 800677e:	d101      	bne.n	8006784 <__sfputs_r+0x12>
 8006780:	2000      	movs	r0, #0
 8006782:	e007      	b.n	8006794 <__sfputs_r+0x22>
 8006784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006788:	463a      	mov	r2, r7
 800678a:	4630      	mov	r0, r6
 800678c:	f7ff ffda 	bl	8006744 <__sfputc_r>
 8006790:	1c43      	adds	r3, r0, #1
 8006792:	d1f3      	bne.n	800677c <__sfputs_r+0xa>
 8006794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006798 <_vfiprintf_r>:
 8006798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800679c:	460d      	mov	r5, r1
 800679e:	b09d      	sub	sp, #116	@ 0x74
 80067a0:	4614      	mov	r4, r2
 80067a2:	4698      	mov	r8, r3
 80067a4:	4606      	mov	r6, r0
 80067a6:	b118      	cbz	r0, 80067b0 <_vfiprintf_r+0x18>
 80067a8:	6a03      	ldr	r3, [r0, #32]
 80067aa:	b90b      	cbnz	r3, 80067b0 <_vfiprintf_r+0x18>
 80067ac:	f7ff fcc2 	bl	8006134 <__sinit>
 80067b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067b2:	07d9      	lsls	r1, r3, #31
 80067b4:	d405      	bmi.n	80067c2 <_vfiprintf_r+0x2a>
 80067b6:	89ab      	ldrh	r3, [r5, #12]
 80067b8:	059a      	lsls	r2, r3, #22
 80067ba:	d402      	bmi.n	80067c2 <_vfiprintf_r+0x2a>
 80067bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067be:	f7ff feb8 	bl	8006532 <__retarget_lock_acquire_recursive>
 80067c2:	89ab      	ldrh	r3, [r5, #12]
 80067c4:	071b      	lsls	r3, r3, #28
 80067c6:	d501      	bpl.n	80067cc <_vfiprintf_r+0x34>
 80067c8:	692b      	ldr	r3, [r5, #16]
 80067ca:	b99b      	cbnz	r3, 80067f4 <_vfiprintf_r+0x5c>
 80067cc:	4629      	mov	r1, r5
 80067ce:	4630      	mov	r0, r6
 80067d0:	f7ff fde0 	bl	8006394 <__swsetup_r>
 80067d4:	b170      	cbz	r0, 80067f4 <_vfiprintf_r+0x5c>
 80067d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067d8:	07dc      	lsls	r4, r3, #31
 80067da:	d504      	bpl.n	80067e6 <_vfiprintf_r+0x4e>
 80067dc:	f04f 30ff 	mov.w	r0, #4294967295
 80067e0:	b01d      	add	sp, #116	@ 0x74
 80067e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e6:	89ab      	ldrh	r3, [r5, #12]
 80067e8:	0598      	lsls	r0, r3, #22
 80067ea:	d4f7      	bmi.n	80067dc <_vfiprintf_r+0x44>
 80067ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067ee:	f7ff fea1 	bl	8006534 <__retarget_lock_release_recursive>
 80067f2:	e7f3      	b.n	80067dc <_vfiprintf_r+0x44>
 80067f4:	2300      	movs	r3, #0
 80067f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80067f8:	2320      	movs	r3, #32
 80067fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80067fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006802:	2330      	movs	r3, #48	@ 0x30
 8006804:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80069b4 <_vfiprintf_r+0x21c>
 8006808:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800680c:	f04f 0901 	mov.w	r9, #1
 8006810:	4623      	mov	r3, r4
 8006812:	469a      	mov	sl, r3
 8006814:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006818:	b10a      	cbz	r2, 800681e <_vfiprintf_r+0x86>
 800681a:	2a25      	cmp	r2, #37	@ 0x25
 800681c:	d1f9      	bne.n	8006812 <_vfiprintf_r+0x7a>
 800681e:	ebba 0b04 	subs.w	fp, sl, r4
 8006822:	d00b      	beq.n	800683c <_vfiprintf_r+0xa4>
 8006824:	465b      	mov	r3, fp
 8006826:	4622      	mov	r2, r4
 8006828:	4629      	mov	r1, r5
 800682a:	4630      	mov	r0, r6
 800682c:	f7ff ffa1 	bl	8006772 <__sfputs_r>
 8006830:	3001      	adds	r0, #1
 8006832:	f000 80a7 	beq.w	8006984 <_vfiprintf_r+0x1ec>
 8006836:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006838:	445a      	add	r2, fp
 800683a:	9209      	str	r2, [sp, #36]	@ 0x24
 800683c:	f89a 3000 	ldrb.w	r3, [sl]
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 809f 	beq.w	8006984 <_vfiprintf_r+0x1ec>
 8006846:	2300      	movs	r3, #0
 8006848:	f04f 32ff 	mov.w	r2, #4294967295
 800684c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006850:	f10a 0a01 	add.w	sl, sl, #1
 8006854:	9304      	str	r3, [sp, #16]
 8006856:	9307      	str	r3, [sp, #28]
 8006858:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800685c:	931a      	str	r3, [sp, #104]	@ 0x68
 800685e:	4654      	mov	r4, sl
 8006860:	2205      	movs	r2, #5
 8006862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006866:	4853      	ldr	r0, [pc, #332]	@ (80069b4 <_vfiprintf_r+0x21c>)
 8006868:	f7f9 fcba 	bl	80001e0 <memchr>
 800686c:	9a04      	ldr	r2, [sp, #16]
 800686e:	b9d8      	cbnz	r0, 80068a8 <_vfiprintf_r+0x110>
 8006870:	06d1      	lsls	r1, r2, #27
 8006872:	bf44      	itt	mi
 8006874:	2320      	movmi	r3, #32
 8006876:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800687a:	0713      	lsls	r3, r2, #28
 800687c:	bf44      	itt	mi
 800687e:	232b      	movmi	r3, #43	@ 0x2b
 8006880:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006884:	f89a 3000 	ldrb.w	r3, [sl]
 8006888:	2b2a      	cmp	r3, #42	@ 0x2a
 800688a:	d015      	beq.n	80068b8 <_vfiprintf_r+0x120>
 800688c:	9a07      	ldr	r2, [sp, #28]
 800688e:	4654      	mov	r4, sl
 8006890:	2000      	movs	r0, #0
 8006892:	f04f 0c0a 	mov.w	ip, #10
 8006896:	4621      	mov	r1, r4
 8006898:	f811 3b01 	ldrb.w	r3, [r1], #1
 800689c:	3b30      	subs	r3, #48	@ 0x30
 800689e:	2b09      	cmp	r3, #9
 80068a0:	d94b      	bls.n	800693a <_vfiprintf_r+0x1a2>
 80068a2:	b1b0      	cbz	r0, 80068d2 <_vfiprintf_r+0x13a>
 80068a4:	9207      	str	r2, [sp, #28]
 80068a6:	e014      	b.n	80068d2 <_vfiprintf_r+0x13a>
 80068a8:	eba0 0308 	sub.w	r3, r0, r8
 80068ac:	fa09 f303 	lsl.w	r3, r9, r3
 80068b0:	4313      	orrs	r3, r2
 80068b2:	9304      	str	r3, [sp, #16]
 80068b4:	46a2      	mov	sl, r4
 80068b6:	e7d2      	b.n	800685e <_vfiprintf_r+0xc6>
 80068b8:	9b03      	ldr	r3, [sp, #12]
 80068ba:	1d19      	adds	r1, r3, #4
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	9103      	str	r1, [sp, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	bfbb      	ittet	lt
 80068c4:	425b      	neglt	r3, r3
 80068c6:	f042 0202 	orrlt.w	r2, r2, #2
 80068ca:	9307      	strge	r3, [sp, #28]
 80068cc:	9307      	strlt	r3, [sp, #28]
 80068ce:	bfb8      	it	lt
 80068d0:	9204      	strlt	r2, [sp, #16]
 80068d2:	7823      	ldrb	r3, [r4, #0]
 80068d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80068d6:	d10a      	bne.n	80068ee <_vfiprintf_r+0x156>
 80068d8:	7863      	ldrb	r3, [r4, #1]
 80068da:	2b2a      	cmp	r3, #42	@ 0x2a
 80068dc:	d132      	bne.n	8006944 <_vfiprintf_r+0x1ac>
 80068de:	9b03      	ldr	r3, [sp, #12]
 80068e0:	1d1a      	adds	r2, r3, #4
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	9203      	str	r2, [sp, #12]
 80068e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80068ea:	3402      	adds	r4, #2
 80068ec:	9305      	str	r3, [sp, #20]
 80068ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80069c4 <_vfiprintf_r+0x22c>
 80068f2:	7821      	ldrb	r1, [r4, #0]
 80068f4:	2203      	movs	r2, #3
 80068f6:	4650      	mov	r0, sl
 80068f8:	f7f9 fc72 	bl	80001e0 <memchr>
 80068fc:	b138      	cbz	r0, 800690e <_vfiprintf_r+0x176>
 80068fe:	9b04      	ldr	r3, [sp, #16]
 8006900:	eba0 000a 	sub.w	r0, r0, sl
 8006904:	2240      	movs	r2, #64	@ 0x40
 8006906:	4082      	lsls	r2, r0
 8006908:	4313      	orrs	r3, r2
 800690a:	3401      	adds	r4, #1
 800690c:	9304      	str	r3, [sp, #16]
 800690e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006912:	4829      	ldr	r0, [pc, #164]	@ (80069b8 <_vfiprintf_r+0x220>)
 8006914:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006918:	2206      	movs	r2, #6
 800691a:	f7f9 fc61 	bl	80001e0 <memchr>
 800691e:	2800      	cmp	r0, #0
 8006920:	d03f      	beq.n	80069a2 <_vfiprintf_r+0x20a>
 8006922:	4b26      	ldr	r3, [pc, #152]	@ (80069bc <_vfiprintf_r+0x224>)
 8006924:	bb1b      	cbnz	r3, 800696e <_vfiprintf_r+0x1d6>
 8006926:	9b03      	ldr	r3, [sp, #12]
 8006928:	3307      	adds	r3, #7
 800692a:	f023 0307 	bic.w	r3, r3, #7
 800692e:	3308      	adds	r3, #8
 8006930:	9303      	str	r3, [sp, #12]
 8006932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006934:	443b      	add	r3, r7
 8006936:	9309      	str	r3, [sp, #36]	@ 0x24
 8006938:	e76a      	b.n	8006810 <_vfiprintf_r+0x78>
 800693a:	fb0c 3202 	mla	r2, ip, r2, r3
 800693e:	460c      	mov	r4, r1
 8006940:	2001      	movs	r0, #1
 8006942:	e7a8      	b.n	8006896 <_vfiprintf_r+0xfe>
 8006944:	2300      	movs	r3, #0
 8006946:	3401      	adds	r4, #1
 8006948:	9305      	str	r3, [sp, #20]
 800694a:	4619      	mov	r1, r3
 800694c:	f04f 0c0a 	mov.w	ip, #10
 8006950:	4620      	mov	r0, r4
 8006952:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006956:	3a30      	subs	r2, #48	@ 0x30
 8006958:	2a09      	cmp	r2, #9
 800695a:	d903      	bls.n	8006964 <_vfiprintf_r+0x1cc>
 800695c:	2b00      	cmp	r3, #0
 800695e:	d0c6      	beq.n	80068ee <_vfiprintf_r+0x156>
 8006960:	9105      	str	r1, [sp, #20]
 8006962:	e7c4      	b.n	80068ee <_vfiprintf_r+0x156>
 8006964:	fb0c 2101 	mla	r1, ip, r1, r2
 8006968:	4604      	mov	r4, r0
 800696a:	2301      	movs	r3, #1
 800696c:	e7f0      	b.n	8006950 <_vfiprintf_r+0x1b8>
 800696e:	ab03      	add	r3, sp, #12
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	462a      	mov	r2, r5
 8006974:	4b12      	ldr	r3, [pc, #72]	@ (80069c0 <_vfiprintf_r+0x228>)
 8006976:	a904      	add	r1, sp, #16
 8006978:	4630      	mov	r0, r6
 800697a:	f3af 8000 	nop.w
 800697e:	4607      	mov	r7, r0
 8006980:	1c78      	adds	r0, r7, #1
 8006982:	d1d6      	bne.n	8006932 <_vfiprintf_r+0x19a>
 8006984:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006986:	07d9      	lsls	r1, r3, #31
 8006988:	d405      	bmi.n	8006996 <_vfiprintf_r+0x1fe>
 800698a:	89ab      	ldrh	r3, [r5, #12]
 800698c:	059a      	lsls	r2, r3, #22
 800698e:	d402      	bmi.n	8006996 <_vfiprintf_r+0x1fe>
 8006990:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006992:	f7ff fdcf 	bl	8006534 <__retarget_lock_release_recursive>
 8006996:	89ab      	ldrh	r3, [r5, #12]
 8006998:	065b      	lsls	r3, r3, #25
 800699a:	f53f af1f 	bmi.w	80067dc <_vfiprintf_r+0x44>
 800699e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069a0:	e71e      	b.n	80067e0 <_vfiprintf_r+0x48>
 80069a2:	ab03      	add	r3, sp, #12
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	462a      	mov	r2, r5
 80069a8:	4b05      	ldr	r3, [pc, #20]	@ (80069c0 <_vfiprintf_r+0x228>)
 80069aa:	a904      	add	r1, sp, #16
 80069ac:	4630      	mov	r0, r6
 80069ae:	f000 f879 	bl	8006aa4 <_printf_i>
 80069b2:	e7e4      	b.n	800697e <_vfiprintf_r+0x1e6>
 80069b4:	080070ac 	.word	0x080070ac
 80069b8:	080070b6 	.word	0x080070b6
 80069bc:	00000000 	.word	0x00000000
 80069c0:	08006773 	.word	0x08006773
 80069c4:	080070b2 	.word	0x080070b2

080069c8 <_printf_common>:
 80069c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069cc:	4616      	mov	r6, r2
 80069ce:	4698      	mov	r8, r3
 80069d0:	688a      	ldr	r2, [r1, #8]
 80069d2:	690b      	ldr	r3, [r1, #16]
 80069d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069d8:	4293      	cmp	r3, r2
 80069da:	bfb8      	it	lt
 80069dc:	4613      	movlt	r3, r2
 80069de:	6033      	str	r3, [r6, #0]
 80069e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80069e4:	4607      	mov	r7, r0
 80069e6:	460c      	mov	r4, r1
 80069e8:	b10a      	cbz	r2, 80069ee <_printf_common+0x26>
 80069ea:	3301      	adds	r3, #1
 80069ec:	6033      	str	r3, [r6, #0]
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	0699      	lsls	r1, r3, #26
 80069f2:	bf42      	ittt	mi
 80069f4:	6833      	ldrmi	r3, [r6, #0]
 80069f6:	3302      	addmi	r3, #2
 80069f8:	6033      	strmi	r3, [r6, #0]
 80069fa:	6825      	ldr	r5, [r4, #0]
 80069fc:	f015 0506 	ands.w	r5, r5, #6
 8006a00:	d106      	bne.n	8006a10 <_printf_common+0x48>
 8006a02:	f104 0a19 	add.w	sl, r4, #25
 8006a06:	68e3      	ldr	r3, [r4, #12]
 8006a08:	6832      	ldr	r2, [r6, #0]
 8006a0a:	1a9b      	subs	r3, r3, r2
 8006a0c:	42ab      	cmp	r3, r5
 8006a0e:	dc26      	bgt.n	8006a5e <_printf_common+0x96>
 8006a10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a14:	6822      	ldr	r2, [r4, #0]
 8006a16:	3b00      	subs	r3, #0
 8006a18:	bf18      	it	ne
 8006a1a:	2301      	movne	r3, #1
 8006a1c:	0692      	lsls	r2, r2, #26
 8006a1e:	d42b      	bmi.n	8006a78 <_printf_common+0xb0>
 8006a20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a24:	4641      	mov	r1, r8
 8006a26:	4638      	mov	r0, r7
 8006a28:	47c8      	blx	r9
 8006a2a:	3001      	adds	r0, #1
 8006a2c:	d01e      	beq.n	8006a6c <_printf_common+0xa4>
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	6922      	ldr	r2, [r4, #16]
 8006a32:	f003 0306 	and.w	r3, r3, #6
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	bf02      	ittt	eq
 8006a3a:	68e5      	ldreq	r5, [r4, #12]
 8006a3c:	6833      	ldreq	r3, [r6, #0]
 8006a3e:	1aed      	subeq	r5, r5, r3
 8006a40:	68a3      	ldr	r3, [r4, #8]
 8006a42:	bf0c      	ite	eq
 8006a44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a48:	2500      	movne	r5, #0
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	bfc4      	itt	gt
 8006a4e:	1a9b      	subgt	r3, r3, r2
 8006a50:	18ed      	addgt	r5, r5, r3
 8006a52:	2600      	movs	r6, #0
 8006a54:	341a      	adds	r4, #26
 8006a56:	42b5      	cmp	r5, r6
 8006a58:	d11a      	bne.n	8006a90 <_printf_common+0xc8>
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	e008      	b.n	8006a70 <_printf_common+0xa8>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	4652      	mov	r2, sl
 8006a62:	4641      	mov	r1, r8
 8006a64:	4638      	mov	r0, r7
 8006a66:	47c8      	blx	r9
 8006a68:	3001      	adds	r0, #1
 8006a6a:	d103      	bne.n	8006a74 <_printf_common+0xac>
 8006a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a74:	3501      	adds	r5, #1
 8006a76:	e7c6      	b.n	8006a06 <_printf_common+0x3e>
 8006a78:	18e1      	adds	r1, r4, r3
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	2030      	movs	r0, #48	@ 0x30
 8006a7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a82:	4422      	add	r2, r4
 8006a84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a8c:	3302      	adds	r3, #2
 8006a8e:	e7c7      	b.n	8006a20 <_printf_common+0x58>
 8006a90:	2301      	movs	r3, #1
 8006a92:	4622      	mov	r2, r4
 8006a94:	4641      	mov	r1, r8
 8006a96:	4638      	mov	r0, r7
 8006a98:	47c8      	blx	r9
 8006a9a:	3001      	adds	r0, #1
 8006a9c:	d0e6      	beq.n	8006a6c <_printf_common+0xa4>
 8006a9e:	3601      	adds	r6, #1
 8006aa0:	e7d9      	b.n	8006a56 <_printf_common+0x8e>
	...

08006aa4 <_printf_i>:
 8006aa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa8:	7e0f      	ldrb	r7, [r1, #24]
 8006aaa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006aac:	2f78      	cmp	r7, #120	@ 0x78
 8006aae:	4691      	mov	r9, r2
 8006ab0:	4680      	mov	r8, r0
 8006ab2:	460c      	mov	r4, r1
 8006ab4:	469a      	mov	sl, r3
 8006ab6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006aba:	d807      	bhi.n	8006acc <_printf_i+0x28>
 8006abc:	2f62      	cmp	r7, #98	@ 0x62
 8006abe:	d80a      	bhi.n	8006ad6 <_printf_i+0x32>
 8006ac0:	2f00      	cmp	r7, #0
 8006ac2:	f000 80d2 	beq.w	8006c6a <_printf_i+0x1c6>
 8006ac6:	2f58      	cmp	r7, #88	@ 0x58
 8006ac8:	f000 80b9 	beq.w	8006c3e <_printf_i+0x19a>
 8006acc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ad0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ad4:	e03a      	b.n	8006b4c <_printf_i+0xa8>
 8006ad6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006ada:	2b15      	cmp	r3, #21
 8006adc:	d8f6      	bhi.n	8006acc <_printf_i+0x28>
 8006ade:	a101      	add	r1, pc, #4	@ (adr r1, 8006ae4 <_printf_i+0x40>)
 8006ae0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ae4:	08006b3d 	.word	0x08006b3d
 8006ae8:	08006b51 	.word	0x08006b51
 8006aec:	08006acd 	.word	0x08006acd
 8006af0:	08006acd 	.word	0x08006acd
 8006af4:	08006acd 	.word	0x08006acd
 8006af8:	08006acd 	.word	0x08006acd
 8006afc:	08006b51 	.word	0x08006b51
 8006b00:	08006acd 	.word	0x08006acd
 8006b04:	08006acd 	.word	0x08006acd
 8006b08:	08006acd 	.word	0x08006acd
 8006b0c:	08006acd 	.word	0x08006acd
 8006b10:	08006c51 	.word	0x08006c51
 8006b14:	08006b7b 	.word	0x08006b7b
 8006b18:	08006c0b 	.word	0x08006c0b
 8006b1c:	08006acd 	.word	0x08006acd
 8006b20:	08006acd 	.word	0x08006acd
 8006b24:	08006c73 	.word	0x08006c73
 8006b28:	08006acd 	.word	0x08006acd
 8006b2c:	08006b7b 	.word	0x08006b7b
 8006b30:	08006acd 	.word	0x08006acd
 8006b34:	08006acd 	.word	0x08006acd
 8006b38:	08006c13 	.word	0x08006c13
 8006b3c:	6833      	ldr	r3, [r6, #0]
 8006b3e:	1d1a      	adds	r2, r3, #4
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6032      	str	r2, [r6, #0]
 8006b44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e09d      	b.n	8006c8c <_printf_i+0x1e8>
 8006b50:	6833      	ldr	r3, [r6, #0]
 8006b52:	6820      	ldr	r0, [r4, #0]
 8006b54:	1d19      	adds	r1, r3, #4
 8006b56:	6031      	str	r1, [r6, #0]
 8006b58:	0606      	lsls	r6, r0, #24
 8006b5a:	d501      	bpl.n	8006b60 <_printf_i+0xbc>
 8006b5c:	681d      	ldr	r5, [r3, #0]
 8006b5e:	e003      	b.n	8006b68 <_printf_i+0xc4>
 8006b60:	0645      	lsls	r5, r0, #25
 8006b62:	d5fb      	bpl.n	8006b5c <_printf_i+0xb8>
 8006b64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b68:	2d00      	cmp	r5, #0
 8006b6a:	da03      	bge.n	8006b74 <_printf_i+0xd0>
 8006b6c:	232d      	movs	r3, #45	@ 0x2d
 8006b6e:	426d      	negs	r5, r5
 8006b70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b74:	4859      	ldr	r0, [pc, #356]	@ (8006cdc <_printf_i+0x238>)
 8006b76:	230a      	movs	r3, #10
 8006b78:	e011      	b.n	8006b9e <_printf_i+0xfa>
 8006b7a:	6821      	ldr	r1, [r4, #0]
 8006b7c:	6833      	ldr	r3, [r6, #0]
 8006b7e:	0608      	lsls	r0, r1, #24
 8006b80:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b84:	d402      	bmi.n	8006b8c <_printf_i+0xe8>
 8006b86:	0649      	lsls	r1, r1, #25
 8006b88:	bf48      	it	mi
 8006b8a:	b2ad      	uxthmi	r5, r5
 8006b8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b8e:	4853      	ldr	r0, [pc, #332]	@ (8006cdc <_printf_i+0x238>)
 8006b90:	6033      	str	r3, [r6, #0]
 8006b92:	bf14      	ite	ne
 8006b94:	230a      	movne	r3, #10
 8006b96:	2308      	moveq	r3, #8
 8006b98:	2100      	movs	r1, #0
 8006b9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b9e:	6866      	ldr	r6, [r4, #4]
 8006ba0:	60a6      	str	r6, [r4, #8]
 8006ba2:	2e00      	cmp	r6, #0
 8006ba4:	bfa2      	ittt	ge
 8006ba6:	6821      	ldrge	r1, [r4, #0]
 8006ba8:	f021 0104 	bicge.w	r1, r1, #4
 8006bac:	6021      	strge	r1, [r4, #0]
 8006bae:	b90d      	cbnz	r5, 8006bb4 <_printf_i+0x110>
 8006bb0:	2e00      	cmp	r6, #0
 8006bb2:	d04b      	beq.n	8006c4c <_printf_i+0x1a8>
 8006bb4:	4616      	mov	r6, r2
 8006bb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006bba:	fb03 5711 	mls	r7, r3, r1, r5
 8006bbe:	5dc7      	ldrb	r7, [r0, r7]
 8006bc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006bc4:	462f      	mov	r7, r5
 8006bc6:	42bb      	cmp	r3, r7
 8006bc8:	460d      	mov	r5, r1
 8006bca:	d9f4      	bls.n	8006bb6 <_printf_i+0x112>
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d10b      	bne.n	8006be8 <_printf_i+0x144>
 8006bd0:	6823      	ldr	r3, [r4, #0]
 8006bd2:	07df      	lsls	r7, r3, #31
 8006bd4:	d508      	bpl.n	8006be8 <_printf_i+0x144>
 8006bd6:	6923      	ldr	r3, [r4, #16]
 8006bd8:	6861      	ldr	r1, [r4, #4]
 8006bda:	4299      	cmp	r1, r3
 8006bdc:	bfde      	ittt	le
 8006bde:	2330      	movle	r3, #48	@ 0x30
 8006be0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006be4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006be8:	1b92      	subs	r2, r2, r6
 8006bea:	6122      	str	r2, [r4, #16]
 8006bec:	f8cd a000 	str.w	sl, [sp]
 8006bf0:	464b      	mov	r3, r9
 8006bf2:	aa03      	add	r2, sp, #12
 8006bf4:	4621      	mov	r1, r4
 8006bf6:	4640      	mov	r0, r8
 8006bf8:	f7ff fee6 	bl	80069c8 <_printf_common>
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	d14a      	bne.n	8006c96 <_printf_i+0x1f2>
 8006c00:	f04f 30ff 	mov.w	r0, #4294967295
 8006c04:	b004      	add	sp, #16
 8006c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c0a:	6823      	ldr	r3, [r4, #0]
 8006c0c:	f043 0320 	orr.w	r3, r3, #32
 8006c10:	6023      	str	r3, [r4, #0]
 8006c12:	4833      	ldr	r0, [pc, #204]	@ (8006ce0 <_printf_i+0x23c>)
 8006c14:	2778      	movs	r7, #120	@ 0x78
 8006c16:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c1a:	6823      	ldr	r3, [r4, #0]
 8006c1c:	6831      	ldr	r1, [r6, #0]
 8006c1e:	061f      	lsls	r7, r3, #24
 8006c20:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c24:	d402      	bmi.n	8006c2c <_printf_i+0x188>
 8006c26:	065f      	lsls	r7, r3, #25
 8006c28:	bf48      	it	mi
 8006c2a:	b2ad      	uxthmi	r5, r5
 8006c2c:	6031      	str	r1, [r6, #0]
 8006c2e:	07d9      	lsls	r1, r3, #31
 8006c30:	bf44      	itt	mi
 8006c32:	f043 0320 	orrmi.w	r3, r3, #32
 8006c36:	6023      	strmi	r3, [r4, #0]
 8006c38:	b11d      	cbz	r5, 8006c42 <_printf_i+0x19e>
 8006c3a:	2310      	movs	r3, #16
 8006c3c:	e7ac      	b.n	8006b98 <_printf_i+0xf4>
 8006c3e:	4827      	ldr	r0, [pc, #156]	@ (8006cdc <_printf_i+0x238>)
 8006c40:	e7e9      	b.n	8006c16 <_printf_i+0x172>
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	f023 0320 	bic.w	r3, r3, #32
 8006c48:	6023      	str	r3, [r4, #0]
 8006c4a:	e7f6      	b.n	8006c3a <_printf_i+0x196>
 8006c4c:	4616      	mov	r6, r2
 8006c4e:	e7bd      	b.n	8006bcc <_printf_i+0x128>
 8006c50:	6833      	ldr	r3, [r6, #0]
 8006c52:	6825      	ldr	r5, [r4, #0]
 8006c54:	6961      	ldr	r1, [r4, #20]
 8006c56:	1d18      	adds	r0, r3, #4
 8006c58:	6030      	str	r0, [r6, #0]
 8006c5a:	062e      	lsls	r6, r5, #24
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	d501      	bpl.n	8006c64 <_printf_i+0x1c0>
 8006c60:	6019      	str	r1, [r3, #0]
 8006c62:	e002      	b.n	8006c6a <_printf_i+0x1c6>
 8006c64:	0668      	lsls	r0, r5, #25
 8006c66:	d5fb      	bpl.n	8006c60 <_printf_i+0x1bc>
 8006c68:	8019      	strh	r1, [r3, #0]
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	6123      	str	r3, [r4, #16]
 8006c6e:	4616      	mov	r6, r2
 8006c70:	e7bc      	b.n	8006bec <_printf_i+0x148>
 8006c72:	6833      	ldr	r3, [r6, #0]
 8006c74:	1d1a      	adds	r2, r3, #4
 8006c76:	6032      	str	r2, [r6, #0]
 8006c78:	681e      	ldr	r6, [r3, #0]
 8006c7a:	6862      	ldr	r2, [r4, #4]
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	4630      	mov	r0, r6
 8006c80:	f7f9 faae 	bl	80001e0 <memchr>
 8006c84:	b108      	cbz	r0, 8006c8a <_printf_i+0x1e6>
 8006c86:	1b80      	subs	r0, r0, r6
 8006c88:	6060      	str	r0, [r4, #4]
 8006c8a:	6863      	ldr	r3, [r4, #4]
 8006c8c:	6123      	str	r3, [r4, #16]
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c94:	e7aa      	b.n	8006bec <_printf_i+0x148>
 8006c96:	6923      	ldr	r3, [r4, #16]
 8006c98:	4632      	mov	r2, r6
 8006c9a:	4649      	mov	r1, r9
 8006c9c:	4640      	mov	r0, r8
 8006c9e:	47d0      	blx	sl
 8006ca0:	3001      	adds	r0, #1
 8006ca2:	d0ad      	beq.n	8006c00 <_printf_i+0x15c>
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	079b      	lsls	r3, r3, #30
 8006ca8:	d413      	bmi.n	8006cd2 <_printf_i+0x22e>
 8006caa:	68e0      	ldr	r0, [r4, #12]
 8006cac:	9b03      	ldr	r3, [sp, #12]
 8006cae:	4298      	cmp	r0, r3
 8006cb0:	bfb8      	it	lt
 8006cb2:	4618      	movlt	r0, r3
 8006cb4:	e7a6      	b.n	8006c04 <_printf_i+0x160>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	4632      	mov	r2, r6
 8006cba:	4649      	mov	r1, r9
 8006cbc:	4640      	mov	r0, r8
 8006cbe:	47d0      	blx	sl
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	d09d      	beq.n	8006c00 <_printf_i+0x15c>
 8006cc4:	3501      	adds	r5, #1
 8006cc6:	68e3      	ldr	r3, [r4, #12]
 8006cc8:	9903      	ldr	r1, [sp, #12]
 8006cca:	1a5b      	subs	r3, r3, r1
 8006ccc:	42ab      	cmp	r3, r5
 8006cce:	dcf2      	bgt.n	8006cb6 <_printf_i+0x212>
 8006cd0:	e7eb      	b.n	8006caa <_printf_i+0x206>
 8006cd2:	2500      	movs	r5, #0
 8006cd4:	f104 0619 	add.w	r6, r4, #25
 8006cd8:	e7f5      	b.n	8006cc6 <_printf_i+0x222>
 8006cda:	bf00      	nop
 8006cdc:	080070bd 	.word	0x080070bd
 8006ce0:	080070ce 	.word	0x080070ce

08006ce4 <__swhatbuf_r>:
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cec:	2900      	cmp	r1, #0
 8006cee:	b096      	sub	sp, #88	@ 0x58
 8006cf0:	4615      	mov	r5, r2
 8006cf2:	461e      	mov	r6, r3
 8006cf4:	da0d      	bge.n	8006d12 <__swhatbuf_r+0x2e>
 8006cf6:	89a3      	ldrh	r3, [r4, #12]
 8006cf8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006cfc:	f04f 0100 	mov.w	r1, #0
 8006d00:	bf14      	ite	ne
 8006d02:	2340      	movne	r3, #64	@ 0x40
 8006d04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006d08:	2000      	movs	r0, #0
 8006d0a:	6031      	str	r1, [r6, #0]
 8006d0c:	602b      	str	r3, [r5, #0]
 8006d0e:	b016      	add	sp, #88	@ 0x58
 8006d10:	bd70      	pop	{r4, r5, r6, pc}
 8006d12:	466a      	mov	r2, sp
 8006d14:	f000 f87c 	bl	8006e10 <_fstat_r>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	dbec      	blt.n	8006cf6 <__swhatbuf_r+0x12>
 8006d1c:	9901      	ldr	r1, [sp, #4]
 8006d1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006d22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006d26:	4259      	negs	r1, r3
 8006d28:	4159      	adcs	r1, r3
 8006d2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d2e:	e7eb      	b.n	8006d08 <__swhatbuf_r+0x24>

08006d30 <__smakebuf_r>:
 8006d30:	898b      	ldrh	r3, [r1, #12]
 8006d32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d34:	079d      	lsls	r5, r3, #30
 8006d36:	4606      	mov	r6, r0
 8006d38:	460c      	mov	r4, r1
 8006d3a:	d507      	bpl.n	8006d4c <__smakebuf_r+0x1c>
 8006d3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006d40:	6023      	str	r3, [r4, #0]
 8006d42:	6123      	str	r3, [r4, #16]
 8006d44:	2301      	movs	r3, #1
 8006d46:	6163      	str	r3, [r4, #20]
 8006d48:	b003      	add	sp, #12
 8006d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d4c:	ab01      	add	r3, sp, #4
 8006d4e:	466a      	mov	r2, sp
 8006d50:	f7ff ffc8 	bl	8006ce4 <__swhatbuf_r>
 8006d54:	9f00      	ldr	r7, [sp, #0]
 8006d56:	4605      	mov	r5, r0
 8006d58:	4639      	mov	r1, r7
 8006d5a:	4630      	mov	r0, r6
 8006d5c:	f7ff fc66 	bl	800662c <_malloc_r>
 8006d60:	b948      	cbnz	r0, 8006d76 <__smakebuf_r+0x46>
 8006d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d66:	059a      	lsls	r2, r3, #22
 8006d68:	d4ee      	bmi.n	8006d48 <__smakebuf_r+0x18>
 8006d6a:	f023 0303 	bic.w	r3, r3, #3
 8006d6e:	f043 0302 	orr.w	r3, r3, #2
 8006d72:	81a3      	strh	r3, [r4, #12]
 8006d74:	e7e2      	b.n	8006d3c <__smakebuf_r+0xc>
 8006d76:	89a3      	ldrh	r3, [r4, #12]
 8006d78:	6020      	str	r0, [r4, #0]
 8006d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d7e:	81a3      	strh	r3, [r4, #12]
 8006d80:	9b01      	ldr	r3, [sp, #4]
 8006d82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006d86:	b15b      	cbz	r3, 8006da0 <__smakebuf_r+0x70>
 8006d88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	f000 f851 	bl	8006e34 <_isatty_r>
 8006d92:	b128      	cbz	r0, 8006da0 <__smakebuf_r+0x70>
 8006d94:	89a3      	ldrh	r3, [r4, #12]
 8006d96:	f023 0303 	bic.w	r3, r3, #3
 8006d9a:	f043 0301 	orr.w	r3, r3, #1
 8006d9e:	81a3      	strh	r3, [r4, #12]
 8006da0:	89a3      	ldrh	r3, [r4, #12]
 8006da2:	431d      	orrs	r5, r3
 8006da4:	81a5      	strh	r5, [r4, #12]
 8006da6:	e7cf      	b.n	8006d48 <__smakebuf_r+0x18>

08006da8 <_putc_r>:
 8006da8:	b570      	push	{r4, r5, r6, lr}
 8006daa:	460d      	mov	r5, r1
 8006dac:	4614      	mov	r4, r2
 8006dae:	4606      	mov	r6, r0
 8006db0:	b118      	cbz	r0, 8006dba <_putc_r+0x12>
 8006db2:	6a03      	ldr	r3, [r0, #32]
 8006db4:	b90b      	cbnz	r3, 8006dba <_putc_r+0x12>
 8006db6:	f7ff f9bd 	bl	8006134 <__sinit>
 8006dba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006dbc:	07d8      	lsls	r0, r3, #31
 8006dbe:	d405      	bmi.n	8006dcc <_putc_r+0x24>
 8006dc0:	89a3      	ldrh	r3, [r4, #12]
 8006dc2:	0599      	lsls	r1, r3, #22
 8006dc4:	d402      	bmi.n	8006dcc <_putc_r+0x24>
 8006dc6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dc8:	f7ff fbb3 	bl	8006532 <__retarget_lock_acquire_recursive>
 8006dcc:	68a3      	ldr	r3, [r4, #8]
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	60a3      	str	r3, [r4, #8]
 8006dd4:	da05      	bge.n	8006de2 <_putc_r+0x3a>
 8006dd6:	69a2      	ldr	r2, [r4, #24]
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	db12      	blt.n	8006e02 <_putc_r+0x5a>
 8006ddc:	b2eb      	uxtb	r3, r5
 8006dde:	2b0a      	cmp	r3, #10
 8006de0:	d00f      	beq.n	8006e02 <_putc_r+0x5a>
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	1c5a      	adds	r2, r3, #1
 8006de6:	6022      	str	r2, [r4, #0]
 8006de8:	701d      	strb	r5, [r3, #0]
 8006dea:	b2ed      	uxtb	r5, r5
 8006dec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006dee:	07da      	lsls	r2, r3, #31
 8006df0:	d405      	bmi.n	8006dfe <_putc_r+0x56>
 8006df2:	89a3      	ldrh	r3, [r4, #12]
 8006df4:	059b      	lsls	r3, r3, #22
 8006df6:	d402      	bmi.n	8006dfe <_putc_r+0x56>
 8006df8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dfa:	f7ff fb9b 	bl	8006534 <__retarget_lock_release_recursive>
 8006dfe:	4628      	mov	r0, r5
 8006e00:	bd70      	pop	{r4, r5, r6, pc}
 8006e02:	4629      	mov	r1, r5
 8006e04:	4622      	mov	r2, r4
 8006e06:	4630      	mov	r0, r6
 8006e08:	f7ff fa85 	bl	8006316 <__swbuf_r>
 8006e0c:	4605      	mov	r5, r0
 8006e0e:	e7ed      	b.n	8006dec <_putc_r+0x44>

08006e10 <_fstat_r>:
 8006e10:	b538      	push	{r3, r4, r5, lr}
 8006e12:	4d07      	ldr	r5, [pc, #28]	@ (8006e30 <_fstat_r+0x20>)
 8006e14:	2300      	movs	r3, #0
 8006e16:	4604      	mov	r4, r0
 8006e18:	4608      	mov	r0, r1
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	602b      	str	r3, [r5, #0]
 8006e1e:	f7fb fb50 	bl	80024c2 <_fstat>
 8006e22:	1c43      	adds	r3, r0, #1
 8006e24:	d102      	bne.n	8006e2c <_fstat_r+0x1c>
 8006e26:	682b      	ldr	r3, [r5, #0]
 8006e28:	b103      	cbz	r3, 8006e2c <_fstat_r+0x1c>
 8006e2a:	6023      	str	r3, [r4, #0]
 8006e2c:	bd38      	pop	{r3, r4, r5, pc}
 8006e2e:	bf00      	nop
 8006e30:	200006e8 	.word	0x200006e8

08006e34 <_isatty_r>:
 8006e34:	b538      	push	{r3, r4, r5, lr}
 8006e36:	4d06      	ldr	r5, [pc, #24]	@ (8006e50 <_isatty_r+0x1c>)
 8006e38:	2300      	movs	r3, #0
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	4608      	mov	r0, r1
 8006e3e:	602b      	str	r3, [r5, #0]
 8006e40:	f7fb fb4f 	bl	80024e2 <_isatty>
 8006e44:	1c43      	adds	r3, r0, #1
 8006e46:	d102      	bne.n	8006e4e <_isatty_r+0x1a>
 8006e48:	682b      	ldr	r3, [r5, #0]
 8006e4a:	b103      	cbz	r3, 8006e4e <_isatty_r+0x1a>
 8006e4c:	6023      	str	r3, [r4, #0]
 8006e4e:	bd38      	pop	{r3, r4, r5, pc}
 8006e50:	200006e8 	.word	0x200006e8

08006e54 <_sbrk_r>:
 8006e54:	b538      	push	{r3, r4, r5, lr}
 8006e56:	4d06      	ldr	r5, [pc, #24]	@ (8006e70 <_sbrk_r+0x1c>)
 8006e58:	2300      	movs	r3, #0
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	4608      	mov	r0, r1
 8006e5e:	602b      	str	r3, [r5, #0]
 8006e60:	f7fb fb58 	bl	8002514 <_sbrk>
 8006e64:	1c43      	adds	r3, r0, #1
 8006e66:	d102      	bne.n	8006e6e <_sbrk_r+0x1a>
 8006e68:	682b      	ldr	r3, [r5, #0]
 8006e6a:	b103      	cbz	r3, 8006e6e <_sbrk_r+0x1a>
 8006e6c:	6023      	str	r3, [r4, #0]
 8006e6e:	bd38      	pop	{r3, r4, r5, pc}
 8006e70:	200006e8 	.word	0x200006e8

08006e74 <_init>:
 8006e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e76:	bf00      	nop
 8006e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e7a:	bc08      	pop	{r3}
 8006e7c:	469e      	mov	lr, r3
 8006e7e:	4770      	bx	lr

08006e80 <_fini>:
 8006e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e82:	bf00      	nop
 8006e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e86:	bc08      	pop	{r3}
 8006e88:	469e      	mov	lr, r3
 8006e8a:	4770      	bx	lr
