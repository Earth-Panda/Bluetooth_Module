
BlueTooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d68  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08005f08  08005f08  00006f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006104  08006104  00008080  2**0
                  CONTENTS
  4 .ARM          00000008  08006104  08006104  00007104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800610c  0800610c  00008080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800610c  0800610c  0000710c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006110  08006110  00007110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08006114  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  20000080  08006194  00008080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f0  08006194  000086f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001465d  00000000  00000000  000080b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003383  00000000  00000000  0001c70d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  0001fa90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ccd  00000000  00000000  00020b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b044  00000000  00000000  00021815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016187  00000000  00000000  0003c859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092f5c  00000000  00000000  000529e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e593c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b8c  00000000  00000000  000e5980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000ea50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005ef0 	.word	0x08005ef0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08005ef0 	.word	0x08005ef0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08c      	sub	sp, #48	@ 0x30
 8000574:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

	/* USER CODE END BlueNRG_MS_Init_PreTreatment */

	/* Initialize the peripherals and the BLE Stack */
	uint8_t SERVER_BDADDR[] = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000576:	4a52      	ldr	r2, [pc, #328]	@ (80006c0 <MX_BlueNRG_MS_Init+0x150>)
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000580:	6018      	str	r0, [r3, #0]
 8000582:	3304      	adds	r3, #4
 8000584:	8019      	strh	r1, [r3, #0]

	uint8_t  hwVersion;
	uint16_t fwVersion;
	int ret;

	User_Init();
 8000586:	f000 f8bd 	bl	8000704 <User_Init>

	/* Get the User Button initial state */
	user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 800058a:	2000      	movs	r0, #0
 800058c:	f001 f9c6 	bl	800191c <BSP_PB_GetState>
 8000590:	4603      	mov	r3, r0
 8000592:	b2da      	uxtb	r2, r3
 8000594:	4b4b      	ldr	r3, [pc, #300]	@ (80006c4 <MX_BlueNRG_MS_Init+0x154>)
 8000596:	701a      	strb	r2, [r3, #0]

	hci_init(user_notify, NULL);
 8000598:	2100      	movs	r1, #0
 800059a:	484b      	ldr	r0, [pc, #300]	@ (80006c8 <MX_BlueNRG_MS_Init+0x158>)
 800059c:	f004 f9b2 	bl	8004904 <hci_init>

	/* get the BlueNRG HW and FW versions */
	getBlueNRGVersion(&hwVersion, &fwVersion);
 80005a0:	1cba      	adds	r2, r7, #2
 80005a2:	1d7b      	adds	r3, r7, #5
 80005a4:	4611      	mov	r1, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f004 f821 	bl	80045ee <getBlueNRGVersion>
	* Reset BlueNRG again otherwise we won't
	* be able to change its MAC address.
	* aci_hal_write_config_data() must be the first
	* command after reset otherwise it will fail.
	*/
	hci_reset();
 80005ac:	f004 f863 	bl	8004676 <hci_reset>

	HAL_Delay(100);
 80005b0:	2064      	movs	r0, #100	@ 0x64
 80005b2:	f001 fb59 	bl	8001c68 <HAL_Delay>

	printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 80005b6:	797b      	ldrb	r3, [r7, #5]
 80005b8:	4619      	mov	r1, r3
 80005ba:	887b      	ldrh	r3, [r7, #2]
 80005bc:	461a      	mov	r2, r3
 80005be:	4843      	ldr	r0, [pc, #268]	@ (80006cc <MX_BlueNRG_MS_Init+0x15c>)
 80005c0:	f004 fe2c 	bl	800521c <iprintf>

	if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 80005c4:	797b      	ldrb	r3, [r7, #5]
 80005c6:	2b30      	cmp	r3, #48	@ 0x30
 80005c8:	d902      	bls.n	80005d0 <MX_BlueNRG_MS_Init+0x60>
		bnrg_expansion_board = IDB05A1;
 80005ca:	4b41      	ldr	r3, [pc, #260]	@ (80006d0 <MX_BlueNRG_MS_Init+0x160>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
	}

	BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	f107 0214 	add.w	r2, r7, #20
 80005d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005dc:	6018      	str	r0, [r3, #0]
 80005de:	3304      	adds	r3, #4
 80005e0:	8019      	strh	r1, [r3, #0]

	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	461a      	mov	r2, r3
 80005e8:	2106      	movs	r1, #6
 80005ea:	2000      	movs	r0, #0
 80005ec:	f003 ff69 	bl	80044c2 <aci_hal_write_config_data>
 80005f0:	4603      	mov	r3, r0
 80005f2:	61fb      	str	r3, [r7, #28]
								  CONFIG_DATA_PUBADDR_LEN,
								  bdaddr);
	if (ret) {
 80005f4:	69fb      	ldr	r3, [r7, #28]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d003      	beq.n	8000602 <MX_BlueNRG_MS_Init+0x92>
		printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 80005fa:	69f9      	ldr	r1, [r7, #28]
 80005fc:	4835      	ldr	r0, [pc, #212]	@ (80006d4 <MX_BlueNRG_MS_Init+0x164>)
 80005fe:	f004 fe0d 	bl	800521c <iprintf>
	}

	ret = aci_gatt_init();
 8000602:	f003 fd12 	bl	800402a <aci_gatt_init>
 8000606:	4603      	mov	r3, r0
 8000608:	61fb      	str	r3, [r7, #28]
	if (ret) {
 800060a:	69fb      	ldr	r3, [r7, #28]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d002      	beq.n	8000616 <MX_BlueNRG_MS_Init+0xa6>
		printf("GATT_Init failed.\n");
 8000610:	4831      	ldr	r0, [pc, #196]	@ (80006d8 <MX_BlueNRG_MS_Init+0x168>)
 8000612:	f004 fe73 	bl	80052fc <puts>
	}

	if (bnrg_expansion_board == IDB05A1) {
 8000616:	4b2e      	ldr	r3, [pc, #184]	@ (80006d0 <MX_BlueNRG_MS_Init+0x160>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d10f      	bne.n	800063e <MX_BlueNRG_MS_Init+0xce>
		ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800061e:	f107 020a 	add.w	r2, r7, #10
 8000622:	1dbb      	adds	r3, r7, #6
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	4613      	mov	r3, r2
 800062e:	2207      	movs	r2, #7
 8000630:	2100      	movs	r1, #0
 8000632:	2001      	movs	r0, #1
 8000634:	f003 fb1e 	bl	8003c74 <aci_gap_init_IDB05A1>
 8000638:	4603      	mov	r3, r0
 800063a:	61fb      	str	r3, [r7, #28]
 800063c:	e009      	b.n	8000652 <MX_BlueNRG_MS_Init+0xe2>
	}
	else {
		ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800063e:	1dbb      	adds	r3, r7, #6
 8000640:	f107 0208 	add.w	r2, r7, #8
 8000644:	f107 010a 	add.w	r1, r7, #10
 8000648:	2001      	movs	r0, #1
 800064a:	f003 fb63 	bl	8003d14 <aci_gap_init_IDB04A1>
 800064e:	4603      	mov	r3, r0
 8000650:	61fb      	str	r3, [r7, #28]
	}

	if (ret != BLE_STATUS_SUCCESS) {
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d002      	beq.n	800065e <MX_BlueNRG_MS_Init+0xee>
		printf("GAP_Init failed.\n");
 8000658:	4820      	ldr	r0, [pc, #128]	@ (80006dc <MX_BlueNRG_MS_Init+0x16c>)
 800065a:	f004 fe4f 	bl	80052fc <puts>
	}

	ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 800065e:	2301      	movs	r3, #1
 8000660:	9303      	str	r3, [sp, #12]
 8000662:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <MX_BlueNRG_MS_Init+0x170>)
 8000664:	9302      	str	r3, [sp, #8]
 8000666:	2300      	movs	r3, #0
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	2310      	movs	r3, #16
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2307      	movs	r3, #7
 8000670:	2200      	movs	r2, #0
 8000672:	2100      	movs	r1, #0
 8000674:	2001      	movs	r0, #1
 8000676:	f003 fc81 	bl	8003f7c <aci_gap_set_auth_requirement>
 800067a:	4603      	mov	r3, r0
 800067c:	61fb      	str	r3, [r7, #28]
									 7,
									 16,
									 USE_FIXED_PIN_FOR_PAIRING,
									 123456,
									 BONDING);
	if (ret == BLE_STATUS_SUCCESS) {
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d102      	bne.n	800068a <MX_BlueNRG_MS_Init+0x11a>
		printf("BLE Stack Initialized.\n");
 8000684:	4817      	ldr	r0, [pc, #92]	@ (80006e4 <MX_BlueNRG_MS_Init+0x174>)
 8000686:	f004 fe39 	bl	80052fc <puts>
	}

	printf("SERVER: BLE Stack Initialized\n");
 800068a:	4817      	ldr	r0, [pc, #92]	@ (80006e8 <MX_BlueNRG_MS_Init+0x178>)
 800068c:	f004 fe36 	bl	80052fc <puts>
	ret = Add_Sample_Service();
 8000690:	f000 f8a6 	bl	80007e0 <Add_Sample_Service>
 8000694:	4603      	mov	r3, r0
 8000696:	61fb      	str	r3, [r7, #28]

	if (ret == BLE_STATUS_SUCCESS){
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d103      	bne.n	80006a6 <MX_BlueNRG_MS_Init+0x136>
		printf("Service added successfully.\n");
 800069e:	4813      	ldr	r0, [pc, #76]	@ (80006ec <MX_BlueNRG_MS_Init+0x17c>)
 80006a0:	f004 fe2c 	bl	80052fc <puts>
 80006a4:	e002      	b.n	80006ac <MX_BlueNRG_MS_Init+0x13c>
	} else {
		printf("Error while adding service.\n");
 80006a6:	4812      	ldr	r0, [pc, #72]	@ (80006f0 <MX_BlueNRG_MS_Init+0x180>)
 80006a8:	f004 fe28 	bl	80052fc <puts>
	}

	/* Set output power level */
	ret = aci_hal_set_tx_power_level(1,4);
 80006ac:	2104      	movs	r1, #4
 80006ae:	2001      	movs	r0, #1
 80006b0:	f003 ff6c 	bl	800458c <aci_hal_set_tx_power_level>
 80006b4:	4603      	mov	r3, r0
 80006b6:	61fb      	str	r3, [r7, #28]

	/* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

	/* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	08005fd4 	.word	0x08005fd4
 80006c4:	20000000 	.word	0x20000000
 80006c8:	08000b11 	.word	0x08000b11
 80006cc:	08005f08 	.word	0x08005f08
 80006d0:	2000009c 	.word	0x2000009c
 80006d4:	08005f1c 	.word	0x08005f1c
 80006d8:	08005f3c 	.word	0x08005f3c
 80006dc:	08005f50 	.word	0x08005f50
 80006e0:	0001e240 	.word	0x0001e240
 80006e4:	08005f64 	.word	0x08005f64
 80006e8:	08005f7c 	.word	0x08005f7c
 80006ec:	08005f9c 	.word	0x08005f9c
 80006f0:	08005fb8 	.word	0x08005fb8

080006f4 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 80006f8:	f000 f812 	bl	8000720 <User_Process>
  hci_user_evt_proc();
 80006fc:	f004 fa7c 	bl	8004bf8 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}

08000704 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000708:	2101      	movs	r1, #1
 800070a:	2000      	movs	r0, #0
 800070c:	f001 f8b2 	bl	8001874 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8000710:	2000      	movs	r0, #0
 8000712:	f001 f845 	bl	80017a0 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 8000716:	2000      	movs	r0, #0
 8000718:	f001 f962 	bl	80019e0 <BSP_COM_Init>
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}

08000720 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8000720:	b5b0      	push	{r4, r5, r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
  if (set_connectable)
 8000726:	4b21      	ldr	r3, [pc, #132]	@ (80007ac <User_Process+0x8c>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2b00      	cmp	r3, #0
 800072e:	d00b      	beq.n	8000748 <User_Process+0x28>
  {
    /* Establish connection with remote device */
    Make_Connection();
 8000730:	f000 f8c8 	bl	80008c4 <Make_Connection>
    set_connectable = FALSE;
 8000734:	4b1d      	ldr	r3, [pc, #116]	@ (80007ac <User_Process+0x8c>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
    user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 800073a:	2000      	movs	r0, #0
 800073c:	f001 f8ee 	bl	800191c <BSP_PB_GetState>
 8000740:	4603      	mov	r3, r0
 8000742:	b2da      	uxtb	r2, r3
 8000744:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <User_Process+0x90>)
 8000746:	701a      	strb	r2, [r3, #0]
  }

  /* Check if the User Button has been pushed */
  if (user_button_pressed)
 8000748:	4b1a      	ldr	r3, [pc, #104]	@ (80007b4 <User_Process+0x94>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	d027      	beq.n	80007a2 <User_Process+0x82>
  {
    /* Debouncing */
    HAL_Delay(50);
 8000752:	2032      	movs	r0, #50	@ 0x32
 8000754:	f001 fa88 	bl	8001c68 <HAL_Delay>

    /* Wait until the User Button is released */
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);
 8000758:	bf00      	nop
 800075a:	2000      	movs	r0, #0
 800075c:	f001 f8de 	bl	800191c <BSP_PB_GetState>
 8000760:	4602      	mov	r2, r0
 8000762:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <User_Process+0x90>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b00      	cmp	r3, #0
 800076a:	bf0c      	ite	eq
 800076c:	2301      	moveq	r3, #1
 800076e:	2300      	movne	r3, #0
 8000770:	b2db      	uxtb	r3, r3
 8000772:	429a      	cmp	r2, r3
 8000774:	d0f1      	beq.n	800075a <User_Process+0x3a>

    /* Debouncing */
    HAL_Delay(50);
 8000776:	2032      	movs	r0, #50	@ 0x32
 8000778:	f001 fa76 	bl	8001c68 <HAL_Delay>

    if (connected)
 800077c:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <User_Process+0x98>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d00b      	beq.n	800079c <User_Process+0x7c>
    {
      /* Send a toggle command to the remote device */
      uint8_t data[20] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J'};
 8000784:	4b0d      	ldr	r3, [pc, #52]	@ (80007bc <User_Process+0x9c>)
 8000786:	1d3c      	adds	r4, r7, #4
 8000788:	461d      	mov	r5, r3
 800078a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800078c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078e:	682b      	ldr	r3, [r5, #0]
 8000790:	6023      	str	r3, [r4, #0]
      sendData(data, sizeof(data));
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2114      	movs	r1, #20
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f8e4 	bl	8000964 <sendData>
                                * is called in main().
                                * E.g. it can be enabled for debugging. */
    }

    /* Reset the User Button flag */
    user_button_pressed = 0;
 800079c:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <User_Process+0x94>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
  }
}
 80007a2:	bf00      	nop
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bdb0      	pop	{r4, r5, r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000002 	.word	0x20000002
 80007b0:	20000000 	.word	0x20000000
 80007b4:	2000009d 	.word	0x2000009d
 80007b8:	200000a0 	.word	0x200000a0
 80007bc:	08005fdc 	.word	0x08005fdc

080007c0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 80007ca:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <BSP_PB_Callback+0x1c>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	701a      	strb	r2, [r3, #0]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	2000009d 	.word	0x2000009d

080007e0 <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b095      	sub	sp, #84	@ 0x54
 80007e4:	af06      	add	r7, sp, #24
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */

  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 80007e6:	4b31      	ldr	r3, [pc, #196]	@ (80008ac <Add_Sample_Service+0xcc>)
 80007e8:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80007ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 80007f2:	4b2f      	ldr	r3, [pc, #188]	@ (80008b0 <Add_Sample_Service+0xd0>)
 80007f4:	f107 0414 	add.w	r4, r7, #20
 80007f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 80007fe:	4b2d      	ldr	r3, [pc, #180]	@ (80008b4 <Add_Sample_Service+0xd4>)
 8000800:	1d3c      	adds	r4, r7, #4
 8000802:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000804:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 8000808:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800080c:	4b2a      	ldr	r3, [pc, #168]	@ (80008b8 <Add_Sample_Service+0xd8>)
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	2307      	movs	r3, #7
 8000812:	2201      	movs	r2, #1
 8000814:	2002      	movs	r0, #2
 8000816:	f003 fc2b 	bl	8004070 <aci_gatt_add_serv>
 800081a:	4603      	mov	r3, r0
 800081c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000820:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000824:	2b00      	cmp	r3, #0
 8000826:	d136      	bne.n	8000896 <Add_Sample_Service+0xb6>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 8000828:	4b23      	ldr	r3, [pc, #140]	@ (80008b8 <Add_Sample_Service+0xd8>)
 800082a:	8818      	ldrh	r0, [r3, #0]
 800082c:	f107 0214 	add.w	r2, r7, #20
 8000830:	4b22      	ldr	r3, [pc, #136]	@ (80008bc <Add_Sample_Service+0xdc>)
 8000832:	9305      	str	r3, [sp, #20]
 8000834:	2301      	movs	r3, #1
 8000836:	9304      	str	r3, [sp, #16]
 8000838:	2310      	movs	r3, #16
 800083a:	9303      	str	r3, [sp, #12]
 800083c:	2300      	movs	r3, #0
 800083e:	9302      	str	r3, [sp, #8]
 8000840:	2300      	movs	r3, #0
 8000842:	9301      	str	r3, [sp, #4]
 8000844:	2310      	movs	r3, #16
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	2314      	movs	r3, #20
 800084a:	2102      	movs	r1, #2
 800084c:	f003 fc99 	bl	8004182 <aci_gatt_add_char>
 8000850:	4603      	mov	r3, r0
 8000852:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                           16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000856:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800085a:	2b00      	cmp	r3, #0
 800085c:	d11d      	bne.n	800089a <Add_Sample_Service+0xba>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 800085e:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <Add_Sample_Service+0xd8>)
 8000860:	8818      	ldrh	r0, [r3, #0]
 8000862:	1d3a      	adds	r2, r7, #4
 8000864:	4b16      	ldr	r3, [pc, #88]	@ (80008c0 <Add_Sample_Service+0xe0>)
 8000866:	9305      	str	r3, [sp, #20]
 8000868:	2301      	movs	r3, #1
 800086a:	9304      	str	r3, [sp, #16]
 800086c:	2310      	movs	r3, #16
 800086e:	9303      	str	r3, [sp, #12]
 8000870:	2301      	movs	r3, #1
 8000872:	9302      	str	r3, [sp, #8]
 8000874:	2300      	movs	r3, #0
 8000876:	9301      	str	r3, [sp, #4]
 8000878:	230c      	movs	r3, #12
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	2314      	movs	r3, #20
 800087e:	2102      	movs	r1, #2
 8000880:	f003 fc7f 	bl	8004182 <aci_gatt_add_char>
 8000884:	4603      	mov	r3, r0
 8000886:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                           16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800088a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800088e:	2b00      	cmp	r3, #0
 8000890:	d105      	bne.n	800089e <Add_Sample_Service+0xbe>

  PRINTF("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS;
 8000892:	2300      	movs	r3, #0
 8000894:	e005      	b.n	80008a2 <Add_Sample_Service+0xc2>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000896:	bf00      	nop
 8000898:	e002      	b.n	80008a0 <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800089a:	bf00      	nop
 800089c:	e000      	b.n	80008a0 <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800089e:	bf00      	nop

fail:
  PRINTF("Error while adding Sample Service.\n");
  return BLE_STATUS_ERROR ;
 80008a0:	2347      	movs	r3, #71	@ 0x47
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	373c      	adds	r7, #60	@ 0x3c
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd90      	pop	{r4, r7, pc}
 80008aa:	bf00      	nop
 80008ac:	08005ff0 	.word	0x08005ff0
 80008b0:	08006000 	.word	0x08006000
 80008b4:	08006010 	.word	0x08006010
 80008b8:	200000b0 	.word	0x200000b0
 80008bc:	200000b2 	.word	0x200000b2
 80008c0:	200000b4 	.word	0x200000b4

080008c4 <Make_Connection>:
 * @brief  Make the device connectable
 * @param  None
 * @retval None
 */
void Make_Connection(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	@ 0x30
 80008c8:	af08      	add	r7, sp, #32
	tBleStatus ret;

	const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'A','l','l','e','r','S','p','e','X'};
 80008ca:	4a12      	ldr	r2, [pc, #72]	@ (8000914 <Make_Connection+0x50>)
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80008d0:	c303      	stmia	r3!, {r0, r1}
 80008d2:	801a      	strh	r2, [r3, #0]

	/* disable scan response */
	hci_le_set_scan_resp_data(0,NULL);
 80008d4:	2100      	movs	r1, #0
 80008d6:	2000      	movs	r0, #0
 80008d8:	f003 ff39 	bl	800474e <hci_le_set_scan_resp_data>
	/*
	Advertising_Event_Type, Adv_Interval_Min, Adv_Interval_Max, Address_Type, Adv_Filter_Policy,
	Local_Name_Length, Local_Name, Service_Uuid_Length, Service_Uuid_List, Slave_Conn_Interval_Min,
	Slave_Conn_Interval_Max
	*/
	ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 80008dc:	2300      	movs	r3, #0
 80008de:	9306      	str	r3, [sp, #24]
 80008e0:	2300      	movs	r3, #0
 80008e2:	9305      	str	r3, [sp, #20]
 80008e4:	2300      	movs	r3, #0
 80008e6:	9304      	str	r3, [sp, #16]
 80008e8:	2300      	movs	r3, #0
 80008ea:	9303      	str	r3, [sp, #12]
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	9302      	str	r3, [sp, #8]
 80008f0:	230d      	movs	r3, #13
 80008f2:	9301      	str	r3, [sp, #4]
 80008f4:	2300      	movs	r3, #0
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	2300      	movs	r3, #0
 80008fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80008fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000902:	2000      	movs	r0, #0
 8000904:	f003 fa50 	bl	8003da8 <aci_gap_set_discoverable>
 8000908:	4603      	mov	r3, r0
 800090a:	73fb      	strb	r3, [r7, #15]
							   NO_WHITE_LIST_USE, 13, local_name, 0, NULL, 0, 0);
	PRINTF("%d\n",ret);
}
 800090c:	bf00      	nop
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	08006020 	.word	0x08006020

08000918 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	70fb      	strb	r3, [r7, #3]
  BSP_LED_Toggle(LED2);
 8000924:	2000      	movs	r0, #0
 8000926:	f000 ff4d 	bl	80017c4 <BSP_LED_Toggle>

  for(int i = 0; i < Nb_bytes; i++) {
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	e009      	b.n	8000944 <receiveData+0x2c>
    printf("%c", data_buffer[i]);
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	4618      	mov	r0, r3
 800093a:	f004 fc81 	bl	8005240 <putchar>
  for(int i = 0; i < Nb_bytes; i++) {
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	3301      	adds	r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	78fb      	ldrb	r3, [r7, #3]
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	429a      	cmp	r2, r3
 800094a:	dbf1      	blt.n	8000930 <receiveData+0x18>
  }
  fflush(stdout);
 800094c:	4b04      	ldr	r3, [pc, #16]	@ (8000960 <receiveData+0x48>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	4618      	mov	r0, r3
 8000954:	f004 fb8c 	bl	8005070 <fflush>
}
 8000958:	bf00      	nop
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000030 	.word	0x20000030

08000964 <sendData>:
 * @param  data_buffer : pointer to data to be sent
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af02      	add	r7, sp, #8
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	460b      	mov	r3, r1
 800096e:	70fb      	strb	r3, [r7, #3]
  if(BLE_Role == SERVER) {
 8000970:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <sendData+0x4c>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d10b      	bne.n	8000990 <sendData+0x2c>
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);
 8000978:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <sendData+0x50>)
 800097a:	8818      	ldrh	r0, [r3, #0]
 800097c:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <sendData+0x54>)
 800097e:	8819      	ldrh	r1, [r3, #0]
 8000980:	78fa      	ldrb	r2, [r7, #3]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	4613      	mov	r3, r2
 8000988:	2200      	movs	r2, #0
 800098a:	f003 fcc5 	bl	8004318 <aci_gatt_update_char_value>
  }
  else {
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
  }
}
 800098e:	e00a      	b.n	80009a6 <sendData+0x42>
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 8000990:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <sendData+0x58>)
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	b298      	uxth	r0, r3
 8000996:	4b0a      	ldr	r3, [pc, #40]	@ (80009c0 <sendData+0x5c>)
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	3301      	adds	r3, #1
 800099c:	b299      	uxth	r1, r3
 800099e:	78fa      	ldrb	r2, [r7, #3]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f003 fd49 	bl	8004438 <aci_gatt_write_without_response>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000001 	.word	0x20000001
 80009b4:	200000b0 	.word	0x200000b0
 80009b8:	200000b2 	.word	0x200000b2
 80009bc:	200000a4 	.word	0x200000a4
 80009c0:	200000ae 	.word	0x200000ae

080009c4 <Attribute_Modified_CB>:
 * @param  data_length : size of the modified attribute data
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	603a      	str	r2, [r7, #0]
 80009ce:	80fb      	strh	r3, [r7, #6]
 80009d0:	460b      	mov	r3, r1
 80009d2:	717b      	strb	r3, [r7, #5]
  if(handle == RXCharHandle + 1){
 80009d4:	88fa      	ldrh	r2, [r7, #6]
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <Attribute_Modified_CB+0x4c>)
 80009d8:	881b      	ldrh	r3, [r3, #0]
 80009da:	3301      	adds	r3, #1
 80009dc:	429a      	cmp	r2, r3
 80009de:	d105      	bne.n	80009ec <Attribute_Modified_CB+0x28>
    receiveData(att_data, data_length);
 80009e0:	797b      	ldrb	r3, [r7, #5]
 80009e2:	4619      	mov	r1, r3
 80009e4:	6838      	ldr	r0, [r7, #0]
 80009e6:	f7ff ff97 	bl	8000918 <receiveData>
  } else if (handle == TXCharHandle + 2) {
    if(att_data[0] == 0x01)
      notification_enabled = TRUE;
  }
}
 80009ea:	e00c      	b.n	8000a06 <Attribute_Modified_CB+0x42>
  } else if (handle == TXCharHandle + 2) {
 80009ec:	88fa      	ldrh	r2, [r7, #6]
 80009ee:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <Attribute_Modified_CB+0x50>)
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	3302      	adds	r3, #2
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d106      	bne.n	8000a06 <Attribute_Modified_CB+0x42>
    if(att_data[0] == 0x01)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d102      	bne.n	8000a06 <Attribute_Modified_CB+0x42>
      notification_enabled = TRUE;
 8000a00:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <Attribute_Modified_CB+0x54>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	701a      	strb	r2, [r3, #0]
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200000b4 	.word	0x200000b4
 8000a14:	200000b2 	.word	0x200000b2
 8000a18:	200000a6 	.word	0x200000a6

08000a1c <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	460b      	mov	r3, r1
 8000a26:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8000a28:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <GAP_ConnectionComplete_CB+0x54>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8000a2e:	4a11      	ldr	r2, [pc, #68]	@ (8000a74 <GAP_ConnectionComplete_CB+0x58>)
 8000a30:	887b      	ldrh	r3, [r7, #2]
 8000a32:	8013      	strh	r3, [r2, #0]

  printf("Connected to device:");
 8000a34:	4810      	ldr	r0, [pc, #64]	@ (8000a78 <GAP_ConnectionComplete_CB+0x5c>)
 8000a36:	f004 fbf1 	bl	800521c <iprintf>
  for(int i = 5; i > 0; i--){
 8000a3a:	2305      	movs	r3, #5
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	e00a      	b.n	8000a56 <GAP_ConnectionComplete_CB+0x3a>
    printf("%02X-", addr[i]);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480c      	ldr	r0, [pc, #48]	@ (8000a7c <GAP_ConnectionComplete_CB+0x60>)
 8000a4c:	f004 fbe6 	bl	800521c <iprintf>
  for(int i = 5; i > 0; i--){
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	dcf1      	bgt.n	8000a40 <GAP_ConnectionComplete_CB+0x24>
  }
  printf("%02X\n", addr[0]);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4619      	mov	r1, r3
 8000a62:	4807      	ldr	r0, [pc, #28]	@ (8000a80 <GAP_ConnectionComplete_CB+0x64>)
 8000a64:	f004 fbda 	bl	800521c <iprintf>
}
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200000a0 	.word	0x200000a0
 8000a74:	200000a4 	.word	0x200000a4
 8000a78:	0800602c 	.word	0x0800602c
 8000a7c:	08006044 	.word	0x08006044
 8000a80:	0800604c 	.word	0x0800604c

08000a84 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  connected = FALSE;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <GAP_DisconnectionComplete_CB+0x38>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]

  printf("Disconnected\n");
 8000a8e:	480c      	ldr	r0, [pc, #48]	@ (8000ac0 <GAP_DisconnectionComplete_CB+0x3c>)
 8000a90:	f004 fc34 	bl	80052fc <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8000a94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac4 <GAP_DisconnectionComplete_CB+0x40>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac8 <GAP_DisconnectionComplete_CB+0x44>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
  start_read_tx_char_handle = FALSE;
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8000acc <GAP_DisconnectionComplete_CB+0x48>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
  start_read_rx_char_handle = FALSE;
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad0 <GAP_DisconnectionComplete_CB+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	701a      	strb	r2, [r3, #0]
  end_read_tx_char_handle = FALSE;
 8000aac:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <GAP_DisconnectionComplete_CB+0x50>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
  end_read_rx_char_handle = FALSE;
 8000ab2:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <GAP_DisconnectionComplete_CB+0x54>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200000a0 	.word	0x200000a0
 8000ac0:	08006054 	.word	0x08006054
 8000ac4:	20000002 	.word	0x20000002
 8000ac8:	200000a6 	.word	0x200000a6
 8000acc:	200000a7 	.word	0x200000a7
 8000ad0:	200000a8 	.word	0x200000a8
 8000ad4:	200000a9 	.word	0x200000a9
 8000ad8:	200000aa 	.word	0x200000aa

08000adc <GATT_Notification_CB>:
 * @param  attr_len    Length of attribute value in the notification
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	603a      	str	r2, [r7, #0]
 8000ae6:	80fb      	strh	r3, [r7, #6]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	717b      	strb	r3, [r7, #5]
  if (attr_handle == tx_handle+1) {
 8000aec:	88fa      	ldrh	r2, [r7, #6]
 8000aee:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <GATT_Notification_CB+0x30>)
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	3301      	adds	r3, #1
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d104      	bne.n	8000b02 <GATT_Notification_CB+0x26>
    receiveData(attr_value, attr_len);
 8000af8:	797b      	ldrb	r3, [r7, #5]
 8000afa:	4619      	mov	r1, r3
 8000afc:	6838      	ldr	r0, [r7, #0]
 8000afe:	f7ff ff0b 	bl	8000918 <receiveData>
  }
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200000ac 	.word	0x200000ac

08000b10 <user_notify>:
 *         parsed.
 * @param  pData  Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08c      	sub	sp, #48	@ 0x30
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8000b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b1e:	3301      	adds	r3, #1
 8000b20:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(hci_pckt->type != HCI_EVENT_PKT)
 8000b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	f040 80e2 	bne.w	8000cf0 <user_notify+0x1e0>
    return;

  switch(event_pckt->evt){
 8000b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2bff      	cmp	r3, #255	@ 0xff
 8000b32:	d021      	beq.n	8000b78 <user_notify+0x68>
 8000b34:	2bff      	cmp	r3, #255	@ 0xff
 8000b36:	f300 80e0 	bgt.w	8000cfa <user_notify+0x1ea>
 8000b3a:	2b05      	cmp	r3, #5
 8000b3c:	d002      	beq.n	8000b44 <user_notify+0x34>
 8000b3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8000b40:	d003      	beq.n	8000b4a <user_notify+0x3a>
 8000b42:	e0da      	b.n	8000cfa <user_notify+0x1ea>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8000b44:	f7ff ff9e 	bl	8000a84 <GAP_DisconnectionComplete_CB>
    }
    break;
 8000b48:	e0d7      	b.n	8000cfa <user_notify+0x1ea>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8000b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b4c:	3302      	adds	r3, #2
 8000b4e:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	f040 80cd 	bne.w	8000cf4 <user_notify+0x1e4>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	1d5a      	adds	r2, r3, #5
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4610      	mov	r0, r2
 8000b70:	f7ff ff54 	bl	8000a1c <GAP_ConnectionComplete_CB>
        }
        break;
 8000b74:	bf00      	nop
      }
    }
    break;
 8000b76:	e0bd      	b.n	8000cf4 <user_notify+0x1e4>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8000b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b7a:	3302      	adds	r3, #2
 8000b7c:	627b      	str	r3, [r7, #36]	@ 0x24
      switch(blue_evt->ecode){
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 8000b88:	2b11      	cmp	r3, #17
 8000b8a:	f200 80b5 	bhi.w	8000cf8 <user_notify+0x1e8>
 8000b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b94 <user_notify+0x84>)
 8000b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b94:	08000bdd 	.word	0x08000bdd
 8000b98:	08000cf9 	.word	0x08000cf9
 8000b9c:	08000cf9 	.word	0x08000cf9
 8000ba0:	08000cf9 	.word	0x08000cf9
 8000ba4:	08000cf9 	.word	0x08000cf9
 8000ba8:	08000cf9 	.word	0x08000cf9
 8000bac:	08000cf9 	.word	0x08000cf9
 8000bb0:	08000cf9 	.word	0x08000cf9
 8000bb4:	08000cf9 	.word	0x08000cf9
 8000bb8:	08000cf9 	.word	0x08000cf9
 8000bbc:	08000cf9 	.word	0x08000cf9
 8000bc0:	08000cf9 	.word	0x08000cf9
 8000bc4:	08000cf9 	.word	0x08000cf9
 8000bc8:	08000cf9 	.word	0x08000cf9
 8000bcc:	08000c1d 	.word	0x08000c1d
 8000bd0:	08000ca9 	.word	0x08000ca9
 8000bd4:	08000cf9 	.word	0x08000cf9
 8000bd8:	08000c3f 	.word	0x08000c3f

      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          if (bnrg_expansion_board == IDB05A1) {
 8000bdc:	4b48      	ldr	r3, [pc, #288]	@ (8000d00 <user_notify+0x1f0>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d10d      	bne.n	8000c00 <user_notify+0xf0>
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 8000be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be6:	3302      	adds	r3, #2
 8000be8:	617b      	str	r3, [r7, #20]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	885b      	ldrh	r3, [r3, #2]
 8000bee:	b298      	uxth	r0, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	7919      	ldrb	r1, [r3, #4]
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	3307      	adds	r3, #7
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	f7ff fee3 	bl	80009c4 <Attribute_Modified_CB>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
          }

        }
        break;
 8000bfe:	e076      	b.n	8000cee <user_notify+0x1de>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
 8000c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c02:	3302      	adds	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	885b      	ldrh	r3, [r3, #2]
 8000c0a:	b298      	uxth	r0, r3
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	7919      	ldrb	r1, [r3, #4]
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	3305      	adds	r3, #5
 8000c14:	461a      	mov	r2, r3
 8000c16:	f7ff fed5 	bl	80009c4 <Attribute_Modified_CB>
        break;
 8000c1a:	e068      	b.n	8000cee <user_notify+0x1de>
      case EVT_BLUE_GATT_NOTIFICATION:
        {
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c1e:	3302      	adds	r3, #2
 8000c20:	61fb      	str	r3, [r7, #28]
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000c28:	b298      	uxth	r0, r3
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	789b      	ldrb	r3, [r3, #2]
 8000c2e:	3b02      	subs	r3, #2
 8000c30:	b2d9      	uxtb	r1, r3
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3305      	adds	r3, #5
 8000c36:	461a      	mov	r2, r3
 8000c38:	f7ff ff50 	bl	8000adc <GATT_Notification_CB>
        }
        break;
 8000c3c:	e057      	b.n	8000cee <user_notify+0x1de>
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 8000c3e:	4b31      	ldr	r3, [pc, #196]	@ (8000d04 <user_notify+0x1f4>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d150      	bne.n	8000ce8 <user_notify+0x1d8>
          PRINTF("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");

          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
 8000c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c48:	3302      	adds	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8000c4c:	4b2e      	ldr	r3, [pc, #184]	@ (8000d08 <user_notify+0x1f8>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d011      	beq.n	8000c7a <user_notify+0x16a>
 8000c56:	4b2d      	ldr	r3, [pc, #180]	@ (8000d0c <user_notify+0x1fc>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d10c      	bne.n	8000c7a <user_notify+0x16a>
          {
            tx_handle = resp->attr_handle;
 8000c60:	6a3b      	ldr	r3, [r7, #32]
 8000c62:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	4b29      	ldr	r3, [pc, #164]	@ (8000d10 <user_notify+0x200>)
 8000c6a:	801a      	strh	r2, [r3, #0]
            printf("TX Char Handle %04X\n", tx_handle);
 8000c6c:	4b28      	ldr	r3, [pc, #160]	@ (8000d10 <user_notify+0x200>)
 8000c6e:	881b      	ldrh	r3, [r3, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	4828      	ldr	r0, [pc, #160]	@ (8000d14 <user_notify+0x204>)
 8000c74:	f004 fad2 	bl	800521c <iprintf>
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
          }
        }
        break;
 8000c78:	e036      	b.n	8000ce8 <user_notify+0x1d8>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8000c7a:	4b27      	ldr	r3, [pc, #156]	@ (8000d18 <user_notify+0x208>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d031      	beq.n	8000ce8 <user_notify+0x1d8>
 8000c84:	4b25      	ldr	r3, [pc, #148]	@ (8000d1c <user_notify+0x20c>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d12c      	bne.n	8000ce8 <user_notify+0x1d8>
            rx_handle = resp->attr_handle;
 8000c8e:	6a3b      	ldr	r3, [r7, #32]
 8000c90:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	4b22      	ldr	r3, [pc, #136]	@ (8000d20 <user_notify+0x210>)
 8000c98:	801a      	strh	r2, [r3, #0]
            printf("RX Char Handle %04X\n", rx_handle);
 8000c9a:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <user_notify+0x210>)
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4820      	ldr	r0, [pc, #128]	@ (8000d24 <user_notify+0x214>)
 8000ca2:	f004 fabb 	bl	800521c <iprintf>
        break;
 8000ca6:	e01f      	b.n	8000ce8 <user_notify+0x1d8>

      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
        if(BLE_Role == CLIENT) {
 8000ca8:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <user_notify+0x1f4>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d11d      	bne.n	8000cec <user_notify+0x1dc>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8000cb0:	4b15      	ldr	r3, [pc, #84]	@ (8000d08 <user_notify+0x1f8>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d008      	beq.n	8000ccc <user_notify+0x1bc>
 8000cba:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <user_notify+0x1fc>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d103      	bne.n	8000ccc <user_notify+0x1bc>
          {
            end_read_tx_char_handle = TRUE;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <user_notify+0x1fc>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	701a      	strb	r2, [r3, #0]
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            end_read_rx_char_handle = TRUE;
          }
        }
        break;
 8000cca:	e00f      	b.n	8000cec <user_notify+0x1dc>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8000ccc:	4b12      	ldr	r3, [pc, #72]	@ (8000d18 <user_notify+0x208>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00a      	beq.n	8000cec <user_notify+0x1dc>
 8000cd6:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <user_notify+0x20c>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d105      	bne.n	8000cec <user_notify+0x1dc>
            end_read_rx_char_handle = TRUE;
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <user_notify+0x20c>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]
        break;
 8000ce6:	e001      	b.n	8000cec <user_notify+0x1dc>
        break;
 8000ce8:	bf00      	nop
 8000cea:	e005      	b.n	8000cf8 <user_notify+0x1e8>
        break;
 8000cec:	bf00      	nop
      }
    }
    break;
 8000cee:	e003      	b.n	8000cf8 <user_notify+0x1e8>
    return;
 8000cf0:	bf00      	nop
 8000cf2:	e002      	b.n	8000cfa <user_notify+0x1ea>
    break;
 8000cf4:	bf00      	nop
 8000cf6:	e000      	b.n	8000cfa <user_notify+0x1ea>
    break;
 8000cf8:	bf00      	nop
  }
}
 8000cfa:	3730      	adds	r7, #48	@ 0x30
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	2000009c 	.word	0x2000009c
 8000d04:	20000001 	.word	0x20000001
 8000d08:	200000a7 	.word	0x200000a7
 8000d0c:	200000a9 	.word	0x200000a9
 8000d10:	200000ac 	.word	0x200000ac
 8000d14:	08006064 	.word	0x08006064
 8000d18:	200000a8 	.word	0x200000a8
 8000d1c:	200000aa 	.word	0x200000aa
 8000d20:	200000ae 	.word	0x200000ae
 8000d24:	0800607c 	.word	0x0800607c

08000d28 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	4b1e      	ldr	r3, [pc, #120]	@ (8000db0 <HCI_TL_SPI_Init+0x88>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d38:	4a1d      	ldr	r2, [pc, #116]	@ (8000db0 <HCI_TL_SPI_Init+0x88>)
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d40:	4b1b      	ldr	r3, [pc, #108]	@ (8000db0 <HCI_TL_SPI_Init+0x88>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d50:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8000d5a:	f107 030c 	add.w	r3, r7, #12
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4814      	ldr	r0, [pc, #80]	@ (8000db4 <HCI_TL_SPI_Init+0x8c>)
 8000d62:	f001 f909 	bl	8001f78 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8000d66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	480d      	ldr	r0, [pc, #52]	@ (8000db4 <HCI_TL_SPI_Init+0x8c>)
 8000d80:	f001 f8fa 	bl	8001f78 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8000d84:	2302      	movs	r3, #2
 8000d86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4806      	ldr	r0, [pc, #24]	@ (8000db4 <HCI_TL_SPI_Init+0x8c>)
 8000d9c:	f001 f8ec 	bl	8001f78 <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 8000da0:	f000 fb22 	bl	80013e8 <BSP_SPI1_Init>
 8000da4:	4603      	mov	r3, r0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3720      	adds	r7, #32
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020000 	.word	0x40020000

08000db8 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	4807      	ldr	r0, [pc, #28]	@ (8000ddc <HCI_TL_SPI_DeInit+0x24>)
 8000dc0:	f001 fa5e 	bl	8002280 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	4805      	ldr	r0, [pc, #20]	@ (8000ddc <HCI_TL_SPI_DeInit+0x24>)
 8000dc8:	f001 fa5a 	bl	8002280 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8000dcc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dd0:	4802      	ldr	r0, [pc, #8]	@ (8000ddc <HCI_TL_SPI_DeInit+0x24>)
 8000dd2:	f001 fa55 	bl	8002280 <HAL_GPIO_DeInit>
  return 0;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40020000 	.word	0x40020000

08000de0 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	2102      	movs	r1, #2
 8000de8:	480b      	ldr	r0, [pc, #44]	@ (8000e18 <HCI_TL_SPI_Reset+0x38>)
 8000dea:	f001 fb45 	bl	8002478 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000df4:	4808      	ldr	r0, [pc, #32]	@ (8000e18 <HCI_TL_SPI_Reset+0x38>)
 8000df6:	f001 fb3f 	bl	8002478 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000dfa:	2005      	movs	r0, #5
 8000dfc:	f000 ff34 	bl	8001c68 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e06:	4804      	ldr	r0, [pc, #16]	@ (8000e18 <HCI_TL_SPI_Reset+0x38>)
 8000e08:	f001 fb36 	bl	8002478 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000e0c:	2005      	movs	r0, #5
 8000e0e:	f000 ff2b 	bl	8001c68 <HAL_Delay>
  return 0;
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40020000 	.word	0x40020000

08000e1c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8000e2c:	23ff      	movs	r3, #255	@ 0xff
 8000e2e:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8000e30:	4a25      	ldr	r2, [pc, #148]	@ (8000ec8 <HCI_TL_SPI_Receive+0xac>)
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e3a:	6018      	str	r0, [r3, #0]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2102      	movs	r1, #2
 8000e44:	4821      	ldr	r0, [pc, #132]	@ (8000ecc <HCI_TL_SPI_Receive+0xb0>)
 8000e46:	f001 fb17 	bl	8002478 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000e4a:	f107 010c 	add.w	r1, r7, #12
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	2205      	movs	r2, #5
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 faf7 	bl	8001448 <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 8000e5a:	7b3b      	ldrb	r3, [r7, #12]
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d129      	bne.n	8000eb4 <HCI_TL_SPI_Receive+0x98>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8000e60:	7c3b      	ldrb	r3, [r7, #16]
 8000e62:	021b      	lsls	r3, r3, #8
 8000e64:	b21a      	sxth	r2, r3
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	b21b      	sxth	r3, r3
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	b21b      	sxth	r3, r3
 8000e6e:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8000e70:	8bfb      	ldrh	r3, [r7, #30]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d01e      	beq.n	8000eb4 <HCI_TL_SPI_Receive+0x98>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8000e76:	8bfa      	ldrh	r2, [r7, #30]
 8000e78:	887b      	ldrh	r3, [r7, #2]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d901      	bls.n	8000e82 <HCI_TL_SPI_Receive+0x66>
        byte_count = size;
 8000e7e:	887b      	ldrh	r3, [r7, #2]
 8000e80:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	777b      	strb	r3, [r7, #29]
 8000e86:	e010      	b.n	8000eaa <HCI_TL_SPI_Receive+0x8e>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8000e88:	f107 011b 	add.w	r1, r7, #27
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	2201      	movs	r2, #1
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 fad8 	bl	8001448 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8000e98:	7f7b      	ldrb	r3, [r7, #29]
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	7efa      	ldrb	r2, [r7, #27]
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8000ea4:	7f7b      	ldrb	r3, [r7, #29]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	777b      	strb	r3, [r7, #29]
 8000eaa:	7f7b      	ldrb	r3, [r7, #29]
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	8bfa      	ldrh	r2, [r7, #30]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d8e9      	bhi.n	8000e88 <HCI_TL_SPI_Receive+0x6c>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	4804      	ldr	r0, [pc, #16]	@ (8000ecc <HCI_TL_SPI_Receive+0xb0>)
 8000eba:	f001 fadd 	bl	8002478 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8000ebe:	7f7b      	ldrb	r3, [r7, #29]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3720      	adds	r7, #32
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	08006094 	.word	0x08006094
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8000edc:	4a23      	ldr	r2, [pc, #140]	@ (8000f6c <HCI_TL_SPI_Send+0x9c>)
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ee6:	6018      	str	r0, [r3, #0]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8000eec:	f000 feb0 	bl	8001c50 <HAL_GetTick>
 8000ef0:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2102      	movs	r1, #2
 8000efa:	481d      	ldr	r0, [pc, #116]	@ (8000f70 <HCI_TL_SPI_Send+0xa0>)
 8000efc:	f001 fabc 	bl	8002478 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000f00:	f107 0108 	add.w	r1, r7, #8
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	2205      	movs	r2, #5
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 fa9c 	bl	8001448 <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 8000f10:	7a3b      	ldrb	r3, [r7, #8]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d10f      	bne.n	8000f36 <HCI_TL_SPI_Send+0x66>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8000f16:	7a7b      	ldrb	r3, [r7, #9]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	887b      	ldrh	r3, [r7, #2]
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d806      	bhi.n	8000f2e <HCI_TL_SPI_Send+0x5e>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8000f20:	887b      	ldrh	r3, [r7, #2]
 8000f22:	461a      	mov	r2, r3
 8000f24:	4913      	ldr	r1, [pc, #76]	@ (8000f74 <HCI_TL_SPI_Send+0xa4>)
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f000 fa8e 	bl	8001448 <BSP_SPI1_SendRecv>
 8000f2c:	e006      	b.n	8000f3c <HCI_TL_SPI_Send+0x6c>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8000f2e:	f06f 0301 	mvn.w	r3, #1
 8000f32:	61fb      	str	r3, [r7, #28]
 8000f34:	e002      	b.n	8000f3c <HCI_TL_SPI_Send+0x6c>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2102      	movs	r1, #2
 8000f40:	480b      	ldr	r0, [pc, #44]	@ (8000f70 <HCI_TL_SPI_Send+0xa0>)
 8000f42:	f001 fa99 	bl	8002478 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8000f46:	f000 fe83 	bl	8001c50 <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d903      	bls.n	8000f5c <HCI_TL_SPI_Send+0x8c>
    {
      result = -3;
 8000f54:	f06f 0302 	mvn.w	r3, #2
 8000f58:	61fb      	str	r3, [r7, #28]
      break;
 8000f5a:	e002      	b.n	8000f62 <HCI_TL_SPI_Send+0x92>
    }
  } while(result < 0);
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	dbc7      	blt.n	8000ef2 <HCI_TL_SPI_Send+0x22>

  return result;
 8000f62:	69fb      	ldr	r3, [r7, #28]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	0800609c 	.word	0x0800609c
 8000f70:	40020000 	.word	0x40020000
 8000f74:	200000c0 	.word	0x200000c0

08000f78 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	4805      	ldr	r0, [pc, #20]	@ (8000f94 <IsDataAvailable+0x1c>)
 8000f80:	f001 fa62 	bl	8002448 <HAL_GPIO_ReadPin>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	bf0c      	ite	eq
 8000f8a:	2301      	moveq	r3, #1
 8000f8c:	2300      	movne	r3, #0
 8000f8e:	b2db      	uxtb	r3, r3
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40020000 	.word	0x40020000

08000f98 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8000f9e:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <hci_tl_lowlevel_init+0x54>)
 8000fa0:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8000fa2:	4b13      	ldr	r3, [pc, #76]	@ (8000ff0 <hci_tl_lowlevel_init+0x58>)
 8000fa4:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	@ (8000ff4 <hci_tl_lowlevel_init+0x5c>)
 8000fa8:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8000faa:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <hci_tl_lowlevel_init+0x60>)
 8000fac:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8000fae:	4b13      	ldr	r3, [pc, #76]	@ (8000ffc <hci_tl_lowlevel_init+0x64>)
 8000fb0:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8000fb2:	4b13      	ldr	r3, [pc, #76]	@ (8001000 <hci_tl_lowlevel_init+0x68>)
 8000fb4:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f003 fce5 	bl	8004988 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8000fbe:	f04f 61c0 	mov.w	r1, #100663296	@ 0x6000000
 8000fc2:	4810      	ldr	r0, [pc, #64]	@ (8001004 <hci_tl_lowlevel_init+0x6c>)
 8000fc4:	f000 ff9f 	bl	8001f06 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000fc8:	4a0f      	ldr	r2, [pc, #60]	@ (8001008 <hci_tl_lowlevel_init+0x70>)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	480d      	ldr	r0, [pc, #52]	@ (8001004 <hci_tl_lowlevel_init+0x6c>)
 8000fce:	f000 ff80 	bl	8001ed2 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2006      	movs	r0, #6
 8000fd8:	f000 ff45 	bl	8001e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000fdc:	2006      	movs	r0, #6
 8000fde:	f000 ff5e 	bl	8001e9e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8000fe2:	bf00      	nop
 8000fe4:	3720      	adds	r7, #32
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	08000d29 	.word	0x08000d29
 8000ff0:	08000db9 	.word	0x08000db9
 8000ff4:	08000ed1 	.word	0x08000ed1
 8000ff8:	08000e1d 	.word	0x08000e1d
 8000ffc:	08000de1 	.word	0x08000de1
 8001000:	08001489 	.word	0x08001489
 8001004:	200000b8 	.word	0x200000b8
 8001008:	0800100d 	.word	0x0800100d

0800100c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001010:	e005      	b.n	800101e <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001012:	2000      	movs	r0, #0
 8001014:	f003 fe1c 	bl	8004c50 <hci_notify_asynch_evt>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d105      	bne.n	800102a <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 800101e:	f7ff ffab 	bl	8000f78 <IsDataAvailable>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1f4      	bne.n	8001012 <hci_tl_lowlevel_isr+0x6>
 8001028:	e000      	b.n	800102c <hci_tl_lowlevel_isr+0x20>
    {
      return;
 800102a:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 800102c:	bd80      	pop	{r7, pc}

0800102e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b09a      	sub	sp, #104	@ 0x68
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001034:	f000 fda6 	bl	8001b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001038:	f000 f80a 	bl	8001050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103c:	f000 f89c 	bl	8001178 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001040:	f000 f870 	bl	8001124 <MX_USART2_UART_Init>
  MX_BlueNRG_MS_Init();
 8001044:	f7ff fa94 	bl	8000570 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_MS_Process();
 8001048:	f7ff fb54 	bl	80006f4 <MX_BlueNRG_MS_Process>
 800104c:	e7fc      	b.n	8001048 <main+0x1a>
	...

08001050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b094      	sub	sp, #80	@ 0x50
 8001054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001056:	f107 0320 	add.w	r3, r7, #32
 800105a:	2230      	movs	r2, #48	@ 0x30
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f004 fa2c 	bl	80054bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	4b28      	ldr	r3, [pc, #160]	@ (800111c <SystemClock_Config+0xcc>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107c:	4a27      	ldr	r2, [pc, #156]	@ (800111c <SystemClock_Config+0xcc>)
 800107e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001082:	6413      	str	r3, [r2, #64]	@ 0x40
 8001084:	4b25      	ldr	r3, [pc, #148]	@ (800111c <SystemClock_Config+0xcc>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001088:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001090:	2300      	movs	r3, #0
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	4b22      	ldr	r3, [pc, #136]	@ (8001120 <SystemClock_Config+0xd0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800109c:	4a20      	ldr	r2, [pc, #128]	@ (8001120 <SystemClock_Config+0xd0>)
 800109e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001120 <SystemClock_Config+0xd0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b0:	2302      	movs	r3, #2
 80010b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b4:	2301      	movs	r3, #1
 80010b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b8:	2310      	movs	r3, #16
 80010ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010bc:	2302      	movs	r3, #2
 80010be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c0:	2300      	movs	r3, #0
 80010c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010c4:	2308      	movs	r3, #8
 80010c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80010c8:	2340      	movs	r3, #64	@ 0x40
 80010ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010cc:	2302      	movs	r3, #2
 80010ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010d0:	2307      	movs	r3, #7
 80010d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d4:	f107 0320 	add.w	r3, r7, #32
 80010d8:	4618      	mov	r0, r3
 80010da:	f001 fa01 	bl	80024e0 <HAL_RCC_OscConfig>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010e4:	f000 f8c6 	bl	8001274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e8:	230f      	movs	r3, #15
 80010ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ec:	2302      	movs	r3, #2
 80010ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80010f0:	2390      	movs	r3, #144	@ 0x90
 80010f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f001 fc63 	bl	80029d0 <HAL_RCC_ClockConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001110:	f000 f8b0 	bl	8001274 <Error_Handler>
  }
}
 8001114:	bf00      	nop
 8001116:	3750      	adds	r7, #80	@ 0x50
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40023800 	.word	0x40023800
 8001120:	40007000 	.word	0x40007000

08001124 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001128:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <MX_USART2_UART_Init+0x4c>)
 800112a:	4a12      	ldr	r2, [pc, #72]	@ (8001174 <MX_USART2_UART_Init+0x50>)
 800112c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800112e:	4b10      	ldr	r3, [pc, #64]	@ (8001170 <MX_USART2_UART_Init+0x4c>)
 8001130:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001134:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <MX_USART2_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <MX_USART2_UART_Init+0x4c>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001142:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <MX_USART2_UART_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <MX_USART2_UART_Init+0x4c>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <MX_USART2_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <MX_USART2_UART_Init+0x4c>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	@ (8001170 <MX_USART2_UART_Init+0x4c>)
 800115c:	f002 f97e 	bl	800345c <HAL_UART_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001166:	f000 f885 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200001c0 	.word	0x200001c0
 8001174:	40004400 	.word	0x40004400

08001178 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	@ 0x28
 800117c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b36      	ldr	r3, [pc, #216]	@ (800126c <MX_GPIO_Init+0xf4>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a35      	ldr	r2, [pc, #212]	@ (800126c <MX_GPIO_Init+0xf4>)
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b33      	ldr	r3, [pc, #204]	@ (800126c <MX_GPIO_Init+0xf4>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b2f      	ldr	r3, [pc, #188]	@ (800126c <MX_GPIO_Init+0xf4>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	4a2e      	ldr	r2, [pc, #184]	@ (800126c <MX_GPIO_Init+0xf4>)
 80011b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ba:	4b2c      	ldr	r3, [pc, #176]	@ (800126c <MX_GPIO_Init+0xf4>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	4b28      	ldr	r3, [pc, #160]	@ (800126c <MX_GPIO_Init+0xf4>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	4a27      	ldr	r2, [pc, #156]	@ (800126c <MX_GPIO_Init+0xf4>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d6:	4b25      	ldr	r3, [pc, #148]	@ (800126c <MX_GPIO_Init+0xf4>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	4b21      	ldr	r3, [pc, #132]	@ (800126c <MX_GPIO_Init+0xf4>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a20      	ldr	r2, [pc, #128]	@ (800126c <MX_GPIO_Init+0xf4>)
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b1e      	ldr	r3, [pc, #120]	@ (800126c <MX_GPIO_Init+0xf4>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001204:	481a      	ldr	r0, [pc, #104]	@ (8001270 <MX_GPIO_Init+0xf8>)
 8001206:	f001 f937 	bl	8002478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800120a:	2301      	movs	r3, #1
 800120c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800120e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	4814      	ldr	r0, [pc, #80]	@ (8001270 <MX_GPIO_Init+0xf8>)
 8001220:	f000 feaa 	bl	8001f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8001224:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	480c      	ldr	r0, [pc, #48]	@ (8001270 <MX_GPIO_Init+0xf8>)
 800123e:	f000 fe9b 	bl	8001f78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	2006      	movs	r0, #6
 8001248:	f000 fe0d 	bl	8001e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800124c:	2006      	movs	r0, #6
 800124e:	f000 fe26 	bl	8001e9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	2028      	movs	r0, #40	@ 0x28
 8001258:	f000 fe05 	bl	8001e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800125c:	2028      	movs	r0, #40	@ 0x28
 800125e:	f000 fe1e 	bl	8001e9e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001262:	bf00      	nop
 8001264:	3728      	adds	r7, #40	@ 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800
 8001270:	40020000 	.word	0x40020000

08001274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001278:	b672      	cpsid	i
}
 800127a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <Error_Handler+0x8>

08001280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	4b10      	ldr	r3, [pc, #64]	@ (80012cc <HAL_MspInit+0x4c>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128e:	4a0f      	ldr	r2, [pc, #60]	@ (80012cc <HAL_MspInit+0x4c>)
 8001290:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001294:	6453      	str	r3, [r2, #68]	@ 0x44
 8001296:	4b0d      	ldr	r3, [pc, #52]	@ (80012cc <HAL_MspInit+0x4c>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	603b      	str	r3, [r7, #0]
 80012a6:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <HAL_MspInit+0x4c>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012aa:	4a08      	ldr	r2, [pc, #32]	@ (80012cc <HAL_MspInit+0x4c>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b2:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <HAL_MspInit+0x4c>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012be:	2007      	movs	r0, #7
 80012c0:	f000 fdc6 	bl	8001e50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40023800 	.word	0x40023800

080012d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	@ 0x28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a19      	ldr	r2, [pc, #100]	@ (8001354 <HAL_UART_MspInit+0x84>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d12b      	bne.n	800134a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	4b18      	ldr	r3, [pc, #96]	@ (8001358 <HAL_UART_MspInit+0x88>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fa:	4a17      	ldr	r2, [pc, #92]	@ (8001358 <HAL_UART_MspInit+0x88>)
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001300:	6413      	str	r3, [r2, #64]	@ 0x40
 8001302:	4b15      	ldr	r3, [pc, #84]	@ (8001358 <HAL_UART_MspInit+0x88>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <HAL_UART_MspInit+0x88>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	4a10      	ldr	r2, [pc, #64]	@ (8001358 <HAL_UART_MspInit+0x88>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6313      	str	r3, [r2, #48]	@ 0x30
 800131e:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <HAL_UART_MspInit+0x88>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800132a:	230c      	movs	r3, #12
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800133a:	2307      	movs	r3, #7
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	@ (800135c <HAL_UART_MspInit+0x8c>)
 8001346:	f000 fe17 	bl	8001f78 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800134a:	bf00      	nop
 800134c:	3728      	adds	r7, #40	@ 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40004400 	.word	0x40004400
 8001358:	40023800 	.word	0x40023800
 800135c:	40020000 	.word	0x40020000

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <NMI_Handler+0x4>

08001368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <HardFault_Handler+0x4>

08001370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <MemManage_Handler+0x4>

08001378 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <BusFault_Handler+0x4>

08001380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <UsageFault_Handler+0x4>

08001388 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b6:	f000 fc37 	bl	8001c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 80013c4:	4802      	ldr	r0, [pc, #8]	@ (80013d0 <EXTI0_IRQHandler+0x10>)
 80013c6:	f000 fdb3 	bl	8001f30 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200000b8 	.word	0x200000b8

080013d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80013d8:	4802      	ldr	r0, [pc, #8]	@ (80013e4 <EXTI15_10_IRQHandler+0x10>)
 80013da:	f000 fda9 	bl	8001f30 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000010 	.word	0x20000010

080013e8 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80013f2:	4b12      	ldr	r3, [pc, #72]	@ (800143c <BSP_SPI1_Init+0x54>)
 80013f4:	4a12      	ldr	r2, [pc, #72]	@ (8001440 <BSP_SPI1_Init+0x58>)
 80013f6:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80013f8:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <BSP_SPI1_Init+0x5c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	4911      	ldr	r1, [pc, #68]	@ (8001444 <BSP_SPI1_Init+0x5c>)
 8001400:	600a      	str	r2, [r1, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d114      	bne.n	8001430 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8001406:	480d      	ldr	r0, [pc, #52]	@ (800143c <BSP_SPI1_Init+0x54>)
 8001408:	f001 ff3e 	bl	8003288 <HAL_SPI_GetState>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10e      	bne.n	8001430 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8001412:	480a      	ldr	r0, [pc, #40]	@ (800143c <BSP_SPI1_Init+0x54>)
 8001414:	f000 f87c 	bl	8001510 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d108      	bne.n	8001430 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800141e:	4807      	ldr	r0, [pc, #28]	@ (800143c <BSP_SPI1_Init+0x54>)
 8001420:	f000 f83a 	bl	8001498 <MX_SPI1_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d002      	beq.n	8001430 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 800142a:	f06f 0307 	mvn.w	r3, #7
 800142e:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8001430:	687b      	ldr	r3, [r7, #4]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000208 	.word	0x20000208
 8001440:	40013000 	.word	0x40013000
 8001444:	20000260 	.word	0x20000260

08001448 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af02      	add	r7, sp, #8
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	4613      	mov	r3, r2
 8001454:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001460:	9200      	str	r2, [sp, #0]
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	68f9      	ldr	r1, [r7, #12]
 8001466:	4807      	ldr	r0, [pc, #28]	@ (8001484 <BSP_SPI1_SendRecv+0x3c>)
 8001468:	f001 fd65 	bl	8002f36 <HAL_SPI_TransmitReceive>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d002      	beq.n	8001478 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001472:	f06f 0305 	mvn.w	r3, #5
 8001476:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8001478:	697b      	ldr	r3, [r7, #20]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000208 	.word	0x20000208

08001488 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800148c:	f000 fbe0 	bl	8001c50 <HAL_GetTick>
 8001490:	4603      	mov	r3, r0
}
 8001492:	4618      	mov	r0, r3
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a19      	ldr	r2, [pc, #100]	@ (800150c <MX_SPI1_Init+0x74>)
 80014a8:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014b0:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014d0:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2218      	movs	r2, #24
 80014d6:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 10;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	220a      	movs	r2, #10
 80014ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f001 fc8d 	bl	8002e10 <HAL_SPI_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40013000 	.word	0x40013000

08001510 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	@ 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001518:	2300      	movs	r3, #0
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	4b2d      	ldr	r3, [pc, #180]	@ (80015d4 <SPI1_MspInit+0xc4>)
 800151e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001520:	4a2c      	ldr	r2, [pc, #176]	@ (80015d4 <SPI1_MspInit+0xc4>)
 8001522:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001526:	6453      	str	r3, [r2, #68]	@ 0x44
 8001528:	4b2a      	ldr	r3, [pc, #168]	@ (80015d4 <SPI1_MspInit+0xc4>)
 800152a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	4b26      	ldr	r3, [pc, #152]	@ (80015d4 <SPI1_MspInit+0xc4>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153c:	4a25      	ldr	r2, [pc, #148]	@ (80015d4 <SPI1_MspInit+0xc4>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6313      	str	r3, [r2, #48]	@ 0x30
 8001544:	4b23      	ldr	r3, [pc, #140]	@ (80015d4 <SPI1_MspInit+0xc4>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	4b1f      	ldr	r3, [pc, #124]	@ (80015d4 <SPI1_MspInit+0xc4>)
 8001556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001558:	4a1e      	ldr	r2, [pc, #120]	@ (80015d4 <SPI1_MspInit+0xc4>)
 800155a:	f043 0302 	orr.w	r3, r3, #2
 800155e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001560:	4b1c      	ldr	r3, [pc, #112]	@ (80015d4 <SPI1_MspInit+0xc4>)
 8001562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 800156c:	2340      	movs	r3, #64	@ 0x40
 800156e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 800157c:	2305      	movs	r3, #5
 800157e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	4814      	ldr	r0, [pc, #80]	@ (80015d8 <SPI1_MspInit+0xc8>)
 8001588:	f000 fcf6 	bl	8001f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 800158c:	2380      	movs	r3, #128	@ 0x80
 800158e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 800159c:	2305      	movs	r3, #5
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	480c      	ldr	r0, [pc, #48]	@ (80015d8 <SPI1_MspInit+0xc8>)
 80015a8:	f000 fce6 	bl	8001f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80015ac:	2308      	movs	r3, #8
 80015ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80015bc:	2305      	movs	r3, #5
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	4805      	ldr	r0, [pc, #20]	@ (80015dc <SPI1_MspInit+0xcc>)
 80015c8:	f000 fcd6 	bl	8001f78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80015cc:	bf00      	nop
 80015ce:	3728      	adds	r7, #40	@ 0x28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020000 	.word	0x40020000
 80015dc:	40020400 	.word	0x40020400

080015e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	e00a      	b.n	8001608 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015f2:	f3af 8000 	nop.w
 80015f6:	4601      	mov	r1, r0
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	60ba      	str	r2, [r7, #8]
 80015fe:	b2ca      	uxtb	r2, r1
 8001600:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	3301      	adds	r3, #1
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	429a      	cmp	r2, r3
 800160e:	dbf0      	blt.n	80015f2 <_read+0x12>
  }

  return len;
 8001610:	687b      	ldr	r3, [r7, #4]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	60f8      	str	r0, [r7, #12]
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	e009      	b.n	8001640 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	1c5a      	adds	r2, r3, #1
 8001630:	60ba      	str	r2, [r7, #8]
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f000 fa3f 	bl	8001ab8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3301      	adds	r3, #1
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	429a      	cmp	r2, r3
 8001646:	dbf1      	blt.n	800162c <_write+0x12>
  }
  return len;
 8001648:	687b      	ldr	r3, [r7, #4]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <_close>:

int _close(int file)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800165a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800165e:	4618      	mov	r0, r3
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800167a:	605a      	str	r2, [r3, #4]
  return 0;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <_isatty>:

int _isatty(int file)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c4:	4a14      	ldr	r2, [pc, #80]	@ (8001718 <_sbrk+0x5c>)
 80016c6:	4b15      	ldr	r3, [pc, #84]	@ (800171c <_sbrk+0x60>)
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d0:	4b13      	ldr	r3, [pc, #76]	@ (8001720 <_sbrk+0x64>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d8:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <_sbrk+0x64>)
 80016da:	4a12      	ldr	r2, [pc, #72]	@ (8001724 <_sbrk+0x68>)
 80016dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016de:	4b10      	ldr	r3, [pc, #64]	@ (8001720 <_sbrk+0x64>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d207      	bcs.n	80016fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016ec:	f003 ff34 	bl	8005558 <__errno>
 80016f0:	4603      	mov	r3, r0
 80016f2:	220c      	movs	r2, #12
 80016f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
 80016fa:	e009      	b.n	8001710 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016fc:	4b08      	ldr	r3, [pc, #32]	@ (8001720 <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001702:	4b07      	ldr	r3, [pc, #28]	@ (8001720 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	4a05      	ldr	r2, [pc, #20]	@ (8001720 <_sbrk+0x64>)
 800170c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170e:	68fb      	ldr	r3, [r7, #12]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20018000 	.word	0x20018000
 800171c:	00000400 	.word	0x00000400
 8001720:	20000264 	.word	0x20000264
 8001724:	200006f0 	.word	0x200006f0

08001728 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800172c:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <SystemInit+0x20>)
 800172e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001732:	4a05      	ldr	r2, [pc, #20]	@ (8001748 <SystemInit+0x20>)
 8001734:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001738:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800174c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001784 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001750:	f7ff ffea 	bl	8001728 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001754:	480c      	ldr	r0, [pc, #48]	@ (8001788 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001756:	490d      	ldr	r1, [pc, #52]	@ (800178c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001758:	4a0d      	ldr	r2, [pc, #52]	@ (8001790 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800175c:	e002      	b.n	8001764 <LoopCopyDataInit>

0800175e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001762:	3304      	adds	r3, #4

08001764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001768:	d3f9      	bcc.n	800175e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176a:	4a0a      	ldr	r2, [pc, #40]	@ (8001794 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800176c:	4c0a      	ldr	r4, [pc, #40]	@ (8001798 <LoopFillZerobss+0x22>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001770:	e001      	b.n	8001776 <LoopFillZerobss>

08001772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001774:	3204      	adds	r2, #4

08001776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001778:	d3fb      	bcc.n	8001772 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800177a:	f003 fef3 	bl	8005564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177e:	f7ff fc56 	bl	800102e <main>
  bx  lr    
 8001782:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001784:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800178c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001790:	08006114 	.word	0x08006114
  ldr r2, =_sbss
 8001794:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001798:	200006f0 	.word	0x200006f0

0800179c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800179c:	e7fe      	b.n	800179c <ADC_IRQHandler>
	...

080017a0 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	4a04      	ldr	r2, [pc, #16]	@ (80017c0 <BSP_LED_Init+0x20>)
 80017ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b2:	4798      	blx	r3
  return BSP_ERROR_NONE;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	080060bc 	.word	0x080060bc

080017c4 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	4a06      	ldr	r2, [pc, #24]	@ (80017ec <BSP_LED_Toggle+0x28>)
 80017d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d6:	2220      	movs	r2, #32
 80017d8:	4611      	mov	r1, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 fe65 	bl	80024aa <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000008 	.word	0x20000008

080017f0 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	4b1c      	ldr	r3, [pc, #112]	@ (800186c <LED_USER_GPIO_Init+0x7c>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	4a1b      	ldr	r2, [pc, #108]	@ (800186c <LED_USER_GPIO_Init+0x7c>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	@ 0x30
 8001806:	4b19      	ldr	r3, [pc, #100]	@ (800186c <LED_USER_GPIO_Init+0x7c>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001812:	f107 030c 	add.w	r3, r7, #12
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
 8001820:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	4b11      	ldr	r3, [pc, #68]	@ (800186c <LED_USER_GPIO_Init+0x7c>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	4a10      	ldr	r2, [pc, #64]	@ (800186c <LED_USER_GPIO_Init+0x7c>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6313      	str	r3, [r2, #48]	@ 0x30
 8001832:	4b0e      	ldr	r3, [pc, #56]	@ (800186c <LED_USER_GPIO_Init+0x7c>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	2120      	movs	r1, #32
 8001842:	480b      	ldr	r0, [pc, #44]	@ (8001870 <LED_USER_GPIO_Init+0x80>)
 8001844:	f000 fe18 	bl	8002478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8001848:	2320      	movs	r3, #32
 800184a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	2301      	movs	r3, #1
 800184e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	4619      	mov	r1, r3
 800185e:	4804      	ldr	r0, [pc, #16]	@ (8001870 <LED_USER_GPIO_Init+0x80>)
 8001860:	f000 fb8a 	bl	8001f78 <HAL_GPIO_Init>

}
 8001864:	bf00      	nop
 8001866:	3720      	adds	r7, #32
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40023800 	.word	0x40023800
 8001870:	40020000 	.word	0x40020000

08001874 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	460a      	mov	r2, r1
 800187e:	71fb      	strb	r3, [r7, #7]
 8001880:	4613      	mov	r3, r2
 8001882:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	4a1f      	ldr	r2, [pc, #124]	@ (8001908 <BSP_PB_Init+0x94>)
 800188c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001890:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8001892:	79bb      	ldrb	r3, [r7, #6]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d132      	bne.n	80018fe <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	4a1b      	ldr	r2, [pc, #108]	@ (800190c <BSP_PB_Init+0x98>)
 800189e:	441a      	add	r2, r3
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	491b      	ldr	r1, [pc, #108]	@ (8001910 <BSP_PB_Init+0x9c>)
 80018a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018a8:	4619      	mov	r1, r3
 80018aa:	4610      	mov	r0, r2
 80018ac:	f000 fb2b 	bl	8001f06 <HAL_EXTI_GetHandle>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80018b6:	f06f 0303 	mvn.w	r3, #3
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	e01f      	b.n	80018fe <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4a12      	ldr	r2, [pc, #72]	@ (800190c <BSP_PB_Init+0x98>)
 80018c4:	1898      	adds	r0, r3, r2
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	4a12      	ldr	r2, [pc, #72]	@ (8001914 <BSP_PB_Init+0xa0>)
 80018ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ce:	461a      	mov	r2, r3
 80018d0:	2100      	movs	r1, #0
 80018d2:	f000 fafe 	bl	8001ed2 <HAL_EXTI_RegisterCallback>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80018dc:	f06f 0303 	mvn.w	r3, #3
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	e00c      	b.n	80018fe <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80018e4:	2028      	movs	r0, #40	@ 0x28
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001918 <BSP_PB_Init+0xa4>)
 80018ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ee:	2200      	movs	r2, #0
 80018f0:	4619      	mov	r1, r3
 80018f2:	f000 fab8 	bl	8001e66 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80018f6:	2328      	movs	r3, #40	@ 0x28
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 fad0 	bl	8001e9e <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 80018fe:	68fb      	ldr	r3, [r7, #12]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	080060c0 	.word	0x080060c0
 800190c:	20000010 	.word	0x20000010
 8001910:	080060c4 	.word	0x080060c4
 8001914:	080060c8 	.word	0x080060c8
 8001918:	080060cc 	.word	0x080060cc

0800191c <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	4a09      	ldr	r2, [pc, #36]	@ (8001950 <BSP_PB_GetState+0x34>)
 800192a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f000 fd87 	bl	8002448 <HAL_GPIO_ReadPin>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	bf0c      	ite	eq
 8001940:	2301      	moveq	r3, #1
 8001942:	2300      	movne	r3, #0
 8001944:	b2db      	uxtb	r3, r3
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2000000c 	.word	0x2000000c

08001954 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001958:	2000      	movs	r0, #0
 800195a:	f7fe ff31 	bl	80007c0 <BSP_PB_Callback>
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	4b1a      	ldr	r3, [pc, #104]	@ (80019d8 <BUTTON_USER_GPIO_Init+0x74>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	4a19      	ldr	r2, [pc, #100]	@ (80019d8 <BUTTON_USER_GPIO_Init+0x74>)
 8001974:	f043 0304 	orr.w	r3, r3, #4
 8001978:	6313      	str	r3, [r2, #48]	@ 0x30
 800197a:	4b17      	ldr	r3, [pc, #92]	@ (80019d8 <BUTTON_USER_GPIO_Init+0x74>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001986:	f107 030c 	add.w	r3, r7, #12
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
 8001994:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <BUTTON_USER_GPIO_Init+0x74>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	4a0e      	ldr	r2, [pc, #56]	@ (80019d8 <BUTTON_USER_GPIO_Init+0x74>)
 80019a0:	f043 0304 	orr.w	r3, r3, #4
 80019a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a6:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <BUTTON_USER_GPIO_Init+0x74>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 80019b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019b8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 80019c2:	f107 030c 	add.w	r3, r7, #12
 80019c6:	4619      	mov	r1, r3
 80019c8:	4804      	ldr	r0, [pc, #16]	@ (80019dc <BUTTON_USER_GPIO_Init+0x78>)
 80019ca:	f000 fad5 	bl	8001f78 <HAL_GPIO_Init>

}
 80019ce:	bf00      	nop
 80019d0:	3720      	adds	r7, #32
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40020800 	.word	0x40020800

080019e0 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d903      	bls.n	80019fc <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019f4:	f06f 0301 	mvn.w	r3, #1
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	e025      	b.n	8001a48 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	79fa      	ldrb	r2, [r7, #7]
 8001a00:	4914      	ldr	r1, [pc, #80]	@ (8001a54 <BSP_COM_Init+0x74>)
 8001a02:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001a06:	4814      	ldr	r0, [pc, #80]	@ (8001a58 <BSP_COM_Init+0x78>)
 8001a08:	4613      	mov	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4403      	add	r3, r0
 8001a12:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8001a14:	79fa      	ldrb	r2, [r7, #7]
 8001a16:	4613      	mov	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001a58 <BSP_COM_Init+0x78>)
 8001a20:	4413      	add	r3, r2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 f864 	bl	8001af0 <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8001a28:	79fa      	ldrb	r2, [r7, #7]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4413      	add	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	4a09      	ldr	r2, [pc, #36]	@ (8001a58 <BSP_COM_Init+0x78>)
 8001a34:	4413      	add	r3, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f810 	bl	8001a5c <MX_USART1_UART_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001a42:	f06f 0303 	mvn.w	r3, #3
 8001a46:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001a48:	68fb      	ldr	r3, [r7, #12]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000018 	.word	0x20000018
 8001a58:	20000268 	.word	0x20000268

08001a5c <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001a64:	2300      	movs	r3, #0
 8001a66:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a12      	ldr	r2, [pc, #72]	@ (8001ab4 <MX_USART1_UART_Init+0x58>)
 8001a6c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a74:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f001 fcde 	bl	800345c <HAL_UART_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_USART1_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40011000 	.word	0x40011000

08001ab8 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8001ac0:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <__io_putchar+0x30>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	4413      	add	r3, r2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4a07      	ldr	r2, [pc, #28]	@ (8001aec <__io_putchar+0x34>)
 8001ad0:	1898      	adds	r0, r3, r2
 8001ad2:	1d39      	adds	r1, r7, #4
 8001ad4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f001 fd0f 	bl	80034fc <HAL_UART_Transmit>
  return ch;
 8001ade:	687b      	ldr	r3, [r7, #4]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	200002b0 	.word	0x200002b0
 8001aec:	20000268 	.word	0x20000268

08001af0 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	@ 0x28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	4b1f      	ldr	r3, [pc, #124]	@ (8001b7c <USART1_MspInit+0x8c>)
 8001afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b00:	4a1e      	ldr	r2, [pc, #120]	@ (8001b7c <USART1_MspInit+0x8c>)
 8001b02:	f043 0310 	orr.w	r3, r3, #16
 8001b06:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b08:	4b1c      	ldr	r3, [pc, #112]	@ (8001b7c <USART1_MspInit+0x8c>)
 8001b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0c:	f003 0310 	and.w	r3, r3, #16
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	4b18      	ldr	r3, [pc, #96]	@ (8001b7c <USART1_MspInit+0x8c>)
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1c:	4a17      	ldr	r2, [pc, #92]	@ (8001b7c <USART1_MspInit+0x8c>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b24:	4b15      	ldr	r3, [pc, #84]	@ (8001b7c <USART1_MspInit+0x8c>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8001b30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 8001b42:	2307      	movs	r3, #7
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	480c      	ldr	r0, [pc, #48]	@ (8001b80 <USART1_MspInit+0x90>)
 8001b4e:	f000 fa13 	bl	8001f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 8001b52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b60:	2303      	movs	r3, #3
 8001b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 8001b64:	2307      	movs	r3, #7
 8001b66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4804      	ldr	r0, [pc, #16]	@ (8001b80 <USART1_MspInit+0x90>)
 8001b70:	f000 fa02 	bl	8001f78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 8001b74:	bf00      	nop
 8001b76:	3728      	adds	r7, #40	@ 0x28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40020000 	.word	0x40020000

08001b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b88:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc4 <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc4 <HAL_Init+0x40>)
 8001b8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b94:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <HAL_Init+0x40>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc4 <HAL_Init+0x40>)
 8001b9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba0:	4b08      	ldr	r3, [pc, #32]	@ (8001bc4 <HAL_Init+0x40>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a07      	ldr	r2, [pc, #28]	@ (8001bc4 <HAL_Init+0x40>)
 8001ba6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001baa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bac:	2003      	movs	r0, #3
 8001bae:	f000 f94f 	bl	8001e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	f000 f808 	bl	8001bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb8:	f7ff fb62 	bl	8001280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023c00 	.word	0x40023c00

08001bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd0:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <HAL_InitTick+0x54>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b12      	ldr	r3, [pc, #72]	@ (8001c20 <HAL_InitTick+0x58>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 f967 	bl	8001eba <HAL_SYSTICK_Config>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e00e      	b.n	8001c14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b0f      	cmp	r3, #15
 8001bfa:	d80a      	bhi.n	8001c12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295
 8001c04:	f000 f92f 	bl	8001e66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c08:	4a06      	ldr	r2, [pc, #24]	@ (8001c24 <HAL_InitTick+0x5c>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e000      	b.n	8001c14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000004 	.word	0x20000004
 8001c20:	20000020 	.word	0x20000020
 8001c24:	2000001c 	.word	0x2000001c

08001c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <HAL_IncTick+0x20>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <HAL_IncTick+0x24>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	4a04      	ldr	r2, [pc, #16]	@ (8001c4c <HAL_IncTick+0x24>)
 8001c3a:	6013      	str	r3, [r2, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000020 	.word	0x20000020
 8001c4c:	200002b4 	.word	0x200002b4

08001c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return uwTick;
 8001c54:	4b03      	ldr	r3, [pc, #12]	@ (8001c64 <HAL_GetTick+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	200002b4 	.word	0x200002b4

08001c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c70:	f7ff ffee 	bl	8001c50 <HAL_GetTick>
 8001c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c80:	d005      	beq.n	8001c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c82:	4b0a      	ldr	r3, [pc, #40]	@ (8001cac <HAL_Delay+0x44>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c8e:	bf00      	nop
 8001c90:	f7ff ffde 	bl	8001c50 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d8f7      	bhi.n	8001c90 <HAL_Delay+0x28>
  {
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000020 	.word	0x20000020

08001cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce2:	4a04      	ldr	r2, [pc, #16]	@ (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	60d3      	str	r3, [r2, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cfc:	4b04      	ldr	r3, [pc, #16]	@ (8001d10 <__NVIC_GetPriorityGrouping+0x18>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	f003 0307 	and.w	r3, r3, #7
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	db0b      	blt.n	8001d3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	f003 021f 	and.w	r2, r3, #31
 8001d2c:	4907      	ldr	r1, [pc, #28]	@ (8001d4c <__NVIC_EnableIRQ+0x38>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	095b      	lsrs	r3, r3, #5
 8001d34:	2001      	movs	r0, #1
 8001d36:	fa00 f202 	lsl.w	r2, r0, r2
 8001d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000e100 	.word	0xe000e100

08001d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	6039      	str	r1, [r7, #0]
 8001d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	db0a      	blt.n	8001d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	490c      	ldr	r1, [pc, #48]	@ (8001d9c <__NVIC_SetPriority+0x4c>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	0112      	lsls	r2, r2, #4
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	440b      	add	r3, r1
 8001d74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d78:	e00a      	b.n	8001d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4908      	ldr	r1, [pc, #32]	@ (8001da0 <__NVIC_SetPriority+0x50>)
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	3b04      	subs	r3, #4
 8001d88:	0112      	lsls	r2, r2, #4
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	761a      	strb	r2, [r3, #24]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000e100 	.word	0xe000e100
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b089      	sub	sp, #36	@ 0x24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f1c3 0307 	rsb	r3, r3, #7
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	bf28      	it	cs
 8001dc2:	2304      	movcs	r3, #4
 8001dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	2b06      	cmp	r3, #6
 8001dcc:	d902      	bls.n	8001dd4 <NVIC_EncodePriority+0x30>
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3b03      	subs	r3, #3
 8001dd2:	e000      	b.n	8001dd6 <NVIC_EncodePriority+0x32>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43da      	mvns	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	401a      	ands	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dec:	f04f 31ff 	mov.w	r1, #4294967295
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	fa01 f303 	lsl.w	r3, r1, r3
 8001df6:	43d9      	mvns	r1, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	4313      	orrs	r3, r2
         );
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3724      	adds	r7, #36	@ 0x24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e1c:	d301      	bcc.n	8001e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e00f      	b.n	8001e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e22:	4a0a      	ldr	r2, [pc, #40]	@ (8001e4c <SysTick_Config+0x40>)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2a:	210f      	movs	r1, #15
 8001e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e30:	f7ff ff8e 	bl	8001d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e34:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <SysTick_Config+0x40>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3a:	4b04      	ldr	r3, [pc, #16]	@ (8001e4c <SysTick_Config+0x40>)
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	e000e010 	.word	0xe000e010

08001e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff ff29 	bl	8001cb0 <__NVIC_SetPriorityGrouping>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e78:	f7ff ff3e 	bl	8001cf8 <__NVIC_GetPriorityGrouping>
 8001e7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	68b9      	ldr	r1, [r7, #8]
 8001e82:	6978      	ldr	r0, [r7, #20]
 8001e84:	f7ff ff8e 	bl	8001da4 <NVIC_EncodePriority>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff5d 	bl	8001d50 <__NVIC_SetPriority>
}
 8001e96:	bf00      	nop
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff31 	bl	8001d14 <__NVIC_EnableIRQ>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ffa2 	bl	8001e0c <SysTick_Config>
 8001ec8:	4603      	mov	r3, r0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b087      	sub	sp, #28
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	460b      	mov	r3, r1
 8001edc:	607a      	str	r2, [r7, #4]
 8001ede:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001ee4:	7afb      	ldrb	r3, [r7, #11]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d103      	bne.n	8001ef2 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	605a      	str	r2, [r3, #4]
      break;
 8001ef0:	e002      	b.n	8001ef8 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8001ef6:	bf00      	nop
  }

  return status;
 8001ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	371c      	adds	r7, #28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e003      	b.n	8001f22 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001f20:	2300      	movs	r3, #0
  }
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
	...

08001f30 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 031f 	and.w	r3, r3, #31
 8001f40:	2201      	movs	r2, #1
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8001f48:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <HAL_EXTI_IRQHandler+0x44>)
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d009      	beq.n	8001f6c <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8001f58:	4a06      	ldr	r2, [pc, #24]	@ (8001f74 <HAL_EXTI_IRQHandler+0x44>)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4798      	blx	r3
    }
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40013c00 	.word	0x40013c00

08001f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	@ 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
 8001f92:	e159      	b.n	8002248 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f94:	2201      	movs	r2, #1
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	f040 8148 	bne.w	8002242 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d005      	beq.n	8001fca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d130      	bne.n	800202c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002000:	2201      	movs	r2, #1
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 0201 	and.w	r2, r3, #1
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	2b03      	cmp	r3, #3
 8002036:	d017      	beq.n	8002068 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	2203      	movs	r2, #3
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d123      	bne.n	80020bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	08da      	lsrs	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3208      	adds	r2, #8
 800207c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002080:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	220f      	movs	r2, #15
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	08da      	lsrs	r2, r3, #3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3208      	adds	r2, #8
 80020b6:	69b9      	ldr	r1, [r7, #24]
 80020b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	2203      	movs	r2, #3
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0203 	and.w	r2, r3, #3
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 80a2 	beq.w	8002242 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	4b57      	ldr	r3, [pc, #348]	@ (8002260 <HAL_GPIO_Init+0x2e8>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002106:	4a56      	ldr	r2, [pc, #344]	@ (8002260 <HAL_GPIO_Init+0x2e8>)
 8002108:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800210c:	6453      	str	r3, [r2, #68]	@ 0x44
 800210e:	4b54      	ldr	r3, [pc, #336]	@ (8002260 <HAL_GPIO_Init+0x2e8>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002112:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800211a:	4a52      	ldr	r2, [pc, #328]	@ (8002264 <HAL_GPIO_Init+0x2ec>)
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	089b      	lsrs	r3, r3, #2
 8002120:	3302      	adds	r3, #2
 8002122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	220f      	movs	r2, #15
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a49      	ldr	r2, [pc, #292]	@ (8002268 <HAL_GPIO_Init+0x2f0>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d019      	beq.n	800217a <HAL_GPIO_Init+0x202>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a48      	ldr	r2, [pc, #288]	@ (800226c <HAL_GPIO_Init+0x2f4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d013      	beq.n	8002176 <HAL_GPIO_Init+0x1fe>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a47      	ldr	r2, [pc, #284]	@ (8002270 <HAL_GPIO_Init+0x2f8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d00d      	beq.n	8002172 <HAL_GPIO_Init+0x1fa>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a46      	ldr	r2, [pc, #280]	@ (8002274 <HAL_GPIO_Init+0x2fc>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d007      	beq.n	800216e <HAL_GPIO_Init+0x1f6>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a45      	ldr	r2, [pc, #276]	@ (8002278 <HAL_GPIO_Init+0x300>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d101      	bne.n	800216a <HAL_GPIO_Init+0x1f2>
 8002166:	2304      	movs	r3, #4
 8002168:	e008      	b.n	800217c <HAL_GPIO_Init+0x204>
 800216a:	2307      	movs	r3, #7
 800216c:	e006      	b.n	800217c <HAL_GPIO_Init+0x204>
 800216e:	2303      	movs	r3, #3
 8002170:	e004      	b.n	800217c <HAL_GPIO_Init+0x204>
 8002172:	2302      	movs	r3, #2
 8002174:	e002      	b.n	800217c <HAL_GPIO_Init+0x204>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <HAL_GPIO_Init+0x204>
 800217a:	2300      	movs	r3, #0
 800217c:	69fa      	ldr	r2, [r7, #28]
 800217e:	f002 0203 	and.w	r2, r2, #3
 8002182:	0092      	lsls	r2, r2, #2
 8002184:	4093      	lsls	r3, r2
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800218c:	4935      	ldr	r1, [pc, #212]	@ (8002264 <HAL_GPIO_Init+0x2ec>)
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	089b      	lsrs	r3, r3, #2
 8002192:	3302      	adds	r3, #2
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800219a:	4b38      	ldr	r3, [pc, #224]	@ (800227c <HAL_GPIO_Init+0x304>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021be:	4a2f      	ldr	r2, [pc, #188]	@ (800227c <HAL_GPIO_Init+0x304>)
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021c4:	4b2d      	ldr	r3, [pc, #180]	@ (800227c <HAL_GPIO_Init+0x304>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021e8:	4a24      	ldr	r2, [pc, #144]	@ (800227c <HAL_GPIO_Init+0x304>)
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021ee:	4b23      	ldr	r3, [pc, #140]	@ (800227c <HAL_GPIO_Init+0x304>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002212:	4a1a      	ldr	r2, [pc, #104]	@ (800227c <HAL_GPIO_Init+0x304>)
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002218:	4b18      	ldr	r3, [pc, #96]	@ (800227c <HAL_GPIO_Init+0x304>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800223c:	4a0f      	ldr	r2, [pc, #60]	@ (800227c <HAL_GPIO_Init+0x304>)
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3301      	adds	r3, #1
 8002246:	61fb      	str	r3, [r7, #28]
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	2b0f      	cmp	r3, #15
 800224c:	f67f aea2 	bls.w	8001f94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	3724      	adds	r7, #36	@ 0x24
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40023800 	.word	0x40023800
 8002264:	40013800 	.word	0x40013800
 8002268:	40020000 	.word	0x40020000
 800226c:	40020400 	.word	0x40020400
 8002270:	40020800 	.word	0x40020800
 8002274:	40020c00 	.word	0x40020c00
 8002278:	40021000 	.word	0x40021000
 800227c:	40013c00 	.word	0x40013c00

08002280 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002280:	b480      	push	{r7}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002292:	2300      	movs	r3, #0
 8002294:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	e0bb      	b.n	8002414 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800229c:	2201      	movs	r2, #1
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4013      	ands	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	f040 80ab 	bne.w	800240e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80022b8:	4a5c      	ldr	r2, [pc, #368]	@ (800242c <HAL_GPIO_DeInit+0x1ac>)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	089b      	lsrs	r3, r3, #2
 80022be:	3302      	adds	r3, #2
 80022c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	220f      	movs	r2, #15
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	4013      	ands	r3, r2
 80022d8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a54      	ldr	r2, [pc, #336]	@ (8002430 <HAL_GPIO_DeInit+0x1b0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d019      	beq.n	8002316 <HAL_GPIO_DeInit+0x96>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a53      	ldr	r2, [pc, #332]	@ (8002434 <HAL_GPIO_DeInit+0x1b4>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d013      	beq.n	8002312 <HAL_GPIO_DeInit+0x92>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a52      	ldr	r2, [pc, #328]	@ (8002438 <HAL_GPIO_DeInit+0x1b8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00d      	beq.n	800230e <HAL_GPIO_DeInit+0x8e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a51      	ldr	r2, [pc, #324]	@ (800243c <HAL_GPIO_DeInit+0x1bc>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d007      	beq.n	800230a <HAL_GPIO_DeInit+0x8a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a50      	ldr	r2, [pc, #320]	@ (8002440 <HAL_GPIO_DeInit+0x1c0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d101      	bne.n	8002306 <HAL_GPIO_DeInit+0x86>
 8002302:	2304      	movs	r3, #4
 8002304:	e008      	b.n	8002318 <HAL_GPIO_DeInit+0x98>
 8002306:	2307      	movs	r3, #7
 8002308:	e006      	b.n	8002318 <HAL_GPIO_DeInit+0x98>
 800230a:	2303      	movs	r3, #3
 800230c:	e004      	b.n	8002318 <HAL_GPIO_DeInit+0x98>
 800230e:	2302      	movs	r3, #2
 8002310:	e002      	b.n	8002318 <HAL_GPIO_DeInit+0x98>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_GPIO_DeInit+0x98>
 8002316:	2300      	movs	r3, #0
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	f002 0203 	and.w	r2, r2, #3
 800231e:	0092      	lsls	r2, r2, #2
 8002320:	4093      	lsls	r3, r2
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	429a      	cmp	r2, r3
 8002326:	d132      	bne.n	800238e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002328:	4b46      	ldr	r3, [pc, #280]	@ (8002444 <HAL_GPIO_DeInit+0x1c4>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	43db      	mvns	r3, r3
 8002330:	4944      	ldr	r1, [pc, #272]	@ (8002444 <HAL_GPIO_DeInit+0x1c4>)
 8002332:	4013      	ands	r3, r2
 8002334:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002336:	4b43      	ldr	r3, [pc, #268]	@ (8002444 <HAL_GPIO_DeInit+0x1c4>)
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	43db      	mvns	r3, r3
 800233e:	4941      	ldr	r1, [pc, #260]	@ (8002444 <HAL_GPIO_DeInit+0x1c4>)
 8002340:	4013      	ands	r3, r2
 8002342:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002344:	4b3f      	ldr	r3, [pc, #252]	@ (8002444 <HAL_GPIO_DeInit+0x1c4>)
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	43db      	mvns	r3, r3
 800234c:	493d      	ldr	r1, [pc, #244]	@ (8002444 <HAL_GPIO_DeInit+0x1c4>)
 800234e:	4013      	ands	r3, r2
 8002350:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002352:	4b3c      	ldr	r3, [pc, #240]	@ (8002444 <HAL_GPIO_DeInit+0x1c4>)
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	43db      	mvns	r3, r3
 800235a:	493a      	ldr	r1, [pc, #232]	@ (8002444 <HAL_GPIO_DeInit+0x1c4>)
 800235c:	4013      	ands	r3, r2
 800235e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	220f      	movs	r2, #15
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002370:	4a2e      	ldr	r2, [pc, #184]	@ (800242c <HAL_GPIO_DeInit+0x1ac>)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	089b      	lsrs	r3, r3, #2
 8002376:	3302      	adds	r3, #2
 8002378:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	43da      	mvns	r2, r3
 8002380:	482a      	ldr	r0, [pc, #168]	@ (800242c <HAL_GPIO_DeInit+0x1ac>)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	089b      	lsrs	r3, r3, #2
 8002386:	400a      	ands	r2, r1
 8002388:	3302      	adds	r3, #2
 800238a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	2103      	movs	r1, #3
 8002398:	fa01 f303 	lsl.w	r3, r1, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	401a      	ands	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	08da      	lsrs	r2, r3, #3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3208      	adds	r2, #8
 80023ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	220f      	movs	r2, #15
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	08d2      	lsrs	r2, r2, #3
 80023c4:	4019      	ands	r1, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3208      	adds	r2, #8
 80023ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	2103      	movs	r1, #3
 80023d8:	fa01 f303 	lsl.w	r3, r1, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	401a      	ands	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	2101      	movs	r1, #1
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	fa01 f303 	lsl.w	r3, r1, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	401a      	ands	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	2103      	movs	r1, #3
 8002402:	fa01 f303 	lsl.w	r3, r1, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	401a      	ands	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	3301      	adds	r3, #1
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	2b0f      	cmp	r3, #15
 8002418:	f67f af40 	bls.w	800229c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40013800 	.word	0x40013800
 8002430:	40020000 	.word	0x40020000
 8002434:	40020400 	.word	0x40020400
 8002438:	40020800 	.word	0x40020800
 800243c:	40020c00 	.word	0x40020c00
 8002440:	40021000 	.word	0x40021000
 8002444:	40013c00 	.word	0x40013c00

08002448 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	887b      	ldrh	r3, [r7, #2]
 800245a:	4013      	ands	r3, r2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
 8002464:	e001      	b.n	800246a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002466:	2300      	movs	r3, #0
 8002468:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800246a:	7bfb      	ldrb	r3, [r7, #15]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	807b      	strh	r3, [r7, #2]
 8002484:	4613      	mov	r3, r2
 8002486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002488:	787b      	ldrb	r3, [r7, #1]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800248e:	887a      	ldrh	r2, [r7, #2]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002494:	e003      	b.n	800249e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002496:	887b      	ldrh	r3, [r7, #2]
 8002498:	041a      	lsls	r2, r3, #16
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	619a      	str	r2, [r3, #24]
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b085      	sub	sp, #20
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	460b      	mov	r3, r1
 80024b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024bc:	887a      	ldrh	r2, [r7, #2]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4013      	ands	r3, r2
 80024c2:	041a      	lsls	r2, r3, #16
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	43d9      	mvns	r1, r3
 80024c8:	887b      	ldrh	r3, [r7, #2]
 80024ca:	400b      	ands	r3, r1
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	619a      	str	r2, [r3, #24]
}
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e267      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d075      	beq.n	80025ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024fe:	4b88      	ldr	r3, [pc, #544]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b04      	cmp	r3, #4
 8002508:	d00c      	beq.n	8002524 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800250a:	4b85      	ldr	r3, [pc, #532]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002512:	2b08      	cmp	r3, #8
 8002514:	d112      	bne.n	800253c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002516:	4b82      	ldr	r3, [pc, #520]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800251e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002522:	d10b      	bne.n	800253c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002524:	4b7e      	ldr	r3, [pc, #504]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d05b      	beq.n	80025e8 <HAL_RCC_OscConfig+0x108>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d157      	bne.n	80025e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e242      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002544:	d106      	bne.n	8002554 <HAL_RCC_OscConfig+0x74>
 8002546:	4b76      	ldr	r3, [pc, #472]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a75      	ldr	r2, [pc, #468]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 800254c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e01d      	b.n	8002590 <HAL_RCC_OscConfig+0xb0>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800255c:	d10c      	bne.n	8002578 <HAL_RCC_OscConfig+0x98>
 800255e:	4b70      	ldr	r3, [pc, #448]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a6f      	ldr	r2, [pc, #444]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 8002564:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b6d      	ldr	r3, [pc, #436]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a6c      	ldr	r2, [pc, #432]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 8002570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e00b      	b.n	8002590 <HAL_RCC_OscConfig+0xb0>
 8002578:	4b69      	ldr	r3, [pc, #420]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a68      	ldr	r2, [pc, #416]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 800257e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	4b66      	ldr	r3, [pc, #408]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a65      	ldr	r2, [pc, #404]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 800258a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800258e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d013      	beq.n	80025c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7ff fb5a 	bl	8001c50 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a0:	f7ff fb56 	bl	8001c50 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	@ 0x64
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e207      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	4b5b      	ldr	r3, [pc, #364]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0xc0>
 80025be:	e014      	b.n	80025ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7ff fb46 	bl	8001c50 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c8:	f7ff fb42 	bl	8001c50 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	@ 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e1f3      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025da:	4b51      	ldr	r3, [pc, #324]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0xe8>
 80025e6:	e000      	b.n	80025ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d063      	beq.n	80026be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00b      	beq.n	800261a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002602:	4b47      	ldr	r3, [pc, #284]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800260a:	2b08      	cmp	r3, #8
 800260c:	d11c      	bne.n	8002648 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800260e:	4b44      	ldr	r3, [pc, #272]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d116      	bne.n	8002648 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261a:	4b41      	ldr	r3, [pc, #260]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <HAL_RCC_OscConfig+0x152>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d001      	beq.n	8002632 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e1c7      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002632:	4b3b      	ldr	r3, [pc, #236]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4937      	ldr	r1, [pc, #220]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002646:	e03a      	b.n	80026be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d020      	beq.n	8002692 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002650:	4b34      	ldr	r3, [pc, #208]	@ (8002724 <HAL_RCC_OscConfig+0x244>)
 8002652:	2201      	movs	r2, #1
 8002654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002656:	f7ff fafb 	bl	8001c50 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800265e:	f7ff faf7 	bl	8001c50 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e1a8      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002670:	4b2b      	ldr	r3, [pc, #172]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267c:	4b28      	ldr	r3, [pc, #160]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4925      	ldr	r1, [pc, #148]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 800268c:	4313      	orrs	r3, r2
 800268e:	600b      	str	r3, [r1, #0]
 8002690:	e015      	b.n	80026be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002692:	4b24      	ldr	r3, [pc, #144]	@ (8002724 <HAL_RCC_OscConfig+0x244>)
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002698:	f7ff fada 	bl	8001c50 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a0:	f7ff fad6 	bl	8001c50 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e187      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d036      	beq.n	8002738 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d016      	beq.n	8002700 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d2:	4b15      	ldr	r3, [pc, #84]	@ (8002728 <HAL_RCC_OscConfig+0x248>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d8:	f7ff faba 	bl	8001c50 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e0:	f7ff fab6 	bl	8001c50 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e167      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 80026f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x200>
 80026fe:	e01b      	b.n	8002738 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002700:	4b09      	ldr	r3, [pc, #36]	@ (8002728 <HAL_RCC_OscConfig+0x248>)
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002706:	f7ff faa3 	bl	8001c50 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800270c:	e00e      	b.n	800272c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800270e:	f7ff fa9f 	bl	8001c50 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d907      	bls.n	800272c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e150      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
 8002720:	40023800 	.word	0x40023800
 8002724:	42470000 	.word	0x42470000
 8002728:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800272c:	4b88      	ldr	r3, [pc, #544]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 800272e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1ea      	bne.n	800270e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 8097 	beq.w	8002874 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002746:	2300      	movs	r3, #0
 8002748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800274a:	4b81      	ldr	r3, [pc, #516]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10f      	bne.n	8002776 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	4b7d      	ldr	r3, [pc, #500]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	4a7c      	ldr	r2, [pc, #496]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 8002760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002764:	6413      	str	r3, [r2, #64]	@ 0x40
 8002766:	4b7a      	ldr	r3, [pc, #488]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002772:	2301      	movs	r3, #1
 8002774:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002776:	4b77      	ldr	r3, [pc, #476]	@ (8002954 <HAL_RCC_OscConfig+0x474>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277e:	2b00      	cmp	r3, #0
 8002780:	d118      	bne.n	80027b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002782:	4b74      	ldr	r3, [pc, #464]	@ (8002954 <HAL_RCC_OscConfig+0x474>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a73      	ldr	r2, [pc, #460]	@ (8002954 <HAL_RCC_OscConfig+0x474>)
 8002788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800278c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800278e:	f7ff fa5f 	bl	8001c50 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002796:	f7ff fa5b 	bl	8001c50 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e10c      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a8:	4b6a      	ldr	r3, [pc, #424]	@ (8002954 <HAL_RCC_OscConfig+0x474>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d106      	bne.n	80027ca <HAL_RCC_OscConfig+0x2ea>
 80027bc:	4b64      	ldr	r3, [pc, #400]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c0:	4a63      	ldr	r2, [pc, #396]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027c8:	e01c      	b.n	8002804 <HAL_RCC_OscConfig+0x324>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b05      	cmp	r3, #5
 80027d0:	d10c      	bne.n	80027ec <HAL_RCC_OscConfig+0x30c>
 80027d2:	4b5f      	ldr	r3, [pc, #380]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d6:	4a5e      	ldr	r2, [pc, #376]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 80027d8:	f043 0304 	orr.w	r3, r3, #4
 80027dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80027de:	4b5c      	ldr	r3, [pc, #368]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e2:	4a5b      	ldr	r2, [pc, #364]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ea:	e00b      	b.n	8002804 <HAL_RCC_OscConfig+0x324>
 80027ec:	4b58      	ldr	r3, [pc, #352]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f0:	4a57      	ldr	r2, [pc, #348]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 80027f2:	f023 0301 	bic.w	r3, r3, #1
 80027f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027f8:	4b55      	ldr	r3, [pc, #340]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fc:	4a54      	ldr	r2, [pc, #336]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 80027fe:	f023 0304 	bic.w	r3, r3, #4
 8002802:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d015      	beq.n	8002838 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280c:	f7ff fa20 	bl	8001c50 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002812:	e00a      	b.n	800282a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002814:	f7ff fa1c 	bl	8001c50 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002822:	4293      	cmp	r3, r2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e0cb      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282a:	4b49      	ldr	r3, [pc, #292]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0ee      	beq.n	8002814 <HAL_RCC_OscConfig+0x334>
 8002836:	e014      	b.n	8002862 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002838:	f7ff fa0a 	bl	8001c50 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800283e:	e00a      	b.n	8002856 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002840:	f7ff fa06 	bl	8001c50 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e0b5      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002856:	4b3e      	ldr	r3, [pc, #248]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1ee      	bne.n	8002840 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002862:	7dfb      	ldrb	r3, [r7, #23]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d105      	bne.n	8002874 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002868:	4b39      	ldr	r3, [pc, #228]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 800286a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286c:	4a38      	ldr	r2, [pc, #224]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 800286e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002872:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 80a1 	beq.w	80029c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800287e:	4b34      	ldr	r3, [pc, #208]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	2b08      	cmp	r3, #8
 8002888:	d05c      	beq.n	8002944 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d141      	bne.n	8002916 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002892:	4b31      	ldr	r3, [pc, #196]	@ (8002958 <HAL_RCC_OscConfig+0x478>)
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7ff f9da 	bl	8001c50 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a0:	f7ff f9d6 	bl	8001c50 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e087      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b2:	4b27      	ldr	r3, [pc, #156]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69da      	ldr	r2, [r3, #28]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028cc:	019b      	lsls	r3, r3, #6
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d4:	085b      	lsrs	r3, r3, #1
 80028d6:	3b01      	subs	r3, #1
 80028d8:	041b      	lsls	r3, r3, #16
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e0:	061b      	lsls	r3, r3, #24
 80028e2:	491b      	ldr	r1, [pc, #108]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002958 <HAL_RCC_OscConfig+0x478>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ee:	f7ff f9af 	bl	8001c50 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f6:	f7ff f9ab 	bl	8001c50 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e05c      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002908:	4b11      	ldr	r3, [pc, #68]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCC_OscConfig+0x416>
 8002914:	e054      	b.n	80029c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002916:	4b10      	ldr	r3, [pc, #64]	@ (8002958 <HAL_RCC_OscConfig+0x478>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7ff f998 	bl	8001c50 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002924:	f7ff f994 	bl	8001c50 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e045      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002936:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x444>
 8002942:	e03d      	b.n	80029c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d107      	bne.n	800295c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e038      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
 8002950:	40023800 	.word	0x40023800
 8002954:	40007000 	.word	0x40007000
 8002958:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800295c:	4b1b      	ldr	r3, [pc, #108]	@ (80029cc <HAL_RCC_OscConfig+0x4ec>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d028      	beq.n	80029bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002974:	429a      	cmp	r2, r3
 8002976:	d121      	bne.n	80029bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002982:	429a      	cmp	r2, r3
 8002984:	d11a      	bne.n	80029bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800298c:	4013      	ands	r3, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002992:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002994:	4293      	cmp	r3, r2
 8002996:	d111      	bne.n	80029bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a2:	085b      	lsrs	r3, r3, #1
 80029a4:	3b01      	subs	r3, #1
 80029a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d107      	bne.n	80029bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e000      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800

080029d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0cc      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029e4:	4b68      	ldr	r3, [pc, #416]	@ (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d90c      	bls.n	8002a0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b65      	ldr	r3, [pc, #404]	@ (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b63      	ldr	r3, [pc, #396]	@ (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0b8      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d020      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a24:	4b59      	ldr	r3, [pc, #356]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4a58      	ldr	r2, [pc, #352]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a3c:	4b53      	ldr	r3, [pc, #332]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	4a52      	ldr	r2, [pc, #328]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a48:	4b50      	ldr	r3, [pc, #320]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	494d      	ldr	r1, [pc, #308]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d044      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d107      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6e:	4b47      	ldr	r3, [pc, #284]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d119      	bne.n	8002aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e07f      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d003      	beq.n	8002a8e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d107      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e06f      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e067      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aae:	4b37      	ldr	r3, [pc, #220]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f023 0203 	bic.w	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4934      	ldr	r1, [pc, #208]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ac0:	f7ff f8c6 	bl	8001c50 <HAL_GetTick>
 8002ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac6:	e00a      	b.n	8002ade <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac8:	f7ff f8c2 	bl	8001c50 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e04f      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ade:	4b2b      	ldr	r3, [pc, #172]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 020c 	and.w	r2, r3, #12
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d1eb      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002af0:	4b25      	ldr	r3, [pc, #148]	@ (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d20c      	bcs.n	8002b18 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afe:	4b22      	ldr	r3, [pc, #136]	@ (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b06:	4b20      	ldr	r3, [pc, #128]	@ (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d001      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e032      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b24:	4b19      	ldr	r3, [pc, #100]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4916      	ldr	r1, [pc, #88]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b42:	4b12      	ldr	r3, [pc, #72]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	490e      	ldr	r1, [pc, #56]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b56:	f000 f821 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	490a      	ldr	r1, [pc, #40]	@ (8002b90 <HAL_RCC_ClockConfig+0x1c0>)
 8002b68:	5ccb      	ldrb	r3, [r1, r3]
 8002b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6e:	4a09      	ldr	r2, [pc, #36]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b72:	4b09      	ldr	r3, [pc, #36]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff f826 	bl	8001bc8 <HAL_InitTick>

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40023c00 	.word	0x40023c00
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	080060a4 	.word	0x080060a4
 8002b94:	20000004 	.word	0x20000004
 8002b98:	2000001c 	.word	0x2000001c

08002b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ba0:	b094      	sub	sp, #80	@ 0x50
 8002ba2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bb4:	4b79      	ldr	r3, [pc, #484]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 030c 	and.w	r3, r3, #12
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d00d      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq+0x40>
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	f200 80e1 	bhi.w	8002d88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d003      	beq.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bce:	e0db      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bd0:	4b73      	ldr	r3, [pc, #460]	@ (8002da0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bd4:	e0db      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bd6:	4b73      	ldr	r3, [pc, #460]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bda:	e0d8      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bdc:	4b6f      	ldr	r3, [pc, #444]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002be4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002be6:	4b6d      	ldr	r3, [pc, #436]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d063      	beq.n	8002cba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf2:	4b6a      	ldr	r3, [pc, #424]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	099b      	lsrs	r3, r3, #6
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bfc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c04:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c06:	2300      	movs	r3, #0
 8002c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c0e:	4622      	mov	r2, r4
 8002c10:	462b      	mov	r3, r5
 8002c12:	f04f 0000 	mov.w	r0, #0
 8002c16:	f04f 0100 	mov.w	r1, #0
 8002c1a:	0159      	lsls	r1, r3, #5
 8002c1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c20:	0150      	lsls	r0, r2, #5
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4621      	mov	r1, r4
 8002c28:	1a51      	subs	r1, r2, r1
 8002c2a:	6139      	str	r1, [r7, #16]
 8002c2c:	4629      	mov	r1, r5
 8002c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c40:	4659      	mov	r1, fp
 8002c42:	018b      	lsls	r3, r1, #6
 8002c44:	4651      	mov	r1, sl
 8002c46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c4a:	4651      	mov	r1, sl
 8002c4c:	018a      	lsls	r2, r1, #6
 8002c4e:	4651      	mov	r1, sl
 8002c50:	ebb2 0801 	subs.w	r8, r2, r1
 8002c54:	4659      	mov	r1, fp
 8002c56:	eb63 0901 	sbc.w	r9, r3, r1
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c6e:	4690      	mov	r8, r2
 8002c70:	4699      	mov	r9, r3
 8002c72:	4623      	mov	r3, r4
 8002c74:	eb18 0303 	adds.w	r3, r8, r3
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	462b      	mov	r3, r5
 8002c7c:	eb49 0303 	adc.w	r3, r9, r3
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c8e:	4629      	mov	r1, r5
 8002c90:	024b      	lsls	r3, r1, #9
 8002c92:	4621      	mov	r1, r4
 8002c94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c98:	4621      	mov	r1, r4
 8002c9a:	024a      	lsls	r2, r1, #9
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ca6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ca8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cac:	f7fd fae8 	bl	8000280 <__aeabi_uldivmod>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cb8:	e058      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cba:	4b38      	ldr	r3, [pc, #224]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	099b      	lsrs	r3, r3, #6
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cca:	623b      	str	r3, [r7, #32]
 8002ccc:	2300      	movs	r3, #0
 8002cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cd4:	4642      	mov	r2, r8
 8002cd6:	464b      	mov	r3, r9
 8002cd8:	f04f 0000 	mov.w	r0, #0
 8002cdc:	f04f 0100 	mov.w	r1, #0
 8002ce0:	0159      	lsls	r1, r3, #5
 8002ce2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ce6:	0150      	lsls	r0, r2, #5
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4641      	mov	r1, r8
 8002cee:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cf2:	4649      	mov	r1, r9
 8002cf4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d0c:	ebb2 040a 	subs.w	r4, r2, sl
 8002d10:	eb63 050b 	sbc.w	r5, r3, fp
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	00eb      	lsls	r3, r5, #3
 8002d1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d22:	00e2      	lsls	r2, r4, #3
 8002d24:	4614      	mov	r4, r2
 8002d26:	461d      	mov	r5, r3
 8002d28:	4643      	mov	r3, r8
 8002d2a:	18e3      	adds	r3, r4, r3
 8002d2c:	603b      	str	r3, [r7, #0]
 8002d2e:	464b      	mov	r3, r9
 8002d30:	eb45 0303 	adc.w	r3, r5, r3
 8002d34:	607b      	str	r3, [r7, #4]
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d42:	4629      	mov	r1, r5
 8002d44:	028b      	lsls	r3, r1, #10
 8002d46:	4621      	mov	r1, r4
 8002d48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d4c:	4621      	mov	r1, r4
 8002d4e:	028a      	lsls	r2, r1, #10
 8002d50:	4610      	mov	r0, r2
 8002d52:	4619      	mov	r1, r3
 8002d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d56:	2200      	movs	r2, #0
 8002d58:	61bb      	str	r3, [r7, #24]
 8002d5a:	61fa      	str	r2, [r7, #28]
 8002d5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d60:	f7fd fa8e 	bl	8000280 <__aeabi_uldivmod>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4613      	mov	r3, r2
 8002d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	0c1b      	lsrs	r3, r3, #16
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	3301      	adds	r3, #1
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d86:	e002      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d88:	4b05      	ldr	r3, [pc, #20]	@ (8002da0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3750      	adds	r7, #80	@ 0x50
 8002d94:	46bd      	mov	sp, r7
 8002d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	00f42400 	.word	0x00f42400
 8002da4:	007a1200 	.word	0x007a1200

08002da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dac:	4b03      	ldr	r3, [pc, #12]	@ (8002dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	20000004 	.word	0x20000004

08002dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dc4:	f7ff fff0 	bl	8002da8 <HAL_RCC_GetHCLKFreq>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	4b05      	ldr	r3, [pc, #20]	@ (8002de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	0a9b      	lsrs	r3, r3, #10
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	4903      	ldr	r1, [pc, #12]	@ (8002de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dd6:	5ccb      	ldrb	r3, [r1, r3]
 8002dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40023800 	.word	0x40023800
 8002de4:	080060b4 	.word	0x080060b4

08002de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dec:	f7ff ffdc 	bl	8002da8 <HAL_RCC_GetHCLKFreq>
 8002df0:	4602      	mov	r2, r0
 8002df2:	4b05      	ldr	r3, [pc, #20]	@ (8002e08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	0b5b      	lsrs	r3, r3, #13
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	4903      	ldr	r1, [pc, #12]	@ (8002e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dfe:	5ccb      	ldrb	r3, [r1, r3]
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	080060b4 	.word	0x080060b4

08002e10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e07b      	b.n	8002f1a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d108      	bne.n	8002e3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e32:	d009      	beq.n	8002e48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	61da      	str	r2, [r3, #28]
 8002e3a:	e005      	b.n	8002e48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f85d 	bl	8002f22 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ecc:	ea42 0103 	orr.w	r1, r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	0c1b      	lsrs	r3, r3, #16
 8002ee6:	f003 0104 	and.w	r1, r3, #4
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eee:	f003 0210 	and.w	r2, r3, #16
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	69da      	ldr	r2, [r3, #28]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b08a      	sub	sp, #40	@ 0x28
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f44:	2301      	movs	r3, #1
 8002f46:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f48:	f7fe fe82 	bl	8001c50 <HAL_GetTick>
 8002f4c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f54:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002f5c:	887b      	ldrh	r3, [r7, #2]
 8002f5e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f60:	7ffb      	ldrb	r3, [r7, #31]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d00c      	beq.n	8002f80 <HAL_SPI_TransmitReceive+0x4a>
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f6c:	d106      	bne.n	8002f7c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d102      	bne.n	8002f7c <HAL_SPI_TransmitReceive+0x46>
 8002f76:	7ffb      	ldrb	r3, [r7, #31]
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d001      	beq.n	8002f80 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e17f      	b.n	8003280 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <HAL_SPI_TransmitReceive+0x5c>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <HAL_SPI_TransmitReceive+0x5c>
 8002f8c:	887b      	ldrh	r3, [r7, #2]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e174      	b.n	8003280 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_SPI_TransmitReceive+0x6e>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e16d      	b.n	8003280 <HAL_SPI_TransmitReceive+0x34a>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d003      	beq.n	8002fc0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2205      	movs	r2, #5
 8002fbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	887a      	ldrh	r2, [r7, #2]
 8002fd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	887a      	ldrh	r2, [r7, #2]
 8002fd6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	887a      	ldrh	r2, [r7, #2]
 8002fe2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	887a      	ldrh	r2, [r7, #2]
 8002fe8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003000:	2b40      	cmp	r3, #64	@ 0x40
 8003002:	d007      	beq.n	8003014 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003012:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800301c:	d17e      	bne.n	800311c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <HAL_SPI_TransmitReceive+0xf6>
 8003026:	8afb      	ldrh	r3, [r7, #22]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d16c      	bne.n	8003106 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003030:	881a      	ldrh	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303c:	1c9a      	adds	r2, r3, #2
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003046:	b29b      	uxth	r3, r3
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003050:	e059      	b.n	8003106 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b02      	cmp	r3, #2
 800305e:	d11b      	bne.n	8003098 <HAL_SPI_TransmitReceive+0x162>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d016      	beq.n	8003098 <HAL_SPI_TransmitReceive+0x162>
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	2b01      	cmp	r3, #1
 800306e:	d113      	bne.n	8003098 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003074:	881a      	ldrh	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003080:	1c9a      	adds	r2, r3, #2
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800308a:	b29b      	uxth	r3, r3
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d119      	bne.n	80030da <HAL_SPI_TransmitReceive+0x1a4>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d014      	beq.n	80030da <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ba:	b292      	uxth	r2, r2
 80030bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c2:	1c9a      	adds	r2, r3, #2
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030d6:	2301      	movs	r3, #1
 80030d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030da:	f7fe fdb9 	bl	8001c50 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d80d      	bhi.n	8003106 <HAL_SPI_TransmitReceive+0x1d0>
 80030ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f0:	d009      	beq.n	8003106 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e0bc      	b.n	8003280 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800310a:	b29b      	uxth	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1a0      	bne.n	8003052 <HAL_SPI_TransmitReceive+0x11c>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d19b      	bne.n	8003052 <HAL_SPI_TransmitReceive+0x11c>
 800311a:	e082      	b.n	8003222 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <HAL_SPI_TransmitReceive+0x1f4>
 8003124:	8afb      	ldrh	r3, [r7, #22]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d171      	bne.n	800320e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	330c      	adds	r3, #12
 8003134:	7812      	ldrb	r2, [r2, #0]
 8003136:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003150:	e05d      	b.n	800320e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b02      	cmp	r3, #2
 800315e:	d11c      	bne.n	800319a <HAL_SPI_TransmitReceive+0x264>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d017      	beq.n	800319a <HAL_SPI_TransmitReceive+0x264>
 800316a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316c:	2b01      	cmp	r3, #1
 800316e:	d114      	bne.n	800319a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	330c      	adds	r3, #12
 800317a:	7812      	ldrb	r2, [r2, #0]
 800317c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d119      	bne.n	80031dc <HAL_SPI_TransmitReceive+0x2a6>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d014      	beq.n	80031dc <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031d8:	2301      	movs	r3, #1
 80031da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80031dc:	f7fe fd38 	bl	8001c50 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d803      	bhi.n	80031f4 <HAL_SPI_TransmitReceive+0x2be>
 80031ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f2:	d102      	bne.n	80031fa <HAL_SPI_TransmitReceive+0x2c4>
 80031f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e038      	b.n	8003280 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003212:	b29b      	uxth	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d19c      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x21c>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800321c:	b29b      	uxth	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d197      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003222:	6a3a      	ldr	r2, [r7, #32]
 8003224:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 f8c4 	bl	80033b4 <SPI_EndRxTxTransaction>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d008      	beq.n	8003244 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2220      	movs	r2, #32
 8003236:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e01d      	b.n	8003280 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10a      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800324c:	2300      	movs	r3, #0
 800324e:	613b      	str	r3, [r7, #16]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800327e:	2300      	movs	r3, #0
  }
}
 8003280:	4618      	mov	r0, r3
 8003282:	3728      	adds	r7, #40	@ 0x28
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003296:	b2db      	uxtb	r3, r3
}
 8003298:	4618      	mov	r0, r3
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	603b      	str	r3, [r7, #0]
 80032b0:	4613      	mov	r3, r2
 80032b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032b4:	f7fe fccc 	bl	8001c50 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032bc:	1a9b      	subs	r3, r3, r2
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	4413      	add	r3, r2
 80032c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032c4:	f7fe fcc4 	bl	8001c50 <HAL_GetTick>
 80032c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032ca:	4b39      	ldr	r3, [pc, #228]	@ (80033b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	015b      	lsls	r3, r3, #5
 80032d0:	0d1b      	lsrs	r3, r3, #20
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	fb02 f303 	mul.w	r3, r2, r3
 80032d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032da:	e054      	b.n	8003386 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e2:	d050      	beq.n	8003386 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032e4:	f7fe fcb4 	bl	8001c50 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	69fa      	ldr	r2, [r7, #28]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d902      	bls.n	80032fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d13d      	bne.n	8003376 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003308:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003312:	d111      	bne.n	8003338 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800331c:	d004      	beq.n	8003328 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003326:	d107      	bne.n	8003338 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003336:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003340:	d10f      	bne.n	8003362 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003360:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e017      	b.n	80033a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	3b01      	subs	r3, #1
 8003384:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	4013      	ands	r3, r2
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	429a      	cmp	r2, r3
 8003394:	bf0c      	ite	eq
 8003396:	2301      	moveq	r3, #1
 8003398:	2300      	movne	r3, #0
 800339a:	b2db      	uxtb	r3, r3
 800339c:	461a      	mov	r2, r3
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d19b      	bne.n	80032dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3720      	adds	r7, #32
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20000004 	.word	0x20000004

080033b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b088      	sub	sp, #32
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2201      	movs	r2, #1
 80033c8:	2102      	movs	r1, #2
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f7ff ff6a 	bl	80032a4 <SPI_WaitFlagStateUntilTimeout>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d007      	beq.n	80033e6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033da:	f043 0220 	orr.w	r2, r3, #32
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e032      	b.n	800344c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80033e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003454 <SPI_EndRxTxTransaction+0xa0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003458 <SPI_EndRxTxTransaction+0xa4>)
 80033ec:	fba2 2303 	umull	r2, r3, r2, r3
 80033f0:	0d5b      	lsrs	r3, r3, #21
 80033f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80033f6:	fb02 f303 	mul.w	r3, r2, r3
 80033fa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003404:	d112      	bne.n	800342c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2200      	movs	r2, #0
 800340e:	2180      	movs	r1, #128	@ 0x80
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f7ff ff47 	bl	80032a4 <SPI_WaitFlagStateUntilTimeout>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d016      	beq.n	800344a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003420:	f043 0220 	orr.w	r2, r3, #32
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e00f      	b.n	800344c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	3b01      	subs	r3, #1
 8003436:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003442:	2b80      	cmp	r3, #128	@ 0x80
 8003444:	d0f2      	beq.n	800342c <SPI_EndRxTxTransaction+0x78>
 8003446:	e000      	b.n	800344a <SPI_EndRxTxTransaction+0x96>
        break;
 8003448:	bf00      	nop
  }

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20000004 	.word	0x20000004
 8003458:	165e9f81 	.word	0x165e9f81

0800345c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e042      	b.n	80034f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7fd ff24 	bl	80012d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2224      	movs	r2, #36	@ 0x24
 800348c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800349e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f973 	bl	800378c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695a      	ldr	r2, [r3, #20]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08a      	sub	sp, #40	@ 0x28
 8003500:	af02      	add	r7, sp, #8
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	603b      	str	r3, [r7, #0]
 8003508:	4613      	mov	r3, r2
 800350a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b20      	cmp	r3, #32
 800351a:	d175      	bne.n	8003608 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <HAL_UART_Transmit+0x2c>
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e06e      	b.n	800360a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2221      	movs	r2, #33	@ 0x21
 8003536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800353a:	f7fe fb89 	bl	8001c50 <HAL_GetTick>
 800353e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	88fa      	ldrh	r2, [r7, #6]
 8003544:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	88fa      	ldrh	r2, [r7, #6]
 800354a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003554:	d108      	bne.n	8003568 <HAL_UART_Transmit+0x6c>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d104      	bne.n	8003568 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	e003      	b.n	8003570 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800356c:	2300      	movs	r3, #0
 800356e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003570:	e02e      	b.n	80035d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2200      	movs	r2, #0
 800357a:	2180      	movs	r1, #128	@ 0x80
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f848 	bl	8003612 <UART_WaitOnFlagUntilTimeout>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e03a      	b.n	800360a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10b      	bne.n	80035b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	3302      	adds	r3, #2
 80035ae:	61bb      	str	r3, [r7, #24]
 80035b0:	e007      	b.n	80035c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	781a      	ldrb	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	3301      	adds	r3, #1
 80035c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1cb      	bne.n	8003572 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2200      	movs	r2, #0
 80035e2:	2140      	movs	r1, #64	@ 0x40
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f814 	bl	8003612 <UART_WaitOnFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e006      	b.n	800360a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	e000      	b.n	800360a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003608:	2302      	movs	r3, #2
  }
}
 800360a:	4618      	mov	r0, r3
 800360c:	3720      	adds	r7, #32
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b086      	sub	sp, #24
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	603b      	str	r3, [r7, #0]
 800361e:	4613      	mov	r3, r2
 8003620:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003622:	e03b      	b.n	800369c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362a:	d037      	beq.n	800369c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362c:	f7fe fb10 	bl	8001c50 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	6a3a      	ldr	r2, [r7, #32]
 8003638:	429a      	cmp	r2, r3
 800363a:	d302      	bcc.n	8003642 <UART_WaitOnFlagUntilTimeout+0x30>
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e03a      	b.n	80036bc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d023      	beq.n	800369c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b80      	cmp	r3, #128	@ 0x80
 8003658:	d020      	beq.n	800369c <UART_WaitOnFlagUntilTimeout+0x8a>
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b40      	cmp	r3, #64	@ 0x40
 800365e:	d01d      	beq.n	800369c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b08      	cmp	r3, #8
 800366c:	d116      	bne.n	800369c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	617b      	str	r3, [r7, #20]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	617b      	str	r3, [r7, #20]
 8003682:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f81d 	bl	80036c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2208      	movs	r2, #8
 800368e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e00f      	b.n	80036bc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	4013      	ands	r3, r2
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	bf0c      	ite	eq
 80036ac:	2301      	moveq	r3, #1
 80036ae:	2300      	movne	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	461a      	mov	r2, r3
 80036b4:	79fb      	ldrb	r3, [r7, #7]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d0b4      	beq.n	8003624 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b095      	sub	sp, #84	@ 0x54
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	330c      	adds	r3, #12
 80036d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036d6:	e853 3f00 	ldrex	r3, [r3]
 80036da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	330c      	adds	r3, #12
 80036ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036ec:	643a      	str	r2, [r7, #64]	@ 0x40
 80036ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036f4:	e841 2300 	strex	r3, r2, [r1]
 80036f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e5      	bne.n	80036cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3314      	adds	r3, #20
 8003706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	e853 3f00 	ldrex	r3, [r3]
 800370e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f023 0301 	bic.w	r3, r3, #1
 8003716:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3314      	adds	r3, #20
 800371e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003720:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003722:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003724:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003726:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003728:	e841 2300 	strex	r3, r2, [r1]
 800372c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800372e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e5      	bne.n	8003700 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003738:	2b01      	cmp	r3, #1
 800373a:	d119      	bne.n	8003770 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	330c      	adds	r3, #12
 8003742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	e853 3f00 	ldrex	r3, [r3]
 800374a:	60bb      	str	r3, [r7, #8]
   return(result);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f023 0310 	bic.w	r3, r3, #16
 8003752:	647b      	str	r3, [r7, #68]	@ 0x44
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	330c      	adds	r3, #12
 800375a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800375c:	61ba      	str	r2, [r7, #24]
 800375e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003760:	6979      	ldr	r1, [r7, #20]
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	e841 2300 	strex	r3, r2, [r1]
 8003768:	613b      	str	r3, [r7, #16]
   return(result);
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1e5      	bne.n	800373c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800377e:	bf00      	nop
 8003780:	3754      	adds	r7, #84	@ 0x54
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
	...

0800378c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800378c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003790:	b0c0      	sub	sp, #256	@ 0x100
 8003792:	af00      	add	r7, sp, #0
 8003794:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80037a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a8:	68d9      	ldr	r1, [r3, #12]
 80037aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	ea40 0301 	orr.w	r3, r0, r1
 80037b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	431a      	orrs	r2, r3
 80037c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	431a      	orrs	r2, r3
 80037cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80037e4:	f021 010c 	bic.w	r1, r1, #12
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80037f2:	430b      	orrs	r3, r1
 80037f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003806:	6999      	ldr	r1, [r3, #24]
 8003808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	ea40 0301 	orr.w	r3, r0, r1
 8003812:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4b8f      	ldr	r3, [pc, #572]	@ (8003a58 <UART_SetConfig+0x2cc>)
 800381c:	429a      	cmp	r2, r3
 800381e:	d005      	beq.n	800382c <UART_SetConfig+0xa0>
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	4b8d      	ldr	r3, [pc, #564]	@ (8003a5c <UART_SetConfig+0x2d0>)
 8003828:	429a      	cmp	r2, r3
 800382a:	d104      	bne.n	8003836 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800382c:	f7ff fadc 	bl	8002de8 <HAL_RCC_GetPCLK2Freq>
 8003830:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003834:	e003      	b.n	800383e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003836:	f7ff fac3 	bl	8002dc0 <HAL_RCC_GetPCLK1Freq>
 800383a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800383e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003848:	f040 810c 	bne.w	8003a64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800384c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003850:	2200      	movs	r2, #0
 8003852:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003856:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800385a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800385e:	4622      	mov	r2, r4
 8003860:	462b      	mov	r3, r5
 8003862:	1891      	adds	r1, r2, r2
 8003864:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003866:	415b      	adcs	r3, r3
 8003868:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800386a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800386e:	4621      	mov	r1, r4
 8003870:	eb12 0801 	adds.w	r8, r2, r1
 8003874:	4629      	mov	r1, r5
 8003876:	eb43 0901 	adc.w	r9, r3, r1
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003886:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800388a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800388e:	4690      	mov	r8, r2
 8003890:	4699      	mov	r9, r3
 8003892:	4623      	mov	r3, r4
 8003894:	eb18 0303 	adds.w	r3, r8, r3
 8003898:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800389c:	462b      	mov	r3, r5
 800389e:	eb49 0303 	adc.w	r3, r9, r3
 80038a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80038b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038ba:	460b      	mov	r3, r1
 80038bc:	18db      	adds	r3, r3, r3
 80038be:	653b      	str	r3, [r7, #80]	@ 0x50
 80038c0:	4613      	mov	r3, r2
 80038c2:	eb42 0303 	adc.w	r3, r2, r3
 80038c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80038c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80038cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80038d0:	f7fc fcd6 	bl	8000280 <__aeabi_uldivmod>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4b61      	ldr	r3, [pc, #388]	@ (8003a60 <UART_SetConfig+0x2d4>)
 80038da:	fba3 2302 	umull	r2, r3, r3, r2
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	011c      	lsls	r4, r3, #4
 80038e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038e6:	2200      	movs	r2, #0
 80038e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80038f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80038f4:	4642      	mov	r2, r8
 80038f6:	464b      	mov	r3, r9
 80038f8:	1891      	adds	r1, r2, r2
 80038fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80038fc:	415b      	adcs	r3, r3
 80038fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003900:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003904:	4641      	mov	r1, r8
 8003906:	eb12 0a01 	adds.w	sl, r2, r1
 800390a:	4649      	mov	r1, r9
 800390c:	eb43 0b01 	adc.w	fp, r3, r1
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800391c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003920:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003924:	4692      	mov	sl, r2
 8003926:	469b      	mov	fp, r3
 8003928:	4643      	mov	r3, r8
 800392a:	eb1a 0303 	adds.w	r3, sl, r3
 800392e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003932:	464b      	mov	r3, r9
 8003934:	eb4b 0303 	adc.w	r3, fp, r3
 8003938:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003948:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800394c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003950:	460b      	mov	r3, r1
 8003952:	18db      	adds	r3, r3, r3
 8003954:	643b      	str	r3, [r7, #64]	@ 0x40
 8003956:	4613      	mov	r3, r2
 8003958:	eb42 0303 	adc.w	r3, r2, r3
 800395c:	647b      	str	r3, [r7, #68]	@ 0x44
 800395e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003962:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003966:	f7fc fc8b 	bl	8000280 <__aeabi_uldivmod>
 800396a:	4602      	mov	r2, r0
 800396c:	460b      	mov	r3, r1
 800396e:	4611      	mov	r1, r2
 8003970:	4b3b      	ldr	r3, [pc, #236]	@ (8003a60 <UART_SetConfig+0x2d4>)
 8003972:	fba3 2301 	umull	r2, r3, r3, r1
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	2264      	movs	r2, #100	@ 0x64
 800397a:	fb02 f303 	mul.w	r3, r2, r3
 800397e:	1acb      	subs	r3, r1, r3
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003986:	4b36      	ldr	r3, [pc, #216]	@ (8003a60 <UART_SetConfig+0x2d4>)
 8003988:	fba3 2302 	umull	r2, r3, r3, r2
 800398c:	095b      	lsrs	r3, r3, #5
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003994:	441c      	add	r4, r3
 8003996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800399a:	2200      	movs	r2, #0
 800399c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80039a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80039a8:	4642      	mov	r2, r8
 80039aa:	464b      	mov	r3, r9
 80039ac:	1891      	adds	r1, r2, r2
 80039ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039b0:	415b      	adcs	r3, r3
 80039b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80039b8:	4641      	mov	r1, r8
 80039ba:	1851      	adds	r1, r2, r1
 80039bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80039be:	4649      	mov	r1, r9
 80039c0:	414b      	adcs	r3, r1
 80039c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80039c4:	f04f 0200 	mov.w	r2, #0
 80039c8:	f04f 0300 	mov.w	r3, #0
 80039cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80039d0:	4659      	mov	r1, fp
 80039d2:	00cb      	lsls	r3, r1, #3
 80039d4:	4651      	mov	r1, sl
 80039d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039da:	4651      	mov	r1, sl
 80039dc:	00ca      	lsls	r2, r1, #3
 80039de:	4610      	mov	r0, r2
 80039e0:	4619      	mov	r1, r3
 80039e2:	4603      	mov	r3, r0
 80039e4:	4642      	mov	r2, r8
 80039e6:	189b      	adds	r3, r3, r2
 80039e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039ec:	464b      	mov	r3, r9
 80039ee:	460a      	mov	r2, r1
 80039f0:	eb42 0303 	adc.w	r3, r2, r3
 80039f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	18db      	adds	r3, r3, r3
 8003a10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a12:	4613      	mov	r3, r2
 8003a14:	eb42 0303 	adc.w	r3, r2, r3
 8003a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a22:	f7fc fc2d 	bl	8000280 <__aeabi_uldivmod>
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a60 <UART_SetConfig+0x2d4>)
 8003a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a30:	095b      	lsrs	r3, r3, #5
 8003a32:	2164      	movs	r1, #100	@ 0x64
 8003a34:	fb01 f303 	mul.w	r3, r1, r3
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	3332      	adds	r3, #50	@ 0x32
 8003a3e:	4a08      	ldr	r2, [pc, #32]	@ (8003a60 <UART_SetConfig+0x2d4>)
 8003a40:	fba2 2303 	umull	r2, r3, r2, r3
 8003a44:	095b      	lsrs	r3, r3, #5
 8003a46:	f003 0207 	and.w	r2, r3, #7
 8003a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4422      	add	r2, r4
 8003a52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a54:	e106      	b.n	8003c64 <UART_SetConfig+0x4d8>
 8003a56:	bf00      	nop
 8003a58:	40011000 	.word	0x40011000
 8003a5c:	40011400 	.word	0x40011400
 8003a60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a76:	4642      	mov	r2, r8
 8003a78:	464b      	mov	r3, r9
 8003a7a:	1891      	adds	r1, r2, r2
 8003a7c:	6239      	str	r1, [r7, #32]
 8003a7e:	415b      	adcs	r3, r3
 8003a80:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a86:	4641      	mov	r1, r8
 8003a88:	1854      	adds	r4, r2, r1
 8003a8a:	4649      	mov	r1, r9
 8003a8c:	eb43 0501 	adc.w	r5, r3, r1
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	00eb      	lsls	r3, r5, #3
 8003a9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a9e:	00e2      	lsls	r2, r4, #3
 8003aa0:	4614      	mov	r4, r2
 8003aa2:	461d      	mov	r5, r3
 8003aa4:	4643      	mov	r3, r8
 8003aa6:	18e3      	adds	r3, r4, r3
 8003aa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003aac:	464b      	mov	r3, r9
 8003aae:	eb45 0303 	adc.w	r3, r5, r3
 8003ab2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ac2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	f04f 0300 	mov.w	r3, #0
 8003ace:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	008b      	lsls	r3, r1, #2
 8003ad6:	4621      	mov	r1, r4
 8003ad8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003adc:	4621      	mov	r1, r4
 8003ade:	008a      	lsls	r2, r1, #2
 8003ae0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ae4:	f7fc fbcc 	bl	8000280 <__aeabi_uldivmod>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4b60      	ldr	r3, [pc, #384]	@ (8003c70 <UART_SetConfig+0x4e4>)
 8003aee:	fba3 2302 	umull	r2, r3, r3, r2
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	011c      	lsls	r4, r3, #4
 8003af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003afa:	2200      	movs	r2, #0
 8003afc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b08:	4642      	mov	r2, r8
 8003b0a:	464b      	mov	r3, r9
 8003b0c:	1891      	adds	r1, r2, r2
 8003b0e:	61b9      	str	r1, [r7, #24]
 8003b10:	415b      	adcs	r3, r3
 8003b12:	61fb      	str	r3, [r7, #28]
 8003b14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b18:	4641      	mov	r1, r8
 8003b1a:	1851      	adds	r1, r2, r1
 8003b1c:	6139      	str	r1, [r7, #16]
 8003b1e:	4649      	mov	r1, r9
 8003b20:	414b      	adcs	r3, r1
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b30:	4659      	mov	r1, fp
 8003b32:	00cb      	lsls	r3, r1, #3
 8003b34:	4651      	mov	r1, sl
 8003b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b3a:	4651      	mov	r1, sl
 8003b3c:	00ca      	lsls	r2, r1, #3
 8003b3e:	4610      	mov	r0, r2
 8003b40:	4619      	mov	r1, r3
 8003b42:	4603      	mov	r3, r0
 8003b44:	4642      	mov	r2, r8
 8003b46:	189b      	adds	r3, r3, r2
 8003b48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b4c:	464b      	mov	r3, r9
 8003b4e:	460a      	mov	r2, r1
 8003b50:	eb42 0303 	adc.w	r3, r2, r3
 8003b54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b62:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b70:	4649      	mov	r1, r9
 8003b72:	008b      	lsls	r3, r1, #2
 8003b74:	4641      	mov	r1, r8
 8003b76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b7a:	4641      	mov	r1, r8
 8003b7c:	008a      	lsls	r2, r1, #2
 8003b7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b82:	f7fc fb7d 	bl	8000280 <__aeabi_uldivmod>
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	4b38      	ldr	r3, [pc, #224]	@ (8003c70 <UART_SetConfig+0x4e4>)
 8003b8e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	2264      	movs	r2, #100	@ 0x64
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	1acb      	subs	r3, r1, r3
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	3332      	adds	r3, #50	@ 0x32
 8003ba0:	4a33      	ldr	r2, [pc, #204]	@ (8003c70 <UART_SetConfig+0x4e4>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bac:	441c      	add	r4, r3
 8003bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bb6:	677a      	str	r2, [r7, #116]	@ 0x74
 8003bb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003bbc:	4642      	mov	r2, r8
 8003bbe:	464b      	mov	r3, r9
 8003bc0:	1891      	adds	r1, r2, r2
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	415b      	adcs	r3, r3
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bcc:	4641      	mov	r1, r8
 8003bce:	1851      	adds	r1, r2, r1
 8003bd0:	6039      	str	r1, [r7, #0]
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	414b      	adcs	r3, r1
 8003bd6:	607b      	str	r3, [r7, #4]
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003be4:	4659      	mov	r1, fp
 8003be6:	00cb      	lsls	r3, r1, #3
 8003be8:	4651      	mov	r1, sl
 8003bea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bee:	4651      	mov	r1, sl
 8003bf0:	00ca      	lsls	r2, r1, #3
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	4642      	mov	r2, r8
 8003bfa:	189b      	adds	r3, r3, r2
 8003bfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bfe:	464b      	mov	r3, r9
 8003c00:	460a      	mov	r2, r1
 8003c02:	eb42 0303 	adc.w	r3, r2, r3
 8003c06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c12:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c20:	4649      	mov	r1, r9
 8003c22:	008b      	lsls	r3, r1, #2
 8003c24:	4641      	mov	r1, r8
 8003c26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c2a:	4641      	mov	r1, r8
 8003c2c:	008a      	lsls	r2, r1, #2
 8003c2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c32:	f7fc fb25 	bl	8000280 <__aeabi_uldivmod>
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c70 <UART_SetConfig+0x4e4>)
 8003c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c40:	095b      	lsrs	r3, r3, #5
 8003c42:	2164      	movs	r1, #100	@ 0x64
 8003c44:	fb01 f303 	mul.w	r3, r1, r3
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	3332      	adds	r3, #50	@ 0x32
 8003c4e:	4a08      	ldr	r2, [pc, #32]	@ (8003c70 <UART_SetConfig+0x4e4>)
 8003c50:	fba2 2303 	umull	r2, r3, r2, r3
 8003c54:	095b      	lsrs	r3, r3, #5
 8003c56:	f003 020f 	and.w	r2, r3, #15
 8003c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4422      	add	r2, r4
 8003c62:	609a      	str	r2, [r3, #8]
}
 8003c64:	bf00      	nop
 8003c66:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c70:	51eb851f 	.word	0x51eb851f

08003c74 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08c      	sub	sp, #48	@ 0x30
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	71fb      	strb	r3, [r7, #7]
 8003c80:	460b      	mov	r3, r1
 8003c82:	71bb      	strb	r3, [r7, #6]
 8003c84:	4613      	mov	r3, r2
 8003c86:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8003c88:	79fb      	ldrb	r3, [r7, #7]
 8003c8a:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8003c8c:	79bb      	ldrb	r3, [r7, #6]
 8003c8e:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8003c90:	797b      	ldrb	r3, [r7, #5]
 8003c92:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003c94:	f107 030c 	add.w	r3, r7, #12
 8003c98:	2207      	movs	r2, #7
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f001 fc0d 	bl	80054bc <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003ca2:	f107 0318 	add.w	r3, r7, #24
 8003ca6:	2218      	movs	r2, #24
 8003ca8:	2100      	movs	r1, #0
 8003caa:	4618      	mov	r0, r3
 8003cac:	f001 fc06 	bl	80054bc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003cb0:	233f      	movs	r3, #63	@ 0x3f
 8003cb2:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8003cb4:	238a      	movs	r3, #138	@ 0x8a
 8003cb6:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8003cb8:	f107 0314 	add.w	r3, r7, #20
 8003cbc:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &resp;
 8003cc2:	f107 030c 	add.w	r3, r7, #12
 8003cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8003cc8:	2307      	movs	r3, #7
 8003cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003ccc:	f107 0318 	add.w	r3, r7, #24
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 fe78 	bl	80049c8 <hci_send_req>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	da01      	bge.n	8003ce2 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8003cde:	23ff      	movs	r3, #255	@ 0xff
 8003ce0:	e014      	b.n	8003d0c <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8003ce2:	7b3b      	ldrb	r3, [r7, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8003ce8:	7b3b      	ldrb	r3, [r7, #12]
 8003cea:	e00f      	b.n	8003d0c <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8003cec:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8003cf6:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cfe:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8003d00:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d08:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3730      	adds	r7, #48	@ 0x30
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08e      	sub	sp, #56	@ 0x38
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	607a      	str	r2, [r7, #4]
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	4603      	mov	r3, r0
 8003d22:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003d28:	f107 0314 	add.w	r3, r7, #20
 8003d2c:	2207      	movs	r2, #7
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4618      	mov	r0, r3
 8003d32:	f001 fbc3 	bl	80054bc <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003d36:	f107 0320 	add.w	r3, r7, #32
 8003d3a:	2218      	movs	r2, #24
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f001 fbbc 	bl	80054bc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003d44:	233f      	movs	r3, #63	@ 0x3f
 8003d46:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 8003d48:	238a      	movs	r3, #138	@ 0x8a
 8003d4a:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = &cp;
 8003d4c:	f107 031c 	add.w	r3, r7, #28
 8003d50:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = sizeof(cp);
 8003d52:	2301      	movs	r3, #1
 8003d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8003d56:	f107 0314 	add.w	r3, r7, #20
 8003d5a:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8003d5c:	2307      	movs	r3, #7
 8003d5e:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003d60:	f107 0320 	add.w	r3, r7, #32
 8003d64:	2100      	movs	r1, #0
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fe2e 	bl	80049c8 <hci_send_req>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	da01      	bge.n	8003d76 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8003d72:	23ff      	movs	r3, #255	@ 0xff
 8003d74:	e014      	b.n	8003da0 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 8003d76:	7d3b      	ldrb	r3, [r7, #20]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8003d7c:	7d3b      	ldrb	r3, [r7, #20]
 8003d7e:	e00f      	b.n	8003da0 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8003d80:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8003d8a:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8003d94:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3738      	adds	r7, #56	@ 0x38
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8003da8:	b590      	push	{r4, r7, lr}
 8003daa:	b095      	sub	sp, #84	@ 0x54
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4604      	mov	r4, r0
 8003db0:	4608      	mov	r0, r1
 8003db2:	4611      	mov	r1, r2
 8003db4:	461a      	mov	r2, r3
 8003db6:	4623      	mov	r3, r4
 8003db8:	71fb      	strb	r3, [r7, #7]
 8003dba:	4603      	mov	r3, r0
 8003dbc:	80bb      	strh	r3, [r7, #4]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	807b      	strh	r3, [r7, #2]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8003dcc:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8003dd0:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8003dd4:	4413      	add	r3, r2
 8003dd6:	330e      	adds	r3, #14
 8003dd8:	2b28      	cmp	r3, #40	@ 0x28
 8003dda:	d901      	bls.n	8003de0 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8003ddc:	2342      	movs	r3, #66	@ 0x42
 8003dde:	e0c9      	b.n	8003f74 <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 8003de0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003de4:	3350      	adds	r3, #80	@ 0x50
 8003de6:	443b      	add	r3, r7
 8003de8:	79fa      	ldrb	r2, [r7, #7]
 8003dea:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8003dee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003df2:	3301      	adds	r3, #1
 8003df4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8003df8:	88bb      	ldrh	r3, [r7, #4]
 8003dfa:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8003dfc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003e00:	f107 0208 	add.w	r2, r7, #8
 8003e04:	4413      	add	r3, r2
 8003e06:	88ba      	ldrh	r2, [r7, #4]
 8003e08:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8003e0a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003e0e:	3302      	adds	r3, #2
 8003e10:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8003e14:	887b      	ldrh	r3, [r7, #2]
 8003e16:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8003e18:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003e1c:	f107 0208 	add.w	r2, r7, #8
 8003e20:	4413      	add	r3, r2
 8003e22:	887a      	ldrh	r2, [r7, #2]
 8003e24:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8003e26:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003e2a:	3302      	adds	r3, #2
 8003e2c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = OwnAddrType;
 8003e30:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003e34:	3350      	adds	r3, #80	@ 0x50
 8003e36:	443b      	add	r3, r7
 8003e38:	79ba      	ldrb	r2, [r7, #6]
 8003e3a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8003e3e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003e42:	3301      	adds	r3, #1
 8003e44:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8003e48:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003e4c:	3350      	adds	r3, #80	@ 0x50
 8003e4e:	443b      	add	r3, r7
 8003e50:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8003e54:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8003e58:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = LocalNameLen;
 8003e62:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003e66:	3350      	adds	r3, #80	@ 0x50
 8003e68:	443b      	add	r3, r7
 8003e6a:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8003e6e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8003e72:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003e76:	3301      	adds	r3, #1
 8003e78:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8003e7c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003e80:	f107 0208 	add.w	r2, r7, #8
 8003e84:	4413      	add	r3, r2
 8003e86:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8003e8a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f001 fb90 	bl	80055b2 <memcpy>
  indx +=  LocalNameLen;
 8003e92:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003e96:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8003ea0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003ea4:	3350      	adds	r3, #80	@ 0x50
 8003ea6:	443b      	add	r3, r7
 8003ea8:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8003eac:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8003eb0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8003eba:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003ebe:	f107 0208 	add.w	r2, r7, #8
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8003ec8:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f001 fb71 	bl	80055b2 <memcpy>
  indx +=  ServiceUUIDLen;  
 8003ed0:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003ed4:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8003ed8:	4413      	add	r3, r2
 8003eda:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8003ede:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8003ee2:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8003ee6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003eea:	f107 0208 	add.w	r2, r7, #8
 8003eee:	4413      	add	r3, r2
 8003ef0:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8003ef4:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8003ef6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003efa:	3302      	adds	r3, #2
 8003efc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8003f00:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8003f04:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8003f08:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003f0c:	f107 0208 	add.w	r2, r7, #8
 8003f10:	4413      	add	r3, r2
 8003f12:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8003f16:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8003f18:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003f1c:	3302      	adds	r3, #2
 8003f1e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003f22:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003f26:	2218      	movs	r2, #24
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f001 fac6 	bl	80054bc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003f30:	233f      	movs	r3, #63	@ 0x3f
 8003f32:	86bb      	strh	r3, [r7, #52]	@ 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8003f34:	2383      	movs	r3, #131	@ 0x83
 8003f36:	86fb      	strh	r3, [r7, #54]	@ 0x36
  rq.cparam = (void *)buffer;
 8003f38:	f107 0308 	add.w	r3, r7, #8
 8003f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.clen = indx;
 8003f3e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003f42:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rparam = &status;
 8003f44:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 8003f48:	647b      	str	r3, [r7, #68]	@ 0x44
  rq.rlen = 1;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8003f4e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003f52:	2100      	movs	r1, #0
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fd37 	bl	80049c8 <hci_send_req>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	da01      	bge.n	8003f64 <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 8003f60:	23ff      	movs	r3, #255	@ 0xff
 8003f62:	e007      	b.n	8003f74 <aci_gap_set_discoverable+0x1cc>

  if (status) {
 8003f64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d002      	beq.n	8003f72 <aci_gap_set_discoverable+0x1ca>
    return status;
 8003f6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003f70:	e000      	b.n	8003f74 <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3754      	adds	r7, #84	@ 0x54
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd90      	pop	{r4, r7, pc}

08003f7c <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8003f7c:	b590      	push	{r4, r7, lr}
 8003f7e:	b091      	sub	sp, #68	@ 0x44
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	603a      	str	r2, [r7, #0]
 8003f84:	461a      	mov	r2, r3
 8003f86:	4603      	mov	r3, r0
 8003f88:	71fb      	strb	r3, [r7, #7]
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	71bb      	strb	r3, [r7, #6]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 8003f96:	79bb      	ldrb	r3, [r7, #6]
 8003f98:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8003f9a:	79bb      	ldrb	r3, [r7, #6]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	f107 030e 	add.w	r3, r7, #14
 8003fa6:	6814      	ldr	r4, [r2, #0]
 8003fa8:	6850      	ldr	r0, [r2, #4]
 8003faa:	6891      	ldr	r1, [r2, #8]
 8003fac:	68d2      	ldr	r2, [r2, #12]
 8003fae:	601c      	str	r4, [r3, #0]
 8003fb0:	6058      	str	r0, [r3, #4]
 8003fb2:	6099      	str	r1, [r3, #8]
 8003fb4:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8003fb6:	797b      	ldrb	r3, [r7, #5]
 8003fb8:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8003fba:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8003fbe:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8003fc0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8003fc4:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8003fc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fca:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
  cp.bonding_mode = bonding_mode;
 8003fce:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8003fd2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003fd6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003fda:	2218      	movs	r2, #24
 8003fdc:	2100      	movs	r1, #0
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f001 fa6c 	bl	80054bc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003fe4:	233f      	movs	r3, #63	@ 0x3f
 8003fe6:	853b      	strh	r3, [r7, #40]	@ 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8003fe8:	2386      	movs	r3, #134	@ 0x86
 8003fea:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rq.cparam = &cp;
 8003fec:	f107 030c 	add.w	r3, r7, #12
 8003ff0:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.clen = sizeof(cp);
 8003ff2:	231a      	movs	r3, #26
 8003ff4:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rparam = &status;
 8003ff6:	f107 030b 	add.w	r3, r7, #11
 8003ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rlen = 1;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8004000:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004004:	2100      	movs	r1, #0
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fcde 	bl	80049c8 <hci_send_req>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	da01      	bge.n	8004016 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 8004012:	23ff      	movs	r3, #255	@ 0xff
 8004014:	e005      	b.n	8004022 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 8004016:	7afb      	ldrb	r3, [r7, #11]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <aci_gap_set_auth_requirement+0xa4>
    return status;
 800401c:	7afb      	ldrb	r3, [r7, #11]
 800401e:	e000      	b.n	8004022 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3744      	adds	r7, #68	@ 0x44
 8004026:	46bd      	mov	sp, r7
 8004028:	bd90      	pop	{r4, r7, pc}

0800402a <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b088      	sub	sp, #32
 800402e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004030:	f107 0308 	add.w	r3, r7, #8
 8004034:	2218      	movs	r2, #24
 8004036:	2100      	movs	r1, #0
 8004038:	4618      	mov	r0, r3
 800403a:	f001 fa3f 	bl	80054bc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800403e:	233f      	movs	r3, #63	@ 0x3f
 8004040:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8004042:	f240 1301 	movw	r3, #257	@ 0x101
 8004046:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004048:	1dfb      	adds	r3, r7, #7
 800404a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800404c:	2301      	movs	r3, #1
 800404e:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8004050:	f107 0308 	add.w	r3, r7, #8
 8004054:	2100      	movs	r1, #0
 8004056:	4618      	mov	r0, r3
 8004058:	f000 fcb6 	bl	80049c8 <hci_send_req>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	da01      	bge.n	8004066 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8004062:	23ff      	movs	r3, #255	@ 0xff
 8004064:	e000      	b.n	8004068 <aci_gatt_init+0x3e>

  return status;
 8004066:	79fb      	ldrb	r3, [r7, #7]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3720      	adds	r7, #32
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b090      	sub	sp, #64	@ 0x40
 8004074:	af00      	add	r7, sp, #0
 8004076:	6039      	str	r1, [r7, #0]
 8004078:	4611      	mov	r1, r2
 800407a:	461a      	mov	r2, r3
 800407c:	4603      	mov	r3, r0
 800407e:	71fb      	strb	r3, [r7, #7]
 8004080:	460b      	mov	r3, r1
 8004082:	71bb      	strb	r3, [r7, #6]
 8004084:	4613      	mov	r3, r2
 8004086:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8004088:	2300      	movs	r3, #0
 800408a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_uuid_type;
 800408e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004092:	3340      	adds	r3, #64	@ 0x40
 8004094:	443b      	add	r3, r7
 8004096:	79fa      	ldrb	r2, [r7, #7]
 8004098:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800409c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80040a0:	3301      	adds	r3, #1
 80040a2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d103      	bne.n	80040b4 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 80040ac:	2302      	movs	r3, #2
 80040ae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80040b2:	e002      	b.n	80040ba <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 80040b4:	2310      	movs	r3, #16
 80040b6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 80040ba:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80040be:	f107 020c 	add.w	r2, r7, #12
 80040c2:	4413      	add	r3, r2
 80040c4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80040c8:	6839      	ldr	r1, [r7, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f001 fa71 	bl	80055b2 <memcpy>
  indx +=  uuid_len;
 80040d0:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 80040d4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80040d8:	4413      	add	r3, r2
 80040da:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_type;
 80040de:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80040e2:	3340      	adds	r3, #64	@ 0x40
 80040e4:	443b      	add	r3, r7
 80040e6:	79ba      	ldrb	r2, [r7, #6]
 80040e8:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80040ec:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80040f0:	3301      	adds	r3, #1
 80040f2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = max_attr_records;
 80040f6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80040fa:	3340      	adds	r3, #64	@ 0x40
 80040fc:	443b      	add	r3, r7
 80040fe:	797a      	ldrb	r2, [r7, #5]
 8004100:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8004104:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004108:	3301      	adds	r3, #1
 800410a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800410e:	f107 0320 	add.w	r3, r7, #32
 8004112:	2203      	movs	r2, #3
 8004114:	2100      	movs	r1, #0
 8004116:	4618      	mov	r0, r3
 8004118:	f001 f9d0 	bl	80054bc <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800411c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004120:	2218      	movs	r2, #24
 8004122:	2100      	movs	r1, #0
 8004124:	4618      	mov	r0, r3
 8004126:	f001 f9c9 	bl	80054bc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800412a:	233f      	movs	r3, #63	@ 0x3f
 800412c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 800412e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8004132:	84fb      	strh	r3, [r7, #38]	@ 0x26
  rq.cparam = (void *)buffer;
 8004134:	f107 030c 	add.w	r3, r7, #12
 8004138:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.clen = indx;
 800413a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800413e:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rparam = &resp;
 8004140:	f107 0320 	add.w	r3, r7, #32
 8004144:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8004146:	2303      	movs	r3, #3
 8004148:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800414a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800414e:	2100      	movs	r1, #0
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fc39 	bl	80049c8 <hci_send_req>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	da01      	bge.n	8004160 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 800415c:	23ff      	movs	r3, #255	@ 0xff
 800415e:	e00c      	b.n	800417a <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 8004160:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <aci_gatt_add_serv+0xfe>
    return resp.status;
 8004168:	f897 3020 	ldrb.w	r3, [r7, #32]
 800416c:	e005      	b.n	800417a <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 800416e:	f8b7 3021 	ldrh.w	r3, [r7, #33]	@ 0x21
 8004172:	b29a      	uxth	r2, r3
 8004174:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004176:	801a      	strh	r2, [r3, #0]

  return 0;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3740      	adds	r7, #64	@ 0x40
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b092      	sub	sp, #72	@ 0x48
 8004186:	af00      	add	r7, sp, #0
 8004188:	603a      	str	r2, [r7, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	4603      	mov	r3, r0
 800418e:	80fb      	strh	r3, [r7, #6]
 8004190:	460b      	mov	r3, r1
 8004192:	717b      	strb	r3, [r7, #5]
 8004194:	4613      	mov	r3, r2
 8004196:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8004198:	2300      	movs	r3, #0
 800419a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  serviceHandle = htobs(serviceHandle);
 800419e:	88fb      	ldrh	r3, [r7, #6]
 80041a0:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 80041a2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80041a6:	f107 020c 	add.w	r2, r7, #12
 80041aa:	4413      	add	r3, r2
 80041ac:	88fa      	ldrh	r2, [r7, #6]
 80041ae:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80041b0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80041b4:	3302      	adds	r3, #2
 80041b6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charUuidType;
 80041ba:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80041be:	3348      	adds	r3, #72	@ 0x48
 80041c0:	443b      	add	r3, r7
 80041c2:	797a      	ldrb	r2, [r7, #5]
 80041c4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80041c8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80041cc:	3301      	adds	r3, #1
 80041ce:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  if(charUuidType == UUID_TYPE_16){
 80041d2:	797b      	ldrb	r3, [r7, #5]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d103      	bne.n	80041e0 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 80041d8:	2302      	movs	r3, #2
 80041da:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80041de:	e002      	b.n	80041e6 <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 80041e0:	2310      	movs	r3, #16
 80041e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80041e6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80041ea:	f107 020c 	add.w	r2, r7, #12
 80041ee:	4413      	add	r3, r2
 80041f0:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80041f4:	6839      	ldr	r1, [r7, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f001 f9db 	bl	80055b2 <memcpy>
  indx +=  uuid_len;
 80041fc:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8004200:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004204:	4413      	add	r3, r2
 8004206:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charValueLen;
 800420a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800420e:	3348      	adds	r3, #72	@ 0x48
 8004210:	443b      	add	r3, r7
 8004212:	793a      	ldrb	r2, [r7, #4]
 8004214:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8004218:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800421c:	3301      	adds	r3, #1
 800421e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charProperties;
 8004222:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004226:	3348      	adds	r3, #72	@ 0x48
 8004228:	443b      	add	r3, r7
 800422a:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 800422e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8004232:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004236:	3301      	adds	r3, #1
 8004238:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = secPermissions;
 800423c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004240:	3348      	adds	r3, #72	@ 0x48
 8004242:	443b      	add	r3, r7
 8004244:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8004248:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800424c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004250:	3301      	adds	r3, #1
 8004252:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = gattEvtMask;
 8004256:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800425a:	3348      	adds	r3, #72	@ 0x48
 800425c:	443b      	add	r3, r7
 800425e:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 8004262:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8004266:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800426a:	3301      	adds	r3, #1
 800426c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = encryKeySize;
 8004270:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004274:	3348      	adds	r3, #72	@ 0x48
 8004276:	443b      	add	r3, r7
 8004278:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800427c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8004280:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004284:	3301      	adds	r3, #1
 8004286:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = isVariable;
 800428a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800428e:	3348      	adds	r3, #72	@ 0x48
 8004290:	443b      	add	r3, r7
 8004292:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8004296:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800429a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800429e:	3301      	adds	r3, #1
 80042a0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80042a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80042a8:	2203      	movs	r2, #3
 80042aa:	2100      	movs	r1, #0
 80042ac:	4618      	mov	r0, r3
 80042ae:	f001 f905 	bl	80054bc <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80042b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80042b6:	2218      	movs	r2, #24
 80042b8:	2100      	movs	r1, #0
 80042ba:	4618      	mov	r0, r3
 80042bc:	f001 f8fe 	bl	80054bc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80042c0:	233f      	movs	r3, #63	@ 0x3f
 80042c2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 80042c4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80042c8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 80042ca:	f107 030c 	add.w	r3, r7, #12
 80042ce:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 80042d0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80042d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &resp;
 80042d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80042da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 80042dc:	2303      	movs	r3, #3
 80042de:	643b      	str	r3, [r7, #64]	@ 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 80042e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80042e4:	2100      	movs	r1, #0
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fb6e 	bl	80049c8 <hci_send_req>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	da01      	bge.n	80042f6 <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 80042f2:	23ff      	movs	r3, #255	@ 0xff
 80042f4:	e00c      	b.n	8004310 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 80042f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <aci_gatt_add_char+0x182>
    return resp.status;
 80042fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004302:	e005      	b.n	8004310 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8004304:	f8b7 3029 	ldrh.w	r3, [r7, #41]	@ 0x29
 8004308:	b29a      	uxth	r2, r3
 800430a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800430c:	801a      	strh	r2, [r3, #0]

  return 0;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3748      	adds	r7, #72	@ 0x48
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8004318:	b590      	push	{r4, r7, lr}
 800431a:	b0ab      	sub	sp, #172	@ 0xac
 800431c:	af00      	add	r7, sp, #0
 800431e:	4604      	mov	r4, r0
 8004320:	4608      	mov	r0, r1
 8004322:	4611      	mov	r1, r2
 8004324:	461a      	mov	r2, r3
 8004326:	4623      	mov	r3, r4
 8004328:	80fb      	strh	r3, [r7, #6]
 800432a:	4603      	mov	r3, r0
 800432c:	80bb      	strh	r3, [r7, #4]
 800432e:	460b      	mov	r3, r1
 8004330:	70fb      	strb	r3, [r7, #3]
 8004332:	4613      	mov	r3, r2
 8004334:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8004336:	2300      	movs	r3, #0
 8004338:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800433c:	78bb      	ldrb	r3, [r7, #2]
 800433e:	2b7a      	cmp	r3, #122	@ 0x7a
 8004340:	d901      	bls.n	8004346 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 8004342:	2342      	movs	r3, #66	@ 0x42
 8004344:	e074      	b.n	8004430 <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800434a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800434e:	f107 0208 	add.w	r2, r7, #8
 8004352:	4413      	add	r3, r2
 8004354:	88fa      	ldrh	r2, [r7, #6]
 8004356:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8004358:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800435c:	3302      	adds	r3, #2
 800435e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  charHandle = htobs(charHandle);
 8004362:	88bb      	ldrh	r3, [r7, #4]
 8004364:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8004366:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800436a:	f107 0208 	add.w	r2, r7, #8
 800436e:	4413      	add	r3, r2
 8004370:	88ba      	ldrh	r2, [r7, #4]
 8004372:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8004374:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8004378:	3302      	adds	r3, #2
 800437a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValOffset;
 800437e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8004382:	33a8      	adds	r3, #168	@ 0xa8
 8004384:	443b      	add	r3, r7
 8004386:	78fa      	ldrb	r2, [r7, #3]
 8004388:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800438c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8004390:	3301      	adds	r3, #1
 8004392:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValueLen;
 8004396:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800439a:	33a8      	adds	r3, #168	@ 0xa8
 800439c:	443b      	add	r3, r7
 800439e:	78ba      	ldrb	r2, [r7, #2]
 80043a0:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80043a4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80043a8:	3301      	adds	r3, #1
 80043aa:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 80043ae:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80043b2:	f107 0208 	add.w	r2, r7, #8
 80043b6:	4413      	add	r3, r2
 80043b8:	78ba      	ldrb	r2, [r7, #2]
 80043ba:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 80043be:	4618      	mov	r0, r3
 80043c0:	f001 f8f7 	bl	80055b2 <memcpy>
  indx +=  charValueLen;
 80043c4:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 80043c8:	78bb      	ldrb	r3, [r7, #2]
 80043ca:	4413      	add	r3, r2
 80043cc:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80043d0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80043d4:	2218      	movs	r2, #24
 80043d6:	2100      	movs	r1, #0
 80043d8:	4618      	mov	r0, r3
 80043da:	f001 f86f 	bl	80054bc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80043de:	233f      	movs	r3, #63	@ 0x3f
 80043e0:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 80043e4:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80043e8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 80043ec:	f107 0308 	add.w	r3, r7, #8
 80043f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 80043f4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80043f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 80043fc:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 8004400:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 8004404:	2301      	movs	r3, #1
 8004406:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800440a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800440e:	2100      	movs	r1, #0
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fad9 	bl	80049c8 <hci_send_req>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	da01      	bge.n	8004420 <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 800441c:	23ff      	movs	r3, #255	@ 0xff
 800441e:	e007      	b.n	8004430 <aci_gatt_update_char_value+0x118>

  if (status) {
 8004420:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <aci_gatt_update_char_value+0x116>
    return status;
 8004428:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800442c:	e000      	b.n	8004430 <aci_gatt_update_char_value+0x118>
  }

  return 0;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	37ac      	adds	r7, #172	@ 0xac
 8004434:	46bd      	mov	sp, r7
 8004436:	bd90      	pop	{r4, r7, pc}

08004438 <aci_gatt_write_without_response>:
  return status;
}

tBleStatus aci_gatt_write_without_response(uint16_t conn_handle, uint16_t attr_handle,
                                              uint8_t val_len, const uint8_t* attr_val)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b092      	sub	sp, #72	@ 0x48
 800443c:	af00      	add	r7, sp, #0
 800443e:	607b      	str	r3, [r7, #4]
 8004440:	4603      	mov	r3, r0
 8004442:	81fb      	strh	r3, [r7, #14]
 8004444:	460b      	mov	r3, r1
 8004446:	81bb      	strh	r3, [r7, #12]
 8004448:	4613      	mov	r3, r2
 800444a:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  gatt_write_without_resp_cp cp;
  
  if(val_len > sizeof(cp.attr_val))
 800444c:	7afb      	ldrb	r3, [r7, #11]
 800444e:	2b14      	cmp	r3, #20
 8004450:	d901      	bls.n	8004456 <aci_gatt_write_without_response+0x1e>
    return BLE_STATUS_INVALID_PARAMS;
 8004452:	2342      	movs	r3, #66	@ 0x42
 8004454:	e031      	b.n	80044ba <aci_gatt_write_without_response+0x82>

  cp.conn_handle = htobs(conn_handle);
 8004456:	89fb      	ldrh	r3, [r7, #14]
 8004458:	82bb      	strh	r3, [r7, #20]
  cp.attr_handle = htobs(attr_handle);
 800445a:	89bb      	ldrh	r3, [r7, #12]
 800445c:	82fb      	strh	r3, [r7, #22]
  cp.val_len = val_len;
 800445e:	7afb      	ldrb	r3, [r7, #11]
 8004460:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 8004462:	7afa      	ldrb	r2, [r7, #11]
 8004464:	f107 0314 	add.w	r3, r7, #20
 8004468:	3305      	adds	r3, #5
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	4618      	mov	r0, r3
 800446e:	f001 f8a0 	bl	80055b2 <memcpy>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004472:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004476:	2218      	movs	r2, #24
 8004478:	2100      	movs	r1, #0
 800447a:	4618      	mov	r0, r3
 800447c:	f001 f81e 	bl	80054bc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004480:	233f      	movs	r3, #63	@ 0x3f
 8004482:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_GATT_WRITE_WITHOUT_RESPONSE;
 8004484:	f240 1323 	movw	r3, #291	@ 0x123
 8004488:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &cp;
 800448a:	f107 0314 	add.w	r3, r7, #20
 800448e:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 8004490:	7afb      	ldrb	r3, [r7, #11]
 8004492:	3305      	adds	r3, #5
 8004494:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 8004496:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 800449a:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 800449c:	2301      	movs	r3, #1
 800449e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (hci_send_req(&rq, FALSE) < 0)
 80044a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80044a4:	2100      	movs	r1, #0
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fa8e 	bl	80049c8 <hci_send_req>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	da01      	bge.n	80044b6 <aci_gatt_write_without_response+0x7e>
    return BLE_STATUS_TIMEOUT;
 80044b2:	23ff      	movs	r3, #255	@ 0xff
 80044b4:	e001      	b.n	80044ba <aci_gatt_write_without_response+0x82>

  return status;
 80044b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3748      	adds	r7, #72	@ 0x48
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b0aa      	sub	sp, #168	@ 0xa8
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	4603      	mov	r3, r0
 80044ca:	603a      	str	r2, [r7, #0]
 80044cc:	71fb      	strb	r3, [r7, #7]
 80044ce:	460b      	mov	r3, r1
 80044d0:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 80044d2:	2300      	movs	r3, #0
 80044d4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 80044d8:	79bb      	ldrb	r3, [r7, #6]
 80044da:	2b7e      	cmp	r3, #126	@ 0x7e
 80044dc:	d901      	bls.n	80044e2 <aci_hal_write_config_data+0x20>
    return BLE_STATUS_INVALID_PARAMS;
 80044de:	2342      	movs	r3, #66	@ 0x42
 80044e0:	e050      	b.n	8004584 <aci_hal_write_config_data+0xc2>

  buffer[indx] = offset;
 80044e2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80044e6:	33a8      	adds	r3, #168	@ 0xa8
 80044e8:	443b      	add	r3, r7
 80044ea:	79fa      	ldrb	r2, [r7, #7]
 80044ec:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80044f0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80044f4:	3301      	adds	r3, #1
 80044f6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = len;
 80044fa:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80044fe:	33a8      	adds	r3, #168	@ 0xa8
 8004500:	443b      	add	r3, r7
 8004502:	79ba      	ldrb	r2, [r7, #6]
 8004504:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8004508:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800450c:	3301      	adds	r3, #1
 800450e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8004512:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8004516:	f107 0208 	add.w	r2, r7, #8
 800451a:	4413      	add	r3, r2
 800451c:	79ba      	ldrb	r2, [r7, #6]
 800451e:	6839      	ldr	r1, [r7, #0]
 8004520:	4618      	mov	r0, r3
 8004522:	f001 f846 	bl	80055b2 <memcpy>
  indx +=  len;
 8004526:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 800452a:	79bb      	ldrb	r3, [r7, #6]
 800452c:	4413      	add	r3, r2
 800452e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004532:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8004536:	2218      	movs	r2, #24
 8004538:	2100      	movs	r1, #0
 800453a:	4618      	mov	r0, r3
 800453c:	f000 ffbe 	bl	80054bc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004540:	233f      	movs	r3, #63	@ 0x3f
 8004542:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8004546:	230c      	movs	r3, #12
 8004548:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 800454c:	f107 0308 	add.w	r3, r7, #8
 8004550:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 8004554:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8004558:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 800455c:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 8004560:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 8004564:	2301      	movs	r3, #1
 8004566:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800456a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800456e:	2100      	movs	r1, #0
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fa29 	bl	80049c8 <hci_send_req>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	da01      	bge.n	8004580 <aci_hal_write_config_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 800457c:	23ff      	movs	r3, #255	@ 0xff
 800457e:	e001      	b.n	8004584 <aci_hal_write_config_data+0xc2>

  return status;
 8004580:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
}
 8004584:	4618      	mov	r0, r3
 8004586:	37a8      	adds	r7, #168	@ 0xa8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08a      	sub	sp, #40	@ 0x28
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	460a      	mov	r2, r1
 8004596:	71fb      	strb	r3, [r7, #7]
 8004598:	4613      	mov	r3, r2
 800459a:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 80045a0:	79bb      	ldrb	r3, [r7, #6]
 80045a2:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80045a4:	f107 0310 	add.w	r3, r7, #16
 80045a8:	2218      	movs	r2, #24
 80045aa:	2100      	movs	r1, #0
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 ff85 	bl	80054bc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80045b2:	233f      	movs	r3, #63	@ 0x3f
 80045b4:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 80045b6:	230f      	movs	r3, #15
 80045b8:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 80045ba:	f107 030c 	add.w	r3, r7, #12
 80045be:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 80045c0:	2302      	movs	r3, #2
 80045c2:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 80045c4:	f107 030b 	add.w	r3, r7, #11
 80045c8:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 80045ca:	2301      	movs	r3, #1
 80045cc:	627b      	str	r3, [r7, #36]	@ 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 80045ce:	f107 0310 	add.w	r3, r7, #16
 80045d2:	2100      	movs	r1, #0
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 f9f7 	bl	80049c8 <hci_send_req>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	da01      	bge.n	80045e4 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 80045e0:	23ff      	movs	r3, #255	@ 0xff
 80045e2:	e000      	b.n	80045e6 <aci_hal_set_tx_power_level+0x5a>

  return status;
 80045e4:	7afb      	ldrb	r3, [r7, #11]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3728      	adds	r7, #40	@ 0x28
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 80045ee:	b590      	push	{r4, r7, lr}
 80045f0:	b089      	sub	sp, #36	@ 0x24
 80045f2:	af02      	add	r7, sp, #8
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 80045f8:	f107 0410 	add.w	r4, r7, #16
 80045fc:	f107 0215 	add.w	r2, r7, #21
 8004600:	f107 0112 	add.w	r1, r7, #18
 8004604:	f107 0016 	add.w	r0, r7, #22
 8004608:	f107 030e 	add.w	r3, r7, #14
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	4623      	mov	r3, r4
 8004610:	f000 f853 	bl	80046ba <hci_le_read_local_version>
 8004614:	4603      	mov	r3, r0
 8004616:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8004618:	7dfb      	ldrb	r3, [r7, #23]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d126      	bne.n	800466c <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800461e:	8a7b      	ldrh	r3, [r7, #18]
 8004620:	0a1b      	lsrs	r3, r3, #8
 8004622:	b29b      	uxth	r3, r3
 8004624:	b2da      	uxtb	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800462a:	8a7b      	ldrh	r3, [r7, #18]
 800462c:	021b      	lsls	r3, r3, #8
 800462e:	b29a      	uxth	r2, r3
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	b21a      	sxth	r2, r3
 800463a:	89fb      	ldrh	r3, [r7, #14]
 800463c:	091b      	lsrs	r3, r3, #4
 800463e:	b29b      	uxth	r3, r3
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	b21b      	sxth	r3, r3
 8004644:	b2db      	uxtb	r3, r3
 8004646:	b21b      	sxth	r3, r3
 8004648:	4313      	orrs	r3, r2
 800464a:	b21b      	sxth	r3, r3
 800464c:	b29a      	uxth	r2, r3
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	b21a      	sxth	r2, r3
 8004658:	89fb      	ldrh	r3, [r7, #14]
 800465a:	b21b      	sxth	r3, r3
 800465c:	f003 030f 	and.w	r3, r3, #15
 8004660:	b21b      	sxth	r3, r3
 8004662:	4313      	orrs	r3, r2
 8004664:	b21b      	sxth	r3, r3
 8004666:	b29a      	uxth	r2, r3
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800466c:	7dfb      	ldrb	r3, [r7, #23]
}
 800466e:	4618      	mov	r0, r3
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	bd90      	pop	{r4, r7, pc}

08004676 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b088      	sub	sp, #32
 800467a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800467c:	f107 0308 	add.w	r3, r7, #8
 8004680:	2218      	movs	r2, #24
 8004682:	2100      	movs	r1, #0
 8004684:	4618      	mov	r0, r3
 8004686:	f000 ff19 	bl	80054bc <memset>
  rq.ogf = OGF_HOST_CTL;
 800468a:	2303      	movs	r3, #3
 800468c:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 800468e:	2303      	movs	r3, #3
 8004690:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004692:	1dfb      	adds	r3, r7, #7
 8004694:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004696:	2301      	movs	r3, #1
 8004698:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800469a:	f107 0308 	add.w	r3, r7, #8
 800469e:	2100      	movs	r1, #0
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 f991 	bl	80049c8 <hci_send_req>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	da01      	bge.n	80046b0 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 80046ac:	23ff      	movs	r3, #255	@ 0xff
 80046ae:	e000      	b.n	80046b2 <hci_reset+0x3c>
  
  return status;  
 80046b0:	79fb      	ldrb	r3, [r7, #7]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3720      	adds	r7, #32
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b08e      	sub	sp, #56	@ 0x38
 80046be:	af00      	add	r7, sp, #0
 80046c0:	60f8      	str	r0, [r7, #12]
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	607a      	str	r2, [r7, #4]
 80046c6:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80046c8:	f107 0314 	add.w	r3, r7, #20
 80046cc:	2209      	movs	r2, #9
 80046ce:	2100      	movs	r1, #0
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 fef3 	bl	80054bc <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80046d6:	f107 0320 	add.w	r3, r7, #32
 80046da:	2218      	movs	r2, #24
 80046dc:	2100      	movs	r1, #0
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 feec 	bl	80054bc <memset>
  rq.ogf = OGF_INFO_PARAM;
 80046e4:	2304      	movs	r3, #4
 80046e6:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 80046e8:	2301      	movs	r3, #1
 80046ea:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = NULL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = 0;
 80046f0:	2300      	movs	r3, #0
 80046f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 80046f4:	f107 0314 	add.w	r3, r7, #20
 80046f8:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 80046fa:	2309      	movs	r3, #9
 80046fc:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 80046fe:	f107 0320 	add.w	r3, r7, #32
 8004702:	2100      	movs	r1, #0
 8004704:	4618      	mov	r0, r3
 8004706:	f000 f95f 	bl	80049c8 <hci_send_req>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	da01      	bge.n	8004714 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8004710:	23ff      	movs	r3, #255	@ 0xff
 8004712:	e018      	b.n	8004746 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8004714:	7d3b      	ldrb	r3, [r7, #20]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <hci_le_read_local_version+0x64>
    return resp.status;
 800471a:	7d3b      	ldrb	r3, [r7, #20]
 800471c:	e013      	b.n	8004746 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800471e:	7d7a      	ldrb	r2, [r7, #21]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8004724:	8afa      	ldrh	r2, [r7, #22]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800472a:	7e3a      	ldrb	r2, [r7, #24]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8004730:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8004734:	b29a      	uxth	r2, r3
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800473a:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800473e:	b29a      	uxth	r2, r3
 8004740:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004742:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3738      	adds	r7, #56	@ 0x38
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b092      	sub	sp, #72	@ 0x48
 8004752:	af00      	add	r7, sp, #0
 8004754:	4603      	mov	r3, r0
 8004756:	6039      	str	r1, [r7, #0]
 8004758:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800475a:	f107 0310 	add.w	r3, r7, #16
 800475e:	2220      	movs	r2, #32
 8004760:	2100      	movs	r1, #0
 8004762:	4618      	mov	r0, r3
 8004764:	f000 feaa 	bl	80054bc <memset>
  scan_resp_cp.length = length;
 8004768:	79fb      	ldrb	r3, [r7, #7]
 800476a:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800476c:	79fb      	ldrb	r3, [r7, #7]
 800476e:	2b1f      	cmp	r3, #31
 8004770:	bf28      	it	cs
 8004772:	231f      	movcs	r3, #31
 8004774:	b2db      	uxtb	r3, r3
 8004776:	461a      	mov	r2, r3
 8004778:	f107 0310 	add.w	r3, r7, #16
 800477c:	3301      	adds	r3, #1
 800477e:	6839      	ldr	r1, [r7, #0]
 8004780:	4618      	mov	r0, r3
 8004782:	f000 ff16 	bl	80055b2 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004786:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800478a:	2218      	movs	r2, #24
 800478c:	2100      	movs	r1, #0
 800478e:	4618      	mov	r0, r3
 8004790:	f000 fe94 	bl	80054bc <memset>
  rq.ogf = OGF_LE_CTL;
 8004794:	2308      	movs	r3, #8
 8004796:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8004798:	2309      	movs	r3, #9
 800479a:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &scan_resp_cp;
 800479c:	f107 0310 	add.w	r3, r7, #16
 80047a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 80047a2:	2320      	movs	r3, #32
 80047a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 80047a6:	f107 030f 	add.w	r3, r7, #15
 80047aa:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 80047ac:	2301      	movs	r3, #1
 80047ae:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 80047b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80047b4:	2100      	movs	r1, #0
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 f906 	bl	80049c8 <hci_send_req>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	da01      	bge.n	80047c6 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 80047c2:	23ff      	movs	r3, #255	@ 0xff
 80047c4:	e000      	b.n	80047c8 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3748      	adds	r7, #72	@ 0x48
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3308      	adds	r3, #8
 80047dc:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d001      	beq.n	80047ea <verify_packet+0x1a>
    return 1; /* Incorrect type */
 80047e6:	2301      	movs	r3, #1
 80047e8:	e00c      	b.n	8004804 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3302      	adds	r3, #2
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	461a      	mov	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80047f8:	3b03      	subs	r3, #3
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d001      	beq.n	8004802 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 80047fe:	2302      	movs	r3, #2
 8004800:	e000      	b.n	8004804 <verify_packet+0x34>
  
  return 0;      
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b0a6      	sub	sp, #152	@ 0x98
 8004814:	af00      	add	r7, sp, #0
 8004816:	607b      	str	r3, [r7, #4]
 8004818:	4603      	mov	r3, r0
 800481a:	81fb      	strh	r3, [r7, #14]
 800481c:	460b      	mov	r3, r1
 800481e:	81bb      	strh	r3, [r7, #12]
 8004820:	4613      	mov	r3, r2
 8004822:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8004824:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004828:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800482c:	b21a      	sxth	r2, r3
 800482e:	89fb      	ldrh	r3, [r7, #14]
 8004830:	029b      	lsls	r3, r3, #10
 8004832:	b21b      	sxth	r3, r3
 8004834:	4313      	orrs	r3, r2
 8004836:	b21b      	sxth	r3, r3
 8004838:	b29b      	uxth	r3, r3
 800483a:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800483c:	7afb      	ldrb	r3, [r7, #11]
 800483e:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8004840:	2301      	movs	r3, #1
 8004842:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8004844:	f107 0318 	add.w	r3, r7, #24
 8004848:	3301      	adds	r3, #1
 800484a:	461a      	mov	r2, r3
 800484c:	f107 0314 	add.w	r3, r7, #20
 8004850:	8819      	ldrh	r1, [r3, #0]
 8004852:	789b      	ldrb	r3, [r3, #2]
 8004854:	8011      	strh	r1, [r2, #0]
 8004856:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8004858:	f107 0318 	add.w	r3, r7, #24
 800485c:	3304      	adds	r3, #4
 800485e:	7afa      	ldrb	r2, [r7, #11]
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fea5 	bl	80055b2 <memcpy>
  
  if (hciContext.io.Send)
 8004868:	4b08      	ldr	r3, [pc, #32]	@ (800488c <send_cmd+0x7c>)
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d009      	beq.n	8004884 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8004870:	4b06      	ldr	r3, [pc, #24]	@ (800488c <send_cmd+0x7c>)
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	7afa      	ldrb	r2, [r7, #11]
 8004876:	b292      	uxth	r2, r2
 8004878:	3204      	adds	r2, #4
 800487a:	b291      	uxth	r1, r2
 800487c:	f107 0218 	add.w	r2, r7, #24
 8004880:	4610      	mov	r0, r2
 8004882:	4798      	blx	r3
  }
}
 8004884:	bf00      	nop
 8004886:	3798      	adds	r7, #152	@ 0x98
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	20000584 	.word	0x20000584

08004890 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800489a:	e00a      	b.n	80048b2 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800489c:	f107 030c 	add.w	r3, r7, #12
 80048a0:	4619      	mov	r1, r3
 80048a2:	6838      	ldr	r0, [r7, #0]
 80048a4:	f000 fae8 	bl	8004e78 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4619      	mov	r1, r3
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 fa4f 	bl	8004d50 <list_insert_head>
  while (!list_is_empty(src_list))
 80048b2:	6838      	ldr	r0, [r7, #0]
 80048b4:	f000 fa2a 	bl	8004d0c <list_is_empty>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0ee      	beq.n	800489c <move_list+0xc>
  }
}
 80048be:	bf00      	nop
 80048c0:	bf00      	nop
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80048ce:	e009      	b.n	80048e4 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80048d0:	1d3b      	adds	r3, r7, #4
 80048d2:	4619      	mov	r1, r3
 80048d4:	4809      	ldr	r0, [pc, #36]	@ (80048fc <free_event_list+0x34>)
 80048d6:	f000 faa8 	bl	8004e2a <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4619      	mov	r1, r3
 80048de:	4808      	ldr	r0, [pc, #32]	@ (8004900 <free_event_list+0x38>)
 80048e0:	f000 fa5c 	bl	8004d9c <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80048e4:	4806      	ldr	r0, [pc, #24]	@ (8004900 <free_event_list+0x38>)
 80048e6:	f000 faee 	bl	8004ec6 <list_get_size>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	ddef      	ble.n	80048d0 <free_event_list+0x8>
  }
}
 80048f0:	bf00      	nop
 80048f2:	bf00      	nop
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	200002c0 	.word	0x200002c0
 8004900:	200002b8 	.word	0x200002b8

08004904 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8004914:	4a18      	ldr	r2, [pc, #96]	@ (8004978 <hci_init+0x74>)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800491a:	4818      	ldr	r0, [pc, #96]	@ (800497c <hci_init+0x78>)
 800491c:	f000 f9e6 	bl	8004cec <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8004920:	4817      	ldr	r0, [pc, #92]	@ (8004980 <hci_init+0x7c>)
 8004922:	f000 f9e3 	bl	8004cec <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8004926:	f7fc fb37 	bl	8000f98 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800492a:	2300      	movs	r3, #0
 800492c:	73fb      	strb	r3, [r7, #15]
 800492e:	e00c      	b.n	800494a <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	228c      	movs	r2, #140	@ 0x8c
 8004934:	fb02 f303 	mul.w	r3, r2, r3
 8004938:	4a12      	ldr	r2, [pc, #72]	@ (8004984 <hci_init+0x80>)
 800493a:	4413      	add	r3, r2
 800493c:	4619      	mov	r1, r3
 800493e:	480f      	ldr	r0, [pc, #60]	@ (800497c <hci_init+0x78>)
 8004940:	f000 fa2c 	bl	8004d9c <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	3301      	adds	r3, #1
 8004948:	73fb      	strb	r3, [r7, #15]
 800494a:	7bfb      	ldrb	r3, [r7, #15]
 800494c:	2b04      	cmp	r3, #4
 800494e:	d9ef      	bls.n	8004930 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8004950:	4b09      	ldr	r3, [pc, #36]	@ (8004978 <hci_init+0x74>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <hci_init+0x5c>
 8004958:	4b07      	ldr	r3, [pc, #28]	@ (8004978 <hci_init+0x74>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2000      	movs	r0, #0
 800495e:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8004960:	4b05      	ldr	r3, [pc, #20]	@ (8004978 <hci_init+0x74>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <hci_init+0x6a>
 8004968:	4b03      	ldr	r3, [pc, #12]	@ (8004978 <hci_init+0x74>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	4798      	blx	r3
}
 800496e:	bf00      	nop
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20000584 	.word	0x20000584
 800497c:	200002b8 	.word	0x200002b8
 8004980:	200002c0 	.word	0x200002c0
 8004984:	200002c8 	.word	0x200002c8

08004988 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a0b      	ldr	r2, [pc, #44]	@ (80049c4 <hci_register_io_bus+0x3c>)
 8004996:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	4a09      	ldr	r2, [pc, #36]	@ (80049c4 <hci_register_io_bus+0x3c>)
 800499e:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	4a07      	ldr	r2, [pc, #28]	@ (80049c4 <hci_register_io_bus+0x3c>)
 80049a6:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	4a05      	ldr	r2, [pc, #20]	@ (80049c4 <hci_register_io_bus+0x3c>)
 80049ae:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	4a03      	ldr	r2, [pc, #12]	@ (80049c4 <hci_register_io_bus+0x3c>)
 80049b6:	6093      	str	r3, [r2, #8]
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	20000584 	.word	0x20000584

080049c8 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08e      	sub	sp, #56	@ 0x38
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	885b      	ldrh	r3, [r3, #2]
 80049d8:	b21b      	sxth	r3, r3
 80049da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049de:	b21a      	sxth	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	029b      	lsls	r3, r3, #10
 80049e6:	b21b      	sxth	r3, r3
 80049e8:	4313      	orrs	r3, r2
 80049ea:	b21b      	sxth	r3, r3
 80049ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 80049f2:	f107 0308 	add.w	r3, r7, #8
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 f978 	bl	8004cec <list_init_head>

  free_event_list();
 80049fc:	f7ff ff64 	bl	80048c8 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	8818      	ldrh	r0, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	8859      	ldrh	r1, [r3, #2]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f7ff fefd 	bl	8004810 <send_cmd>
  
  if (async)
 8004a16:	78fb      	ldrb	r3, [r7, #3]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <hci_send_req+0x58>
  {
    return 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	e0e2      	b.n	8004be6 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8004a20:	f7fd f916 	bl	8001c50 <HAL_GetTick>
 8004a24:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8004a26:	f7fd f913 	bl	8001c50 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a34:	f200 80b3 	bhi.w	8004b9e <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8004a38:	486d      	ldr	r0, [pc, #436]	@ (8004bf0 <hci_send_req+0x228>)
 8004a3a:	f000 f967 	bl	8004d0c <list_is_empty>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d000      	beq.n	8004a46 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8004a44:	e7ef      	b.n	8004a26 <hci_send_req+0x5e>
      {
        break;
 8004a46:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8004a48:	f107 0310 	add.w	r3, r7, #16
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4868      	ldr	r0, [pc, #416]	@ (8004bf0 <hci_send_req+0x228>)
 8004a50:	f000 f9eb 	bl	8004e2a <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	3308      	adds	r3, #8
 8004a58:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8004a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d17f      	bne.n	8004b62 <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 8004a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a64:	3301      	adds	r3, #1
 8004a66:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	3308      	adds	r3, #8
 8004a6c:	3303      	adds	r3, #3
 8004a6e:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8004a76:	3b03      	subs	r3, #3
 8004a78:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8004a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a80:	d04c      	beq.n	8004b1c <hci_send_req+0x154>
 8004a82:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a84:	dc68      	bgt.n	8004b58 <hci_send_req+0x190>
 8004a86:	2b10      	cmp	r3, #16
 8004a88:	f000 808b 	beq.w	8004ba2 <hci_send_req+0x1da>
 8004a8c:	2b10      	cmp	r3, #16
 8004a8e:	dc63      	bgt.n	8004b58 <hci_send_req+0x190>
 8004a90:	2b0e      	cmp	r3, #14
 8004a92:	d023      	beq.n	8004adc <hci_send_req+0x114>
 8004a94:	2b0f      	cmp	r3, #15
 8004a96:	d15f      	bne.n	8004b58 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8004a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9a:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	885b      	ldrh	r3, [r3, #2]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d17e      	bne.n	8004ba6 <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2b0f      	cmp	r3, #15
 8004aae:	d004      	beq.n	8004aba <hci_send_req+0xf2>
          if (cs->status) {
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d051      	beq.n	8004b5c <hci_send_req+0x194>
            goto failed;
 8004ab8:	e078      	b.n	8004bac <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695a      	ldr	r2, [r3, #20]
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	bf28      	it	cs
 8004ac4:	461a      	movcs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6918      	ldr	r0, [r3, #16]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ad6:	f000 fd6c 	bl	80055b2 <memcpy>
        goto done;
 8004ada:	e078      	b.n	8004bce <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8004adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ade:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d15d      	bne.n	8004baa <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8004aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af0:	3303      	adds	r3, #3
 8004af2:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	3b03      	subs	r3, #3
 8004af8:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695a      	ldr	r2, [r3, #20]
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	bf28      	it	cs
 8004b04:	461a      	movcs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6918      	ldr	r0, [r3, #16]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	461a      	mov	r2, r3
 8004b14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b16:	f000 fd4c 	bl	80055b2 <memcpy>
        goto done;
 8004b1a:	e058      	b.n	8004bce <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1e:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	461a      	mov	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d118      	bne.n	8004b60 <hci_send_req+0x198>
          break;
      
        len -= 1;
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	3b01      	subs	r3, #1
 8004b32:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	695a      	ldr	r2, [r3, #20]
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	bf28      	it	cs
 8004b3e:	461a      	movcs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6918      	ldr	r0, [r3, #16]
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	1c59      	adds	r1, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	461a      	mov	r2, r3
 8004b52:	f000 fd2e 	bl	80055b2 <memcpy>
        goto done;
 8004b56:	e03a      	b.n	8004bce <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8004b58:	bf00      	nop
 8004b5a:	e002      	b.n	8004b62 <hci_send_req+0x19a>
          break;
 8004b5c:	bf00      	nop
 8004b5e:	e000      	b.n	8004b62 <hci_send_req+0x19a>
          break;
 8004b60:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8004b62:	4824      	ldr	r0, [pc, #144]	@ (8004bf4 <hci_send_req+0x22c>)
 8004b64:	f000 f8d2 	bl	8004d0c <list_is_empty>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00d      	beq.n	8004b8a <hci_send_req+0x1c2>
 8004b6e:	4820      	ldr	r0, [pc, #128]	@ (8004bf0 <hci_send_req+0x228>)
 8004b70:	f000 f8cc 	bl	8004d0c <list_is_empty>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d007      	beq.n	8004b8a <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	481d      	ldr	r0, [pc, #116]	@ (8004bf4 <hci_send_req+0x22c>)
 8004b80:	f000 f90c 	bl	8004d9c <list_insert_tail>
      hciReadPacket=NULL;
 8004b84:	2300      	movs	r3, #0
 8004b86:	613b      	str	r3, [r7, #16]
 8004b88:	e008      	b.n	8004b9c <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	f107 0308 	add.w	r3, r7, #8
 8004b90:	4611      	mov	r1, r2
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 f902 	bl	8004d9c <list_insert_tail>
      hciReadPacket=NULL;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	613b      	str	r3, [r7, #16]
  {
 8004b9c:	e740      	b.n	8004a20 <hci_send_req+0x58>
        goto failed;
 8004b9e:	bf00      	nop
 8004ba0:	e004      	b.n	8004bac <hci_send_req+0x1e4>
        goto failed;
 8004ba2:	bf00      	nop
 8004ba4:	e002      	b.n	8004bac <hci_send_req+0x1e4>
          goto failed;
 8004ba6:	bf00      	nop
 8004ba8:	e000      	b.n	8004bac <hci_send_req+0x1e4>
          goto failed;
 8004baa:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d004      	beq.n	8004bbc <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	480f      	ldr	r0, [pc, #60]	@ (8004bf4 <hci_send_req+0x22c>)
 8004bb8:	f000 f8ca 	bl	8004d50 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8004bbc:	f107 0308 	add.w	r3, r7, #8
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	480b      	ldr	r0, [pc, #44]	@ (8004bf0 <hci_send_req+0x228>)
 8004bc4:	f7ff fe64 	bl	8004890 <move_list>

  return -1;
 8004bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bcc:	e00b      	b.n	8004be6 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4808      	ldr	r0, [pc, #32]	@ (8004bf4 <hci_send_req+0x22c>)
 8004bd4:	f000 f8bc 	bl	8004d50 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8004bd8:	f107 0308 	add.w	r3, r7, #8
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4804      	ldr	r0, [pc, #16]	@ (8004bf0 <hci_send_req+0x228>)
 8004be0:	f7ff fe56 	bl	8004890 <move_list>

  return 0;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3738      	adds	r7, #56	@ 0x38
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	200002c0 	.word	0x200002c0
 8004bf4:	200002b8 	.word	0x200002b8

08004bf8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8004c02:	e013      	b.n	8004c2c <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8004c04:	1d3b      	adds	r3, r7, #4
 8004c06:	4619      	mov	r1, r3
 8004c08:	480e      	ldr	r0, [pc, #56]	@ (8004c44 <hci_user_evt_proc+0x4c>)
 8004c0a:	f000 f90e 	bl	8004e2a <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8004c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c48 <hci_user_evt_proc+0x50>)
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d005      	beq.n	8004c22 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8004c16:	4b0c      	ldr	r3, [pc, #48]	@ (8004c48 <hci_user_evt_proc+0x50>)
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	3208      	adds	r2, #8
 8004c1e:	4610      	mov	r0, r2
 8004c20:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4619      	mov	r1, r3
 8004c26:	4809      	ldr	r0, [pc, #36]	@ (8004c4c <hci_user_evt_proc+0x54>)
 8004c28:	f000 f8b8 	bl	8004d9c <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8004c2c:	4805      	ldr	r0, [pc, #20]	@ (8004c44 <hci_user_evt_proc+0x4c>)
 8004c2e:	f000 f86d 	bl	8004d0c <list_is_empty>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0e5      	beq.n	8004c04 <hci_user_evt_proc+0xc>
  }
}
 8004c38:	bf00      	nop
 8004c3a:	bf00      	nop
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	200002c0 	.word	0x200002c0
 8004c48:	20000584 	.word	0x20000584
 8004c4c:	200002b8 	.word	0x200002b8

08004c50 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8004c60:	481f      	ldr	r0, [pc, #124]	@ (8004ce0 <hci_notify_asynch_evt+0x90>)
 8004c62:	f000 f853 	bl	8004d0c <list_is_empty>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d132      	bne.n	8004cd2 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8004c6c:	f107 030c 	add.w	r3, r7, #12
 8004c70:	4619      	mov	r1, r3
 8004c72:	481b      	ldr	r0, [pc, #108]	@ (8004ce0 <hci_notify_asynch_evt+0x90>)
 8004c74:	f000 f8d9 	bl	8004e2a <list_remove_head>
    
    if (hciContext.io.Receive)
 8004c78:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce4 <hci_notify_asynch_evt+0x94>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d02a      	beq.n	8004cd6 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8004c80:	4b18      	ldr	r3, [pc, #96]	@ (8004ce4 <hci_notify_asynch_evt+0x94>)
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	3208      	adds	r2, #8
 8004c88:	2180      	movs	r1, #128	@ 0x80
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	4798      	blx	r3
 8004c8e:	4603      	mov	r3, r0
 8004c90:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8004c92:	7cfb      	ldrb	r3, [r7, #19]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d016      	beq.n	8004cc6 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	7cfa      	ldrb	r2, [r7, #19]
 8004c9c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7ff fd94 	bl	80047d0 <verify_packet>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d105      	bne.n	8004cba <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	480d      	ldr	r0, [pc, #52]	@ (8004ce8 <hci_notify_asynch_evt+0x98>)
 8004cb4:	f000 f872 	bl	8004d9c <list_insert_tail>
 8004cb8:	e00d      	b.n	8004cd6 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4808      	ldr	r0, [pc, #32]	@ (8004ce0 <hci_notify_asynch_evt+0x90>)
 8004cc0:	f000 f846 	bl	8004d50 <list_insert_head>
 8004cc4:	e007      	b.n	8004cd6 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4805      	ldr	r0, [pc, #20]	@ (8004ce0 <hci_notify_asynch_evt+0x90>)
 8004ccc:	f000 f840 	bl	8004d50 <list_insert_head>
 8004cd0:	e001      	b.n	8004cd6 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8004cd6:	697b      	ldr	r3, [r7, #20]

}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	200002b8 	.word	0x200002b8
 8004ce4:	20000584 	.word	0x20000584
 8004ce8:	200002c0 	.word	0x200002c0

08004cec <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	605a      	str	r2, [r3, #4]
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004d14:	f3ef 8310 	mrs	r3, PRIMASK
 8004d18:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004d1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d1e:	b672      	cpsid	i
}
 8004d20:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d102      	bne.n	8004d32 <list_is_empty+0x26>
  {
    return_value = 1;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	75fb      	strb	r3, [r7, #23]
 8004d30:	e001      	b.n	8004d36 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8004d32:	2300      	movs	r3, #0
 8004d34:	75fb      	strb	r3, [r7, #23]
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f383 8810 	msr	PRIMASK, r3
}
 8004d40:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8004d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	371c      	adds	r7, #28
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d60:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004d62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d64:	b672      	cpsid	i
}
 8004d66:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	605a      	str	r2, [r3, #4]
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f383 8810 	msr	PRIMASK, r3
}
 8004d8e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8004d90:	bf00      	nop
 8004d92:	371c      	adds	r7, #28
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004da6:	f3ef 8310 	mrs	r3, PRIMASK
 8004daa:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dac:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004dae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004db0:	b672      	cpsid	i
}
 8004db2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f383 8810 	msr	PRIMASK, r3
}
 8004dda:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8004ddc:	bf00      	nop
 8004dde:	371c      	adds	r7, #28
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004df0:	f3ef 8310 	mrs	r3, PRIMASK
 8004df4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004df6:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004df8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004dfa:	b672      	cpsid	i
}
 8004dfc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6812      	ldr	r2, [r2, #0]
 8004e06:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6852      	ldr	r2, [r2, #4]
 8004e10:	605a      	str	r2, [r3, #4]
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	f383 8810 	msr	PRIMASK, r3
}
 8004e1c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8004e1e:	bf00      	nop
 8004e20:	371c      	adds	r7, #28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b086      	sub	sp, #24
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e34:	f3ef 8310 	mrs	r3, PRIMASK
 8004e38:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004e3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e3e:	b672      	cpsid	i
}
 8004e40:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7ff ffca 	bl	8004de8 <list_remove_node>
  (*node)->next = NULL;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2200      	movs	r2, #0
 8004e62:	605a      	str	r2, [r3, #4]
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f383 8810 	msr	PRIMASK, r3
}
 8004e6e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8004e70:	bf00      	nop
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e82:	f3ef 8310 	mrs	r3, PRIMASK
 8004e86:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e88:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004e8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e8c:	b672      	cpsid	i
}
 8004e8e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7ff ffa3 	bl	8004de8 <list_remove_node>
  (*node)->next = NULL;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	605a      	str	r2, [r3, #4]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f383 8810 	msr	PRIMASK, r3
}
 8004ebc:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8004ebe:	bf00      	nop
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b089      	sub	sp, #36	@ 0x24
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  int size = 0;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ed6:	613b      	str	r3, [r7, #16]
  return(result);
 8004ed8:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004eda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004edc:	b672      	cpsid	i
}
 8004ede:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8004ee6:	e005      	b.n	8004ef4 <list_get_size+0x2e>
  {
    size++;
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	3301      	adds	r3, #1
 8004eec:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d1f5      	bne.n	8004ee8 <list_get_size+0x22>
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f383 8810 	msr	PRIMASK, r3
}
 8004f06:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8004f08:	69fb      	ldr	r3, [r7, #28]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3724      	adds	r7, #36	@ 0x24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
	...

08004f18 <__sflush_r>:
 8004f18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f20:	0716      	lsls	r6, r2, #28
 8004f22:	4605      	mov	r5, r0
 8004f24:	460c      	mov	r4, r1
 8004f26:	d454      	bmi.n	8004fd2 <__sflush_r+0xba>
 8004f28:	684b      	ldr	r3, [r1, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	dc02      	bgt.n	8004f34 <__sflush_r+0x1c>
 8004f2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	dd48      	ble.n	8004fc6 <__sflush_r+0xae>
 8004f34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f36:	2e00      	cmp	r6, #0
 8004f38:	d045      	beq.n	8004fc6 <__sflush_r+0xae>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004f40:	682f      	ldr	r7, [r5, #0]
 8004f42:	6a21      	ldr	r1, [r4, #32]
 8004f44:	602b      	str	r3, [r5, #0]
 8004f46:	d030      	beq.n	8004faa <__sflush_r+0x92>
 8004f48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004f4a:	89a3      	ldrh	r3, [r4, #12]
 8004f4c:	0759      	lsls	r1, r3, #29
 8004f4e:	d505      	bpl.n	8004f5c <__sflush_r+0x44>
 8004f50:	6863      	ldr	r3, [r4, #4]
 8004f52:	1ad2      	subs	r2, r2, r3
 8004f54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004f56:	b10b      	cbz	r3, 8004f5c <__sflush_r+0x44>
 8004f58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f5a:	1ad2      	subs	r2, r2, r3
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f60:	6a21      	ldr	r1, [r4, #32]
 8004f62:	4628      	mov	r0, r5
 8004f64:	47b0      	blx	r6
 8004f66:	1c43      	adds	r3, r0, #1
 8004f68:	89a3      	ldrh	r3, [r4, #12]
 8004f6a:	d106      	bne.n	8004f7a <__sflush_r+0x62>
 8004f6c:	6829      	ldr	r1, [r5, #0]
 8004f6e:	291d      	cmp	r1, #29
 8004f70:	d82b      	bhi.n	8004fca <__sflush_r+0xb2>
 8004f72:	4a2a      	ldr	r2, [pc, #168]	@ (800501c <__sflush_r+0x104>)
 8004f74:	410a      	asrs	r2, r1
 8004f76:	07d6      	lsls	r6, r2, #31
 8004f78:	d427      	bmi.n	8004fca <__sflush_r+0xb2>
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	6062      	str	r2, [r4, #4]
 8004f7e:	04d9      	lsls	r1, r3, #19
 8004f80:	6922      	ldr	r2, [r4, #16]
 8004f82:	6022      	str	r2, [r4, #0]
 8004f84:	d504      	bpl.n	8004f90 <__sflush_r+0x78>
 8004f86:	1c42      	adds	r2, r0, #1
 8004f88:	d101      	bne.n	8004f8e <__sflush_r+0x76>
 8004f8a:	682b      	ldr	r3, [r5, #0]
 8004f8c:	b903      	cbnz	r3, 8004f90 <__sflush_r+0x78>
 8004f8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004f90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f92:	602f      	str	r7, [r5, #0]
 8004f94:	b1b9      	cbz	r1, 8004fc6 <__sflush_r+0xae>
 8004f96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f9a:	4299      	cmp	r1, r3
 8004f9c:	d002      	beq.n	8004fa4 <__sflush_r+0x8c>
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	f000 fb16 	bl	80055d0 <_free_r>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	6363      	str	r3, [r4, #52]	@ 0x34
 8004fa8:	e00d      	b.n	8004fc6 <__sflush_r+0xae>
 8004faa:	2301      	movs	r3, #1
 8004fac:	4628      	mov	r0, r5
 8004fae:	47b0      	blx	r6
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	1c50      	adds	r0, r2, #1
 8004fb4:	d1c9      	bne.n	8004f4a <__sflush_r+0x32>
 8004fb6:	682b      	ldr	r3, [r5, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0c6      	beq.n	8004f4a <__sflush_r+0x32>
 8004fbc:	2b1d      	cmp	r3, #29
 8004fbe:	d001      	beq.n	8004fc4 <__sflush_r+0xac>
 8004fc0:	2b16      	cmp	r3, #22
 8004fc2:	d11e      	bne.n	8005002 <__sflush_r+0xea>
 8004fc4:	602f      	str	r7, [r5, #0]
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	e022      	b.n	8005010 <__sflush_r+0xf8>
 8004fca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fce:	b21b      	sxth	r3, r3
 8004fd0:	e01b      	b.n	800500a <__sflush_r+0xf2>
 8004fd2:	690f      	ldr	r7, [r1, #16]
 8004fd4:	2f00      	cmp	r7, #0
 8004fd6:	d0f6      	beq.n	8004fc6 <__sflush_r+0xae>
 8004fd8:	0793      	lsls	r3, r2, #30
 8004fda:	680e      	ldr	r6, [r1, #0]
 8004fdc:	bf08      	it	eq
 8004fde:	694b      	ldreq	r3, [r1, #20]
 8004fe0:	600f      	str	r7, [r1, #0]
 8004fe2:	bf18      	it	ne
 8004fe4:	2300      	movne	r3, #0
 8004fe6:	eba6 0807 	sub.w	r8, r6, r7
 8004fea:	608b      	str	r3, [r1, #8]
 8004fec:	f1b8 0f00 	cmp.w	r8, #0
 8004ff0:	dde9      	ble.n	8004fc6 <__sflush_r+0xae>
 8004ff2:	6a21      	ldr	r1, [r4, #32]
 8004ff4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004ff6:	4643      	mov	r3, r8
 8004ff8:	463a      	mov	r2, r7
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	47b0      	blx	r6
 8004ffe:	2800      	cmp	r0, #0
 8005000:	dc08      	bgt.n	8005014 <__sflush_r+0xfc>
 8005002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800500a:	81a3      	strh	r3, [r4, #12]
 800500c:	f04f 30ff 	mov.w	r0, #4294967295
 8005010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005014:	4407      	add	r7, r0
 8005016:	eba8 0800 	sub.w	r8, r8, r0
 800501a:	e7e7      	b.n	8004fec <__sflush_r+0xd4>
 800501c:	dfbffffe 	.word	0xdfbffffe

08005020 <_fflush_r>:
 8005020:	b538      	push	{r3, r4, r5, lr}
 8005022:	690b      	ldr	r3, [r1, #16]
 8005024:	4605      	mov	r5, r0
 8005026:	460c      	mov	r4, r1
 8005028:	b913      	cbnz	r3, 8005030 <_fflush_r+0x10>
 800502a:	2500      	movs	r5, #0
 800502c:	4628      	mov	r0, r5
 800502e:	bd38      	pop	{r3, r4, r5, pc}
 8005030:	b118      	cbz	r0, 800503a <_fflush_r+0x1a>
 8005032:	6a03      	ldr	r3, [r0, #32]
 8005034:	b90b      	cbnz	r3, 800503a <_fflush_r+0x1a>
 8005036:	f000 f8bb 	bl	80051b0 <__sinit>
 800503a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0f3      	beq.n	800502a <_fflush_r+0xa>
 8005042:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005044:	07d0      	lsls	r0, r2, #31
 8005046:	d404      	bmi.n	8005052 <_fflush_r+0x32>
 8005048:	0599      	lsls	r1, r3, #22
 800504a:	d402      	bmi.n	8005052 <_fflush_r+0x32>
 800504c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800504e:	f000 faae 	bl	80055ae <__retarget_lock_acquire_recursive>
 8005052:	4628      	mov	r0, r5
 8005054:	4621      	mov	r1, r4
 8005056:	f7ff ff5f 	bl	8004f18 <__sflush_r>
 800505a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800505c:	07da      	lsls	r2, r3, #31
 800505e:	4605      	mov	r5, r0
 8005060:	d4e4      	bmi.n	800502c <_fflush_r+0xc>
 8005062:	89a3      	ldrh	r3, [r4, #12]
 8005064:	059b      	lsls	r3, r3, #22
 8005066:	d4e1      	bmi.n	800502c <_fflush_r+0xc>
 8005068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800506a:	f000 faa1 	bl	80055b0 <__retarget_lock_release_recursive>
 800506e:	e7dd      	b.n	800502c <_fflush_r+0xc>

08005070 <fflush>:
 8005070:	4601      	mov	r1, r0
 8005072:	b920      	cbnz	r0, 800507e <fflush+0xe>
 8005074:	4a04      	ldr	r2, [pc, #16]	@ (8005088 <fflush+0x18>)
 8005076:	4905      	ldr	r1, [pc, #20]	@ (800508c <fflush+0x1c>)
 8005078:	4805      	ldr	r0, [pc, #20]	@ (8005090 <fflush+0x20>)
 800507a:	f000 b8b1 	b.w	80051e0 <_fwalk_sglue>
 800507e:	4b05      	ldr	r3, [pc, #20]	@ (8005094 <fflush+0x24>)
 8005080:	6818      	ldr	r0, [r3, #0]
 8005082:	f7ff bfcd 	b.w	8005020 <_fflush_r>
 8005086:	bf00      	nop
 8005088:	20000024 	.word	0x20000024
 800508c:	08005021 	.word	0x08005021
 8005090:	20000034 	.word	0x20000034
 8005094:	20000030 	.word	0x20000030

08005098 <std>:
 8005098:	2300      	movs	r3, #0
 800509a:	b510      	push	{r4, lr}
 800509c:	4604      	mov	r4, r0
 800509e:	e9c0 3300 	strd	r3, r3, [r0]
 80050a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050a6:	6083      	str	r3, [r0, #8]
 80050a8:	8181      	strh	r1, [r0, #12]
 80050aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80050ac:	81c2      	strh	r2, [r0, #14]
 80050ae:	6183      	str	r3, [r0, #24]
 80050b0:	4619      	mov	r1, r3
 80050b2:	2208      	movs	r2, #8
 80050b4:	305c      	adds	r0, #92	@ 0x5c
 80050b6:	f000 fa01 	bl	80054bc <memset>
 80050ba:	4b0d      	ldr	r3, [pc, #52]	@ (80050f0 <std+0x58>)
 80050bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80050be:	4b0d      	ldr	r3, [pc, #52]	@ (80050f4 <std+0x5c>)
 80050c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80050c2:	4b0d      	ldr	r3, [pc, #52]	@ (80050f8 <std+0x60>)
 80050c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80050c6:	4b0d      	ldr	r3, [pc, #52]	@ (80050fc <std+0x64>)
 80050c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80050ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005100 <std+0x68>)
 80050cc:	6224      	str	r4, [r4, #32]
 80050ce:	429c      	cmp	r4, r3
 80050d0:	d006      	beq.n	80050e0 <std+0x48>
 80050d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80050d6:	4294      	cmp	r4, r2
 80050d8:	d002      	beq.n	80050e0 <std+0x48>
 80050da:	33d0      	adds	r3, #208	@ 0xd0
 80050dc:	429c      	cmp	r4, r3
 80050de:	d105      	bne.n	80050ec <std+0x54>
 80050e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80050e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050e8:	f000 ba60 	b.w	80055ac <__retarget_lock_init_recursive>
 80050ec:	bd10      	pop	{r4, pc}
 80050ee:	bf00      	nop
 80050f0:	0800530d 	.word	0x0800530d
 80050f4:	0800532f 	.word	0x0800532f
 80050f8:	08005367 	.word	0x08005367
 80050fc:	0800538b 	.word	0x0800538b
 8005100:	200005a4 	.word	0x200005a4

08005104 <stdio_exit_handler>:
 8005104:	4a02      	ldr	r2, [pc, #8]	@ (8005110 <stdio_exit_handler+0xc>)
 8005106:	4903      	ldr	r1, [pc, #12]	@ (8005114 <stdio_exit_handler+0x10>)
 8005108:	4803      	ldr	r0, [pc, #12]	@ (8005118 <stdio_exit_handler+0x14>)
 800510a:	f000 b869 	b.w	80051e0 <_fwalk_sglue>
 800510e:	bf00      	nop
 8005110:	20000024 	.word	0x20000024
 8005114:	08005021 	.word	0x08005021
 8005118:	20000034 	.word	0x20000034

0800511c <cleanup_stdio>:
 800511c:	6841      	ldr	r1, [r0, #4]
 800511e:	4b0c      	ldr	r3, [pc, #48]	@ (8005150 <cleanup_stdio+0x34>)
 8005120:	4299      	cmp	r1, r3
 8005122:	b510      	push	{r4, lr}
 8005124:	4604      	mov	r4, r0
 8005126:	d001      	beq.n	800512c <cleanup_stdio+0x10>
 8005128:	f7ff ff7a 	bl	8005020 <_fflush_r>
 800512c:	68a1      	ldr	r1, [r4, #8]
 800512e:	4b09      	ldr	r3, [pc, #36]	@ (8005154 <cleanup_stdio+0x38>)
 8005130:	4299      	cmp	r1, r3
 8005132:	d002      	beq.n	800513a <cleanup_stdio+0x1e>
 8005134:	4620      	mov	r0, r4
 8005136:	f7ff ff73 	bl	8005020 <_fflush_r>
 800513a:	68e1      	ldr	r1, [r4, #12]
 800513c:	4b06      	ldr	r3, [pc, #24]	@ (8005158 <cleanup_stdio+0x3c>)
 800513e:	4299      	cmp	r1, r3
 8005140:	d004      	beq.n	800514c <cleanup_stdio+0x30>
 8005142:	4620      	mov	r0, r4
 8005144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005148:	f7ff bf6a 	b.w	8005020 <_fflush_r>
 800514c:	bd10      	pop	{r4, pc}
 800514e:	bf00      	nop
 8005150:	200005a4 	.word	0x200005a4
 8005154:	2000060c 	.word	0x2000060c
 8005158:	20000674 	.word	0x20000674

0800515c <global_stdio_init.part.0>:
 800515c:	b510      	push	{r4, lr}
 800515e:	4b0b      	ldr	r3, [pc, #44]	@ (800518c <global_stdio_init.part.0+0x30>)
 8005160:	4c0b      	ldr	r4, [pc, #44]	@ (8005190 <global_stdio_init.part.0+0x34>)
 8005162:	4a0c      	ldr	r2, [pc, #48]	@ (8005194 <global_stdio_init.part.0+0x38>)
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	4620      	mov	r0, r4
 8005168:	2200      	movs	r2, #0
 800516a:	2104      	movs	r1, #4
 800516c:	f7ff ff94 	bl	8005098 <std>
 8005170:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005174:	2201      	movs	r2, #1
 8005176:	2109      	movs	r1, #9
 8005178:	f7ff ff8e 	bl	8005098 <std>
 800517c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005180:	2202      	movs	r2, #2
 8005182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005186:	2112      	movs	r1, #18
 8005188:	f7ff bf86 	b.w	8005098 <std>
 800518c:	200006dc 	.word	0x200006dc
 8005190:	200005a4 	.word	0x200005a4
 8005194:	08005105 	.word	0x08005105

08005198 <__sfp_lock_acquire>:
 8005198:	4801      	ldr	r0, [pc, #4]	@ (80051a0 <__sfp_lock_acquire+0x8>)
 800519a:	f000 ba08 	b.w	80055ae <__retarget_lock_acquire_recursive>
 800519e:	bf00      	nop
 80051a0:	200006e5 	.word	0x200006e5

080051a4 <__sfp_lock_release>:
 80051a4:	4801      	ldr	r0, [pc, #4]	@ (80051ac <__sfp_lock_release+0x8>)
 80051a6:	f000 ba03 	b.w	80055b0 <__retarget_lock_release_recursive>
 80051aa:	bf00      	nop
 80051ac:	200006e5 	.word	0x200006e5

080051b0 <__sinit>:
 80051b0:	b510      	push	{r4, lr}
 80051b2:	4604      	mov	r4, r0
 80051b4:	f7ff fff0 	bl	8005198 <__sfp_lock_acquire>
 80051b8:	6a23      	ldr	r3, [r4, #32]
 80051ba:	b11b      	cbz	r3, 80051c4 <__sinit+0x14>
 80051bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051c0:	f7ff bff0 	b.w	80051a4 <__sfp_lock_release>
 80051c4:	4b04      	ldr	r3, [pc, #16]	@ (80051d8 <__sinit+0x28>)
 80051c6:	6223      	str	r3, [r4, #32]
 80051c8:	4b04      	ldr	r3, [pc, #16]	@ (80051dc <__sinit+0x2c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1f5      	bne.n	80051bc <__sinit+0xc>
 80051d0:	f7ff ffc4 	bl	800515c <global_stdio_init.part.0>
 80051d4:	e7f2      	b.n	80051bc <__sinit+0xc>
 80051d6:	bf00      	nop
 80051d8:	0800511d 	.word	0x0800511d
 80051dc:	200006dc 	.word	0x200006dc

080051e0 <_fwalk_sglue>:
 80051e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051e4:	4607      	mov	r7, r0
 80051e6:	4688      	mov	r8, r1
 80051e8:	4614      	mov	r4, r2
 80051ea:	2600      	movs	r6, #0
 80051ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051f0:	f1b9 0901 	subs.w	r9, r9, #1
 80051f4:	d505      	bpl.n	8005202 <_fwalk_sglue+0x22>
 80051f6:	6824      	ldr	r4, [r4, #0]
 80051f8:	2c00      	cmp	r4, #0
 80051fa:	d1f7      	bne.n	80051ec <_fwalk_sglue+0xc>
 80051fc:	4630      	mov	r0, r6
 80051fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005202:	89ab      	ldrh	r3, [r5, #12]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d907      	bls.n	8005218 <_fwalk_sglue+0x38>
 8005208:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800520c:	3301      	adds	r3, #1
 800520e:	d003      	beq.n	8005218 <_fwalk_sglue+0x38>
 8005210:	4629      	mov	r1, r5
 8005212:	4638      	mov	r0, r7
 8005214:	47c0      	blx	r8
 8005216:	4306      	orrs	r6, r0
 8005218:	3568      	adds	r5, #104	@ 0x68
 800521a:	e7e9      	b.n	80051f0 <_fwalk_sglue+0x10>

0800521c <iprintf>:
 800521c:	b40f      	push	{r0, r1, r2, r3}
 800521e:	b507      	push	{r0, r1, r2, lr}
 8005220:	4906      	ldr	r1, [pc, #24]	@ (800523c <iprintf+0x20>)
 8005222:	ab04      	add	r3, sp, #16
 8005224:	6808      	ldr	r0, [r1, #0]
 8005226:	f853 2b04 	ldr.w	r2, [r3], #4
 800522a:	6881      	ldr	r1, [r0, #8]
 800522c:	9301      	str	r3, [sp, #4]
 800522e:	f000 faf1 	bl	8005814 <_vfiprintf_r>
 8005232:	b003      	add	sp, #12
 8005234:	f85d eb04 	ldr.w	lr, [sp], #4
 8005238:	b004      	add	sp, #16
 800523a:	4770      	bx	lr
 800523c:	20000030 	.word	0x20000030

08005240 <putchar>:
 8005240:	4b02      	ldr	r3, [pc, #8]	@ (800524c <putchar+0xc>)
 8005242:	4601      	mov	r1, r0
 8005244:	6818      	ldr	r0, [r3, #0]
 8005246:	6882      	ldr	r2, [r0, #8]
 8005248:	f000 bdec 	b.w	8005e24 <_putc_r>
 800524c:	20000030 	.word	0x20000030

08005250 <_puts_r>:
 8005250:	6a03      	ldr	r3, [r0, #32]
 8005252:	b570      	push	{r4, r5, r6, lr}
 8005254:	6884      	ldr	r4, [r0, #8]
 8005256:	4605      	mov	r5, r0
 8005258:	460e      	mov	r6, r1
 800525a:	b90b      	cbnz	r3, 8005260 <_puts_r+0x10>
 800525c:	f7ff ffa8 	bl	80051b0 <__sinit>
 8005260:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005262:	07db      	lsls	r3, r3, #31
 8005264:	d405      	bmi.n	8005272 <_puts_r+0x22>
 8005266:	89a3      	ldrh	r3, [r4, #12]
 8005268:	0598      	lsls	r0, r3, #22
 800526a:	d402      	bmi.n	8005272 <_puts_r+0x22>
 800526c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800526e:	f000 f99e 	bl	80055ae <__retarget_lock_acquire_recursive>
 8005272:	89a3      	ldrh	r3, [r4, #12]
 8005274:	0719      	lsls	r1, r3, #28
 8005276:	d502      	bpl.n	800527e <_puts_r+0x2e>
 8005278:	6923      	ldr	r3, [r4, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d135      	bne.n	80052ea <_puts_r+0x9a>
 800527e:	4621      	mov	r1, r4
 8005280:	4628      	mov	r0, r5
 8005282:	f000 f8c5 	bl	8005410 <__swsetup_r>
 8005286:	b380      	cbz	r0, 80052ea <_puts_r+0x9a>
 8005288:	f04f 35ff 	mov.w	r5, #4294967295
 800528c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800528e:	07da      	lsls	r2, r3, #31
 8005290:	d405      	bmi.n	800529e <_puts_r+0x4e>
 8005292:	89a3      	ldrh	r3, [r4, #12]
 8005294:	059b      	lsls	r3, r3, #22
 8005296:	d402      	bmi.n	800529e <_puts_r+0x4e>
 8005298:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800529a:	f000 f989 	bl	80055b0 <__retarget_lock_release_recursive>
 800529e:	4628      	mov	r0, r5
 80052a0:	bd70      	pop	{r4, r5, r6, pc}
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	da04      	bge.n	80052b0 <_puts_r+0x60>
 80052a6:	69a2      	ldr	r2, [r4, #24]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	dc17      	bgt.n	80052dc <_puts_r+0x8c>
 80052ac:	290a      	cmp	r1, #10
 80052ae:	d015      	beq.n	80052dc <_puts_r+0x8c>
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	6022      	str	r2, [r4, #0]
 80052b6:	7019      	strb	r1, [r3, #0]
 80052b8:	68a3      	ldr	r3, [r4, #8]
 80052ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80052be:	3b01      	subs	r3, #1
 80052c0:	60a3      	str	r3, [r4, #8]
 80052c2:	2900      	cmp	r1, #0
 80052c4:	d1ed      	bne.n	80052a2 <_puts_r+0x52>
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	da11      	bge.n	80052ee <_puts_r+0x9e>
 80052ca:	4622      	mov	r2, r4
 80052cc:	210a      	movs	r1, #10
 80052ce:	4628      	mov	r0, r5
 80052d0:	f000 f85f 	bl	8005392 <__swbuf_r>
 80052d4:	3001      	adds	r0, #1
 80052d6:	d0d7      	beq.n	8005288 <_puts_r+0x38>
 80052d8:	250a      	movs	r5, #10
 80052da:	e7d7      	b.n	800528c <_puts_r+0x3c>
 80052dc:	4622      	mov	r2, r4
 80052de:	4628      	mov	r0, r5
 80052e0:	f000 f857 	bl	8005392 <__swbuf_r>
 80052e4:	3001      	adds	r0, #1
 80052e6:	d1e7      	bne.n	80052b8 <_puts_r+0x68>
 80052e8:	e7ce      	b.n	8005288 <_puts_r+0x38>
 80052ea:	3e01      	subs	r6, #1
 80052ec:	e7e4      	b.n	80052b8 <_puts_r+0x68>
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	6022      	str	r2, [r4, #0]
 80052f4:	220a      	movs	r2, #10
 80052f6:	701a      	strb	r2, [r3, #0]
 80052f8:	e7ee      	b.n	80052d8 <_puts_r+0x88>
	...

080052fc <puts>:
 80052fc:	4b02      	ldr	r3, [pc, #8]	@ (8005308 <puts+0xc>)
 80052fe:	4601      	mov	r1, r0
 8005300:	6818      	ldr	r0, [r3, #0]
 8005302:	f7ff bfa5 	b.w	8005250 <_puts_r>
 8005306:	bf00      	nop
 8005308:	20000030 	.word	0x20000030

0800530c <__sread>:
 800530c:	b510      	push	{r4, lr}
 800530e:	460c      	mov	r4, r1
 8005310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005314:	f000 f8fc 	bl	8005510 <_read_r>
 8005318:	2800      	cmp	r0, #0
 800531a:	bfab      	itete	ge
 800531c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800531e:	89a3      	ldrhlt	r3, [r4, #12]
 8005320:	181b      	addge	r3, r3, r0
 8005322:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005326:	bfac      	ite	ge
 8005328:	6563      	strge	r3, [r4, #84]	@ 0x54
 800532a:	81a3      	strhlt	r3, [r4, #12]
 800532c:	bd10      	pop	{r4, pc}

0800532e <__swrite>:
 800532e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005332:	461f      	mov	r7, r3
 8005334:	898b      	ldrh	r3, [r1, #12]
 8005336:	05db      	lsls	r3, r3, #23
 8005338:	4605      	mov	r5, r0
 800533a:	460c      	mov	r4, r1
 800533c:	4616      	mov	r6, r2
 800533e:	d505      	bpl.n	800534c <__swrite+0x1e>
 8005340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005344:	2302      	movs	r3, #2
 8005346:	2200      	movs	r2, #0
 8005348:	f000 f8d0 	bl	80054ec <_lseek_r>
 800534c:	89a3      	ldrh	r3, [r4, #12]
 800534e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005352:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005356:	81a3      	strh	r3, [r4, #12]
 8005358:	4632      	mov	r2, r6
 800535a:	463b      	mov	r3, r7
 800535c:	4628      	mov	r0, r5
 800535e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005362:	f000 b8e7 	b.w	8005534 <_write_r>

08005366 <__sseek>:
 8005366:	b510      	push	{r4, lr}
 8005368:	460c      	mov	r4, r1
 800536a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800536e:	f000 f8bd 	bl	80054ec <_lseek_r>
 8005372:	1c43      	adds	r3, r0, #1
 8005374:	89a3      	ldrh	r3, [r4, #12]
 8005376:	bf15      	itete	ne
 8005378:	6560      	strne	r0, [r4, #84]	@ 0x54
 800537a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800537e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005382:	81a3      	strheq	r3, [r4, #12]
 8005384:	bf18      	it	ne
 8005386:	81a3      	strhne	r3, [r4, #12]
 8005388:	bd10      	pop	{r4, pc}

0800538a <__sclose>:
 800538a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800538e:	f000 b89d 	b.w	80054cc <_close_r>

08005392 <__swbuf_r>:
 8005392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005394:	460e      	mov	r6, r1
 8005396:	4614      	mov	r4, r2
 8005398:	4605      	mov	r5, r0
 800539a:	b118      	cbz	r0, 80053a4 <__swbuf_r+0x12>
 800539c:	6a03      	ldr	r3, [r0, #32]
 800539e:	b90b      	cbnz	r3, 80053a4 <__swbuf_r+0x12>
 80053a0:	f7ff ff06 	bl	80051b0 <__sinit>
 80053a4:	69a3      	ldr	r3, [r4, #24]
 80053a6:	60a3      	str	r3, [r4, #8]
 80053a8:	89a3      	ldrh	r3, [r4, #12]
 80053aa:	071a      	lsls	r2, r3, #28
 80053ac:	d501      	bpl.n	80053b2 <__swbuf_r+0x20>
 80053ae:	6923      	ldr	r3, [r4, #16]
 80053b0:	b943      	cbnz	r3, 80053c4 <__swbuf_r+0x32>
 80053b2:	4621      	mov	r1, r4
 80053b4:	4628      	mov	r0, r5
 80053b6:	f000 f82b 	bl	8005410 <__swsetup_r>
 80053ba:	b118      	cbz	r0, 80053c4 <__swbuf_r+0x32>
 80053bc:	f04f 37ff 	mov.w	r7, #4294967295
 80053c0:	4638      	mov	r0, r7
 80053c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053c4:	6823      	ldr	r3, [r4, #0]
 80053c6:	6922      	ldr	r2, [r4, #16]
 80053c8:	1a98      	subs	r0, r3, r2
 80053ca:	6963      	ldr	r3, [r4, #20]
 80053cc:	b2f6      	uxtb	r6, r6
 80053ce:	4283      	cmp	r3, r0
 80053d0:	4637      	mov	r7, r6
 80053d2:	dc05      	bgt.n	80053e0 <__swbuf_r+0x4e>
 80053d4:	4621      	mov	r1, r4
 80053d6:	4628      	mov	r0, r5
 80053d8:	f7ff fe22 	bl	8005020 <_fflush_r>
 80053dc:	2800      	cmp	r0, #0
 80053de:	d1ed      	bne.n	80053bc <__swbuf_r+0x2a>
 80053e0:	68a3      	ldr	r3, [r4, #8]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	60a3      	str	r3, [r4, #8]
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	6022      	str	r2, [r4, #0]
 80053ec:	701e      	strb	r6, [r3, #0]
 80053ee:	6962      	ldr	r2, [r4, #20]
 80053f0:	1c43      	adds	r3, r0, #1
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d004      	beq.n	8005400 <__swbuf_r+0x6e>
 80053f6:	89a3      	ldrh	r3, [r4, #12]
 80053f8:	07db      	lsls	r3, r3, #31
 80053fa:	d5e1      	bpl.n	80053c0 <__swbuf_r+0x2e>
 80053fc:	2e0a      	cmp	r6, #10
 80053fe:	d1df      	bne.n	80053c0 <__swbuf_r+0x2e>
 8005400:	4621      	mov	r1, r4
 8005402:	4628      	mov	r0, r5
 8005404:	f7ff fe0c 	bl	8005020 <_fflush_r>
 8005408:	2800      	cmp	r0, #0
 800540a:	d0d9      	beq.n	80053c0 <__swbuf_r+0x2e>
 800540c:	e7d6      	b.n	80053bc <__swbuf_r+0x2a>
	...

08005410 <__swsetup_r>:
 8005410:	b538      	push	{r3, r4, r5, lr}
 8005412:	4b29      	ldr	r3, [pc, #164]	@ (80054b8 <__swsetup_r+0xa8>)
 8005414:	4605      	mov	r5, r0
 8005416:	6818      	ldr	r0, [r3, #0]
 8005418:	460c      	mov	r4, r1
 800541a:	b118      	cbz	r0, 8005424 <__swsetup_r+0x14>
 800541c:	6a03      	ldr	r3, [r0, #32]
 800541e:	b90b      	cbnz	r3, 8005424 <__swsetup_r+0x14>
 8005420:	f7ff fec6 	bl	80051b0 <__sinit>
 8005424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005428:	0719      	lsls	r1, r3, #28
 800542a:	d422      	bmi.n	8005472 <__swsetup_r+0x62>
 800542c:	06da      	lsls	r2, r3, #27
 800542e:	d407      	bmi.n	8005440 <__swsetup_r+0x30>
 8005430:	2209      	movs	r2, #9
 8005432:	602a      	str	r2, [r5, #0]
 8005434:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005438:	81a3      	strh	r3, [r4, #12]
 800543a:	f04f 30ff 	mov.w	r0, #4294967295
 800543e:	e033      	b.n	80054a8 <__swsetup_r+0x98>
 8005440:	0758      	lsls	r0, r3, #29
 8005442:	d512      	bpl.n	800546a <__swsetup_r+0x5a>
 8005444:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005446:	b141      	cbz	r1, 800545a <__swsetup_r+0x4a>
 8005448:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800544c:	4299      	cmp	r1, r3
 800544e:	d002      	beq.n	8005456 <__swsetup_r+0x46>
 8005450:	4628      	mov	r0, r5
 8005452:	f000 f8bd 	bl	80055d0 <_free_r>
 8005456:	2300      	movs	r3, #0
 8005458:	6363      	str	r3, [r4, #52]	@ 0x34
 800545a:	89a3      	ldrh	r3, [r4, #12]
 800545c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005460:	81a3      	strh	r3, [r4, #12]
 8005462:	2300      	movs	r3, #0
 8005464:	6063      	str	r3, [r4, #4]
 8005466:	6923      	ldr	r3, [r4, #16]
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	89a3      	ldrh	r3, [r4, #12]
 800546c:	f043 0308 	orr.w	r3, r3, #8
 8005470:	81a3      	strh	r3, [r4, #12]
 8005472:	6923      	ldr	r3, [r4, #16]
 8005474:	b94b      	cbnz	r3, 800548a <__swsetup_r+0x7a>
 8005476:	89a3      	ldrh	r3, [r4, #12]
 8005478:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800547c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005480:	d003      	beq.n	800548a <__swsetup_r+0x7a>
 8005482:	4621      	mov	r1, r4
 8005484:	4628      	mov	r0, r5
 8005486:	f000 fc91 	bl	8005dac <__smakebuf_r>
 800548a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800548e:	f013 0201 	ands.w	r2, r3, #1
 8005492:	d00a      	beq.n	80054aa <__swsetup_r+0x9a>
 8005494:	2200      	movs	r2, #0
 8005496:	60a2      	str	r2, [r4, #8]
 8005498:	6962      	ldr	r2, [r4, #20]
 800549a:	4252      	negs	r2, r2
 800549c:	61a2      	str	r2, [r4, #24]
 800549e:	6922      	ldr	r2, [r4, #16]
 80054a0:	b942      	cbnz	r2, 80054b4 <__swsetup_r+0xa4>
 80054a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80054a6:	d1c5      	bne.n	8005434 <__swsetup_r+0x24>
 80054a8:	bd38      	pop	{r3, r4, r5, pc}
 80054aa:	0799      	lsls	r1, r3, #30
 80054ac:	bf58      	it	pl
 80054ae:	6962      	ldrpl	r2, [r4, #20]
 80054b0:	60a2      	str	r2, [r4, #8]
 80054b2:	e7f4      	b.n	800549e <__swsetup_r+0x8e>
 80054b4:	2000      	movs	r0, #0
 80054b6:	e7f7      	b.n	80054a8 <__swsetup_r+0x98>
 80054b8:	20000030 	.word	0x20000030

080054bc <memset>:
 80054bc:	4402      	add	r2, r0
 80054be:	4603      	mov	r3, r0
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d100      	bne.n	80054c6 <memset+0xa>
 80054c4:	4770      	bx	lr
 80054c6:	f803 1b01 	strb.w	r1, [r3], #1
 80054ca:	e7f9      	b.n	80054c0 <memset+0x4>

080054cc <_close_r>:
 80054cc:	b538      	push	{r3, r4, r5, lr}
 80054ce:	4d06      	ldr	r5, [pc, #24]	@ (80054e8 <_close_r+0x1c>)
 80054d0:	2300      	movs	r3, #0
 80054d2:	4604      	mov	r4, r0
 80054d4:	4608      	mov	r0, r1
 80054d6:	602b      	str	r3, [r5, #0]
 80054d8:	f7fc f8bb 	bl	8001652 <_close>
 80054dc:	1c43      	adds	r3, r0, #1
 80054de:	d102      	bne.n	80054e6 <_close_r+0x1a>
 80054e0:	682b      	ldr	r3, [r5, #0]
 80054e2:	b103      	cbz	r3, 80054e6 <_close_r+0x1a>
 80054e4:	6023      	str	r3, [r4, #0]
 80054e6:	bd38      	pop	{r3, r4, r5, pc}
 80054e8:	200006e0 	.word	0x200006e0

080054ec <_lseek_r>:
 80054ec:	b538      	push	{r3, r4, r5, lr}
 80054ee:	4d07      	ldr	r5, [pc, #28]	@ (800550c <_lseek_r+0x20>)
 80054f0:	4604      	mov	r4, r0
 80054f2:	4608      	mov	r0, r1
 80054f4:	4611      	mov	r1, r2
 80054f6:	2200      	movs	r2, #0
 80054f8:	602a      	str	r2, [r5, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	f7fc f8d0 	bl	80016a0 <_lseek>
 8005500:	1c43      	adds	r3, r0, #1
 8005502:	d102      	bne.n	800550a <_lseek_r+0x1e>
 8005504:	682b      	ldr	r3, [r5, #0]
 8005506:	b103      	cbz	r3, 800550a <_lseek_r+0x1e>
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	bd38      	pop	{r3, r4, r5, pc}
 800550c:	200006e0 	.word	0x200006e0

08005510 <_read_r>:
 8005510:	b538      	push	{r3, r4, r5, lr}
 8005512:	4d07      	ldr	r5, [pc, #28]	@ (8005530 <_read_r+0x20>)
 8005514:	4604      	mov	r4, r0
 8005516:	4608      	mov	r0, r1
 8005518:	4611      	mov	r1, r2
 800551a:	2200      	movs	r2, #0
 800551c:	602a      	str	r2, [r5, #0]
 800551e:	461a      	mov	r2, r3
 8005520:	f7fc f85e 	bl	80015e0 <_read>
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	d102      	bne.n	800552e <_read_r+0x1e>
 8005528:	682b      	ldr	r3, [r5, #0]
 800552a:	b103      	cbz	r3, 800552e <_read_r+0x1e>
 800552c:	6023      	str	r3, [r4, #0]
 800552e:	bd38      	pop	{r3, r4, r5, pc}
 8005530:	200006e0 	.word	0x200006e0

08005534 <_write_r>:
 8005534:	b538      	push	{r3, r4, r5, lr}
 8005536:	4d07      	ldr	r5, [pc, #28]	@ (8005554 <_write_r+0x20>)
 8005538:	4604      	mov	r4, r0
 800553a:	4608      	mov	r0, r1
 800553c:	4611      	mov	r1, r2
 800553e:	2200      	movs	r2, #0
 8005540:	602a      	str	r2, [r5, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	f7fc f869 	bl	800161a <_write>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d102      	bne.n	8005552 <_write_r+0x1e>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	b103      	cbz	r3, 8005552 <_write_r+0x1e>
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	bd38      	pop	{r3, r4, r5, pc}
 8005554:	200006e0 	.word	0x200006e0

08005558 <__errno>:
 8005558:	4b01      	ldr	r3, [pc, #4]	@ (8005560 <__errno+0x8>)
 800555a:	6818      	ldr	r0, [r3, #0]
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	20000030 	.word	0x20000030

08005564 <__libc_init_array>:
 8005564:	b570      	push	{r4, r5, r6, lr}
 8005566:	4d0d      	ldr	r5, [pc, #52]	@ (800559c <__libc_init_array+0x38>)
 8005568:	4c0d      	ldr	r4, [pc, #52]	@ (80055a0 <__libc_init_array+0x3c>)
 800556a:	1b64      	subs	r4, r4, r5
 800556c:	10a4      	asrs	r4, r4, #2
 800556e:	2600      	movs	r6, #0
 8005570:	42a6      	cmp	r6, r4
 8005572:	d109      	bne.n	8005588 <__libc_init_array+0x24>
 8005574:	4d0b      	ldr	r5, [pc, #44]	@ (80055a4 <__libc_init_array+0x40>)
 8005576:	4c0c      	ldr	r4, [pc, #48]	@ (80055a8 <__libc_init_array+0x44>)
 8005578:	f000 fcba 	bl	8005ef0 <_init>
 800557c:	1b64      	subs	r4, r4, r5
 800557e:	10a4      	asrs	r4, r4, #2
 8005580:	2600      	movs	r6, #0
 8005582:	42a6      	cmp	r6, r4
 8005584:	d105      	bne.n	8005592 <__libc_init_array+0x2e>
 8005586:	bd70      	pop	{r4, r5, r6, pc}
 8005588:	f855 3b04 	ldr.w	r3, [r5], #4
 800558c:	4798      	blx	r3
 800558e:	3601      	adds	r6, #1
 8005590:	e7ee      	b.n	8005570 <__libc_init_array+0xc>
 8005592:	f855 3b04 	ldr.w	r3, [r5], #4
 8005596:	4798      	blx	r3
 8005598:	3601      	adds	r6, #1
 800559a:	e7f2      	b.n	8005582 <__libc_init_array+0x1e>
 800559c:	0800610c 	.word	0x0800610c
 80055a0:	0800610c 	.word	0x0800610c
 80055a4:	0800610c 	.word	0x0800610c
 80055a8:	08006110 	.word	0x08006110

080055ac <__retarget_lock_init_recursive>:
 80055ac:	4770      	bx	lr

080055ae <__retarget_lock_acquire_recursive>:
 80055ae:	4770      	bx	lr

080055b0 <__retarget_lock_release_recursive>:
 80055b0:	4770      	bx	lr

080055b2 <memcpy>:
 80055b2:	440a      	add	r2, r1
 80055b4:	4291      	cmp	r1, r2
 80055b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80055ba:	d100      	bne.n	80055be <memcpy+0xc>
 80055bc:	4770      	bx	lr
 80055be:	b510      	push	{r4, lr}
 80055c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055c8:	4291      	cmp	r1, r2
 80055ca:	d1f9      	bne.n	80055c0 <memcpy+0xe>
 80055cc:	bd10      	pop	{r4, pc}
	...

080055d0 <_free_r>:
 80055d0:	b538      	push	{r3, r4, r5, lr}
 80055d2:	4605      	mov	r5, r0
 80055d4:	2900      	cmp	r1, #0
 80055d6:	d041      	beq.n	800565c <_free_r+0x8c>
 80055d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055dc:	1f0c      	subs	r4, r1, #4
 80055de:	2b00      	cmp	r3, #0
 80055e0:	bfb8      	it	lt
 80055e2:	18e4      	addlt	r4, r4, r3
 80055e4:	f000 f8e0 	bl	80057a8 <__malloc_lock>
 80055e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005660 <_free_r+0x90>)
 80055ea:	6813      	ldr	r3, [r2, #0]
 80055ec:	b933      	cbnz	r3, 80055fc <_free_r+0x2c>
 80055ee:	6063      	str	r3, [r4, #4]
 80055f0:	6014      	str	r4, [r2, #0]
 80055f2:	4628      	mov	r0, r5
 80055f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055f8:	f000 b8dc 	b.w	80057b4 <__malloc_unlock>
 80055fc:	42a3      	cmp	r3, r4
 80055fe:	d908      	bls.n	8005612 <_free_r+0x42>
 8005600:	6820      	ldr	r0, [r4, #0]
 8005602:	1821      	adds	r1, r4, r0
 8005604:	428b      	cmp	r3, r1
 8005606:	bf01      	itttt	eq
 8005608:	6819      	ldreq	r1, [r3, #0]
 800560a:	685b      	ldreq	r3, [r3, #4]
 800560c:	1809      	addeq	r1, r1, r0
 800560e:	6021      	streq	r1, [r4, #0]
 8005610:	e7ed      	b.n	80055ee <_free_r+0x1e>
 8005612:	461a      	mov	r2, r3
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	b10b      	cbz	r3, 800561c <_free_r+0x4c>
 8005618:	42a3      	cmp	r3, r4
 800561a:	d9fa      	bls.n	8005612 <_free_r+0x42>
 800561c:	6811      	ldr	r1, [r2, #0]
 800561e:	1850      	adds	r0, r2, r1
 8005620:	42a0      	cmp	r0, r4
 8005622:	d10b      	bne.n	800563c <_free_r+0x6c>
 8005624:	6820      	ldr	r0, [r4, #0]
 8005626:	4401      	add	r1, r0
 8005628:	1850      	adds	r0, r2, r1
 800562a:	4283      	cmp	r3, r0
 800562c:	6011      	str	r1, [r2, #0]
 800562e:	d1e0      	bne.n	80055f2 <_free_r+0x22>
 8005630:	6818      	ldr	r0, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	6053      	str	r3, [r2, #4]
 8005636:	4408      	add	r0, r1
 8005638:	6010      	str	r0, [r2, #0]
 800563a:	e7da      	b.n	80055f2 <_free_r+0x22>
 800563c:	d902      	bls.n	8005644 <_free_r+0x74>
 800563e:	230c      	movs	r3, #12
 8005640:	602b      	str	r3, [r5, #0]
 8005642:	e7d6      	b.n	80055f2 <_free_r+0x22>
 8005644:	6820      	ldr	r0, [r4, #0]
 8005646:	1821      	adds	r1, r4, r0
 8005648:	428b      	cmp	r3, r1
 800564a:	bf04      	itt	eq
 800564c:	6819      	ldreq	r1, [r3, #0]
 800564e:	685b      	ldreq	r3, [r3, #4]
 8005650:	6063      	str	r3, [r4, #4]
 8005652:	bf04      	itt	eq
 8005654:	1809      	addeq	r1, r1, r0
 8005656:	6021      	streq	r1, [r4, #0]
 8005658:	6054      	str	r4, [r2, #4]
 800565a:	e7ca      	b.n	80055f2 <_free_r+0x22>
 800565c:	bd38      	pop	{r3, r4, r5, pc}
 800565e:	bf00      	nop
 8005660:	200006ec 	.word	0x200006ec

08005664 <sbrk_aligned>:
 8005664:	b570      	push	{r4, r5, r6, lr}
 8005666:	4e0f      	ldr	r6, [pc, #60]	@ (80056a4 <sbrk_aligned+0x40>)
 8005668:	460c      	mov	r4, r1
 800566a:	6831      	ldr	r1, [r6, #0]
 800566c:	4605      	mov	r5, r0
 800566e:	b911      	cbnz	r1, 8005676 <sbrk_aligned+0x12>
 8005670:	f000 fc2e 	bl	8005ed0 <_sbrk_r>
 8005674:	6030      	str	r0, [r6, #0]
 8005676:	4621      	mov	r1, r4
 8005678:	4628      	mov	r0, r5
 800567a:	f000 fc29 	bl	8005ed0 <_sbrk_r>
 800567e:	1c43      	adds	r3, r0, #1
 8005680:	d103      	bne.n	800568a <sbrk_aligned+0x26>
 8005682:	f04f 34ff 	mov.w	r4, #4294967295
 8005686:	4620      	mov	r0, r4
 8005688:	bd70      	pop	{r4, r5, r6, pc}
 800568a:	1cc4      	adds	r4, r0, #3
 800568c:	f024 0403 	bic.w	r4, r4, #3
 8005690:	42a0      	cmp	r0, r4
 8005692:	d0f8      	beq.n	8005686 <sbrk_aligned+0x22>
 8005694:	1a21      	subs	r1, r4, r0
 8005696:	4628      	mov	r0, r5
 8005698:	f000 fc1a 	bl	8005ed0 <_sbrk_r>
 800569c:	3001      	adds	r0, #1
 800569e:	d1f2      	bne.n	8005686 <sbrk_aligned+0x22>
 80056a0:	e7ef      	b.n	8005682 <sbrk_aligned+0x1e>
 80056a2:	bf00      	nop
 80056a4:	200006e8 	.word	0x200006e8

080056a8 <_malloc_r>:
 80056a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056ac:	1ccd      	adds	r5, r1, #3
 80056ae:	f025 0503 	bic.w	r5, r5, #3
 80056b2:	3508      	adds	r5, #8
 80056b4:	2d0c      	cmp	r5, #12
 80056b6:	bf38      	it	cc
 80056b8:	250c      	movcc	r5, #12
 80056ba:	2d00      	cmp	r5, #0
 80056bc:	4606      	mov	r6, r0
 80056be:	db01      	blt.n	80056c4 <_malloc_r+0x1c>
 80056c0:	42a9      	cmp	r1, r5
 80056c2:	d904      	bls.n	80056ce <_malloc_r+0x26>
 80056c4:	230c      	movs	r3, #12
 80056c6:	6033      	str	r3, [r6, #0]
 80056c8:	2000      	movs	r0, #0
 80056ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057a4 <_malloc_r+0xfc>
 80056d2:	f000 f869 	bl	80057a8 <__malloc_lock>
 80056d6:	f8d8 3000 	ldr.w	r3, [r8]
 80056da:	461c      	mov	r4, r3
 80056dc:	bb44      	cbnz	r4, 8005730 <_malloc_r+0x88>
 80056de:	4629      	mov	r1, r5
 80056e0:	4630      	mov	r0, r6
 80056e2:	f7ff ffbf 	bl	8005664 <sbrk_aligned>
 80056e6:	1c43      	adds	r3, r0, #1
 80056e8:	4604      	mov	r4, r0
 80056ea:	d158      	bne.n	800579e <_malloc_r+0xf6>
 80056ec:	f8d8 4000 	ldr.w	r4, [r8]
 80056f0:	4627      	mov	r7, r4
 80056f2:	2f00      	cmp	r7, #0
 80056f4:	d143      	bne.n	800577e <_malloc_r+0xd6>
 80056f6:	2c00      	cmp	r4, #0
 80056f8:	d04b      	beq.n	8005792 <_malloc_r+0xea>
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	4639      	mov	r1, r7
 80056fe:	4630      	mov	r0, r6
 8005700:	eb04 0903 	add.w	r9, r4, r3
 8005704:	f000 fbe4 	bl	8005ed0 <_sbrk_r>
 8005708:	4581      	cmp	r9, r0
 800570a:	d142      	bne.n	8005792 <_malloc_r+0xea>
 800570c:	6821      	ldr	r1, [r4, #0]
 800570e:	1a6d      	subs	r5, r5, r1
 8005710:	4629      	mov	r1, r5
 8005712:	4630      	mov	r0, r6
 8005714:	f7ff ffa6 	bl	8005664 <sbrk_aligned>
 8005718:	3001      	adds	r0, #1
 800571a:	d03a      	beq.n	8005792 <_malloc_r+0xea>
 800571c:	6823      	ldr	r3, [r4, #0]
 800571e:	442b      	add	r3, r5
 8005720:	6023      	str	r3, [r4, #0]
 8005722:	f8d8 3000 	ldr.w	r3, [r8]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	bb62      	cbnz	r2, 8005784 <_malloc_r+0xdc>
 800572a:	f8c8 7000 	str.w	r7, [r8]
 800572e:	e00f      	b.n	8005750 <_malloc_r+0xa8>
 8005730:	6822      	ldr	r2, [r4, #0]
 8005732:	1b52      	subs	r2, r2, r5
 8005734:	d420      	bmi.n	8005778 <_malloc_r+0xd0>
 8005736:	2a0b      	cmp	r2, #11
 8005738:	d917      	bls.n	800576a <_malloc_r+0xc2>
 800573a:	1961      	adds	r1, r4, r5
 800573c:	42a3      	cmp	r3, r4
 800573e:	6025      	str	r5, [r4, #0]
 8005740:	bf18      	it	ne
 8005742:	6059      	strne	r1, [r3, #4]
 8005744:	6863      	ldr	r3, [r4, #4]
 8005746:	bf08      	it	eq
 8005748:	f8c8 1000 	streq.w	r1, [r8]
 800574c:	5162      	str	r2, [r4, r5]
 800574e:	604b      	str	r3, [r1, #4]
 8005750:	4630      	mov	r0, r6
 8005752:	f000 f82f 	bl	80057b4 <__malloc_unlock>
 8005756:	f104 000b 	add.w	r0, r4, #11
 800575a:	1d23      	adds	r3, r4, #4
 800575c:	f020 0007 	bic.w	r0, r0, #7
 8005760:	1ac2      	subs	r2, r0, r3
 8005762:	bf1c      	itt	ne
 8005764:	1a1b      	subne	r3, r3, r0
 8005766:	50a3      	strne	r3, [r4, r2]
 8005768:	e7af      	b.n	80056ca <_malloc_r+0x22>
 800576a:	6862      	ldr	r2, [r4, #4]
 800576c:	42a3      	cmp	r3, r4
 800576e:	bf0c      	ite	eq
 8005770:	f8c8 2000 	streq.w	r2, [r8]
 8005774:	605a      	strne	r2, [r3, #4]
 8005776:	e7eb      	b.n	8005750 <_malloc_r+0xa8>
 8005778:	4623      	mov	r3, r4
 800577a:	6864      	ldr	r4, [r4, #4]
 800577c:	e7ae      	b.n	80056dc <_malloc_r+0x34>
 800577e:	463c      	mov	r4, r7
 8005780:	687f      	ldr	r7, [r7, #4]
 8005782:	e7b6      	b.n	80056f2 <_malloc_r+0x4a>
 8005784:	461a      	mov	r2, r3
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	42a3      	cmp	r3, r4
 800578a:	d1fb      	bne.n	8005784 <_malloc_r+0xdc>
 800578c:	2300      	movs	r3, #0
 800578e:	6053      	str	r3, [r2, #4]
 8005790:	e7de      	b.n	8005750 <_malloc_r+0xa8>
 8005792:	230c      	movs	r3, #12
 8005794:	6033      	str	r3, [r6, #0]
 8005796:	4630      	mov	r0, r6
 8005798:	f000 f80c 	bl	80057b4 <__malloc_unlock>
 800579c:	e794      	b.n	80056c8 <_malloc_r+0x20>
 800579e:	6005      	str	r5, [r0, #0]
 80057a0:	e7d6      	b.n	8005750 <_malloc_r+0xa8>
 80057a2:	bf00      	nop
 80057a4:	200006ec 	.word	0x200006ec

080057a8 <__malloc_lock>:
 80057a8:	4801      	ldr	r0, [pc, #4]	@ (80057b0 <__malloc_lock+0x8>)
 80057aa:	f7ff bf00 	b.w	80055ae <__retarget_lock_acquire_recursive>
 80057ae:	bf00      	nop
 80057b0:	200006e4 	.word	0x200006e4

080057b4 <__malloc_unlock>:
 80057b4:	4801      	ldr	r0, [pc, #4]	@ (80057bc <__malloc_unlock+0x8>)
 80057b6:	f7ff befb 	b.w	80055b0 <__retarget_lock_release_recursive>
 80057ba:	bf00      	nop
 80057bc:	200006e4 	.word	0x200006e4

080057c0 <__sfputc_r>:
 80057c0:	6893      	ldr	r3, [r2, #8]
 80057c2:	3b01      	subs	r3, #1
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	b410      	push	{r4}
 80057c8:	6093      	str	r3, [r2, #8]
 80057ca:	da08      	bge.n	80057de <__sfputc_r+0x1e>
 80057cc:	6994      	ldr	r4, [r2, #24]
 80057ce:	42a3      	cmp	r3, r4
 80057d0:	db01      	blt.n	80057d6 <__sfputc_r+0x16>
 80057d2:	290a      	cmp	r1, #10
 80057d4:	d103      	bne.n	80057de <__sfputc_r+0x1e>
 80057d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057da:	f7ff bdda 	b.w	8005392 <__swbuf_r>
 80057de:	6813      	ldr	r3, [r2, #0]
 80057e0:	1c58      	adds	r0, r3, #1
 80057e2:	6010      	str	r0, [r2, #0]
 80057e4:	7019      	strb	r1, [r3, #0]
 80057e6:	4608      	mov	r0, r1
 80057e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <__sfputs_r>:
 80057ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f0:	4606      	mov	r6, r0
 80057f2:	460f      	mov	r7, r1
 80057f4:	4614      	mov	r4, r2
 80057f6:	18d5      	adds	r5, r2, r3
 80057f8:	42ac      	cmp	r4, r5
 80057fa:	d101      	bne.n	8005800 <__sfputs_r+0x12>
 80057fc:	2000      	movs	r0, #0
 80057fe:	e007      	b.n	8005810 <__sfputs_r+0x22>
 8005800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005804:	463a      	mov	r2, r7
 8005806:	4630      	mov	r0, r6
 8005808:	f7ff ffda 	bl	80057c0 <__sfputc_r>
 800580c:	1c43      	adds	r3, r0, #1
 800580e:	d1f3      	bne.n	80057f8 <__sfputs_r+0xa>
 8005810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005814 <_vfiprintf_r>:
 8005814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005818:	460d      	mov	r5, r1
 800581a:	b09d      	sub	sp, #116	@ 0x74
 800581c:	4614      	mov	r4, r2
 800581e:	4698      	mov	r8, r3
 8005820:	4606      	mov	r6, r0
 8005822:	b118      	cbz	r0, 800582c <_vfiprintf_r+0x18>
 8005824:	6a03      	ldr	r3, [r0, #32]
 8005826:	b90b      	cbnz	r3, 800582c <_vfiprintf_r+0x18>
 8005828:	f7ff fcc2 	bl	80051b0 <__sinit>
 800582c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800582e:	07d9      	lsls	r1, r3, #31
 8005830:	d405      	bmi.n	800583e <_vfiprintf_r+0x2a>
 8005832:	89ab      	ldrh	r3, [r5, #12]
 8005834:	059a      	lsls	r2, r3, #22
 8005836:	d402      	bmi.n	800583e <_vfiprintf_r+0x2a>
 8005838:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800583a:	f7ff feb8 	bl	80055ae <__retarget_lock_acquire_recursive>
 800583e:	89ab      	ldrh	r3, [r5, #12]
 8005840:	071b      	lsls	r3, r3, #28
 8005842:	d501      	bpl.n	8005848 <_vfiprintf_r+0x34>
 8005844:	692b      	ldr	r3, [r5, #16]
 8005846:	b99b      	cbnz	r3, 8005870 <_vfiprintf_r+0x5c>
 8005848:	4629      	mov	r1, r5
 800584a:	4630      	mov	r0, r6
 800584c:	f7ff fde0 	bl	8005410 <__swsetup_r>
 8005850:	b170      	cbz	r0, 8005870 <_vfiprintf_r+0x5c>
 8005852:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005854:	07dc      	lsls	r4, r3, #31
 8005856:	d504      	bpl.n	8005862 <_vfiprintf_r+0x4e>
 8005858:	f04f 30ff 	mov.w	r0, #4294967295
 800585c:	b01d      	add	sp, #116	@ 0x74
 800585e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005862:	89ab      	ldrh	r3, [r5, #12]
 8005864:	0598      	lsls	r0, r3, #22
 8005866:	d4f7      	bmi.n	8005858 <_vfiprintf_r+0x44>
 8005868:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800586a:	f7ff fea1 	bl	80055b0 <__retarget_lock_release_recursive>
 800586e:	e7f3      	b.n	8005858 <_vfiprintf_r+0x44>
 8005870:	2300      	movs	r3, #0
 8005872:	9309      	str	r3, [sp, #36]	@ 0x24
 8005874:	2320      	movs	r3, #32
 8005876:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800587a:	f8cd 800c 	str.w	r8, [sp, #12]
 800587e:	2330      	movs	r3, #48	@ 0x30
 8005880:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005a30 <_vfiprintf_r+0x21c>
 8005884:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005888:	f04f 0901 	mov.w	r9, #1
 800588c:	4623      	mov	r3, r4
 800588e:	469a      	mov	sl, r3
 8005890:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005894:	b10a      	cbz	r2, 800589a <_vfiprintf_r+0x86>
 8005896:	2a25      	cmp	r2, #37	@ 0x25
 8005898:	d1f9      	bne.n	800588e <_vfiprintf_r+0x7a>
 800589a:	ebba 0b04 	subs.w	fp, sl, r4
 800589e:	d00b      	beq.n	80058b8 <_vfiprintf_r+0xa4>
 80058a0:	465b      	mov	r3, fp
 80058a2:	4622      	mov	r2, r4
 80058a4:	4629      	mov	r1, r5
 80058a6:	4630      	mov	r0, r6
 80058a8:	f7ff ffa1 	bl	80057ee <__sfputs_r>
 80058ac:	3001      	adds	r0, #1
 80058ae:	f000 80a7 	beq.w	8005a00 <_vfiprintf_r+0x1ec>
 80058b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058b4:	445a      	add	r2, fp
 80058b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80058b8:	f89a 3000 	ldrb.w	r3, [sl]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 809f 	beq.w	8005a00 <_vfiprintf_r+0x1ec>
 80058c2:	2300      	movs	r3, #0
 80058c4:	f04f 32ff 	mov.w	r2, #4294967295
 80058c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058cc:	f10a 0a01 	add.w	sl, sl, #1
 80058d0:	9304      	str	r3, [sp, #16]
 80058d2:	9307      	str	r3, [sp, #28]
 80058d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80058d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80058da:	4654      	mov	r4, sl
 80058dc:	2205      	movs	r2, #5
 80058de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058e2:	4853      	ldr	r0, [pc, #332]	@ (8005a30 <_vfiprintf_r+0x21c>)
 80058e4:	f7fa fc7c 	bl	80001e0 <memchr>
 80058e8:	9a04      	ldr	r2, [sp, #16]
 80058ea:	b9d8      	cbnz	r0, 8005924 <_vfiprintf_r+0x110>
 80058ec:	06d1      	lsls	r1, r2, #27
 80058ee:	bf44      	itt	mi
 80058f0:	2320      	movmi	r3, #32
 80058f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058f6:	0713      	lsls	r3, r2, #28
 80058f8:	bf44      	itt	mi
 80058fa:	232b      	movmi	r3, #43	@ 0x2b
 80058fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005900:	f89a 3000 	ldrb.w	r3, [sl]
 8005904:	2b2a      	cmp	r3, #42	@ 0x2a
 8005906:	d015      	beq.n	8005934 <_vfiprintf_r+0x120>
 8005908:	9a07      	ldr	r2, [sp, #28]
 800590a:	4654      	mov	r4, sl
 800590c:	2000      	movs	r0, #0
 800590e:	f04f 0c0a 	mov.w	ip, #10
 8005912:	4621      	mov	r1, r4
 8005914:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005918:	3b30      	subs	r3, #48	@ 0x30
 800591a:	2b09      	cmp	r3, #9
 800591c:	d94b      	bls.n	80059b6 <_vfiprintf_r+0x1a2>
 800591e:	b1b0      	cbz	r0, 800594e <_vfiprintf_r+0x13a>
 8005920:	9207      	str	r2, [sp, #28]
 8005922:	e014      	b.n	800594e <_vfiprintf_r+0x13a>
 8005924:	eba0 0308 	sub.w	r3, r0, r8
 8005928:	fa09 f303 	lsl.w	r3, r9, r3
 800592c:	4313      	orrs	r3, r2
 800592e:	9304      	str	r3, [sp, #16]
 8005930:	46a2      	mov	sl, r4
 8005932:	e7d2      	b.n	80058da <_vfiprintf_r+0xc6>
 8005934:	9b03      	ldr	r3, [sp, #12]
 8005936:	1d19      	adds	r1, r3, #4
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	9103      	str	r1, [sp, #12]
 800593c:	2b00      	cmp	r3, #0
 800593e:	bfbb      	ittet	lt
 8005940:	425b      	neglt	r3, r3
 8005942:	f042 0202 	orrlt.w	r2, r2, #2
 8005946:	9307      	strge	r3, [sp, #28]
 8005948:	9307      	strlt	r3, [sp, #28]
 800594a:	bfb8      	it	lt
 800594c:	9204      	strlt	r2, [sp, #16]
 800594e:	7823      	ldrb	r3, [r4, #0]
 8005950:	2b2e      	cmp	r3, #46	@ 0x2e
 8005952:	d10a      	bne.n	800596a <_vfiprintf_r+0x156>
 8005954:	7863      	ldrb	r3, [r4, #1]
 8005956:	2b2a      	cmp	r3, #42	@ 0x2a
 8005958:	d132      	bne.n	80059c0 <_vfiprintf_r+0x1ac>
 800595a:	9b03      	ldr	r3, [sp, #12]
 800595c:	1d1a      	adds	r2, r3, #4
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	9203      	str	r2, [sp, #12]
 8005962:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005966:	3402      	adds	r4, #2
 8005968:	9305      	str	r3, [sp, #20]
 800596a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005a40 <_vfiprintf_r+0x22c>
 800596e:	7821      	ldrb	r1, [r4, #0]
 8005970:	2203      	movs	r2, #3
 8005972:	4650      	mov	r0, sl
 8005974:	f7fa fc34 	bl	80001e0 <memchr>
 8005978:	b138      	cbz	r0, 800598a <_vfiprintf_r+0x176>
 800597a:	9b04      	ldr	r3, [sp, #16]
 800597c:	eba0 000a 	sub.w	r0, r0, sl
 8005980:	2240      	movs	r2, #64	@ 0x40
 8005982:	4082      	lsls	r2, r0
 8005984:	4313      	orrs	r3, r2
 8005986:	3401      	adds	r4, #1
 8005988:	9304      	str	r3, [sp, #16]
 800598a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800598e:	4829      	ldr	r0, [pc, #164]	@ (8005a34 <_vfiprintf_r+0x220>)
 8005990:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005994:	2206      	movs	r2, #6
 8005996:	f7fa fc23 	bl	80001e0 <memchr>
 800599a:	2800      	cmp	r0, #0
 800599c:	d03f      	beq.n	8005a1e <_vfiprintf_r+0x20a>
 800599e:	4b26      	ldr	r3, [pc, #152]	@ (8005a38 <_vfiprintf_r+0x224>)
 80059a0:	bb1b      	cbnz	r3, 80059ea <_vfiprintf_r+0x1d6>
 80059a2:	9b03      	ldr	r3, [sp, #12]
 80059a4:	3307      	adds	r3, #7
 80059a6:	f023 0307 	bic.w	r3, r3, #7
 80059aa:	3308      	adds	r3, #8
 80059ac:	9303      	str	r3, [sp, #12]
 80059ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059b0:	443b      	add	r3, r7
 80059b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80059b4:	e76a      	b.n	800588c <_vfiprintf_r+0x78>
 80059b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80059ba:	460c      	mov	r4, r1
 80059bc:	2001      	movs	r0, #1
 80059be:	e7a8      	b.n	8005912 <_vfiprintf_r+0xfe>
 80059c0:	2300      	movs	r3, #0
 80059c2:	3401      	adds	r4, #1
 80059c4:	9305      	str	r3, [sp, #20]
 80059c6:	4619      	mov	r1, r3
 80059c8:	f04f 0c0a 	mov.w	ip, #10
 80059cc:	4620      	mov	r0, r4
 80059ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059d2:	3a30      	subs	r2, #48	@ 0x30
 80059d4:	2a09      	cmp	r2, #9
 80059d6:	d903      	bls.n	80059e0 <_vfiprintf_r+0x1cc>
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0c6      	beq.n	800596a <_vfiprintf_r+0x156>
 80059dc:	9105      	str	r1, [sp, #20]
 80059de:	e7c4      	b.n	800596a <_vfiprintf_r+0x156>
 80059e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80059e4:	4604      	mov	r4, r0
 80059e6:	2301      	movs	r3, #1
 80059e8:	e7f0      	b.n	80059cc <_vfiprintf_r+0x1b8>
 80059ea:	ab03      	add	r3, sp, #12
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	462a      	mov	r2, r5
 80059f0:	4b12      	ldr	r3, [pc, #72]	@ (8005a3c <_vfiprintf_r+0x228>)
 80059f2:	a904      	add	r1, sp, #16
 80059f4:	4630      	mov	r0, r6
 80059f6:	f3af 8000 	nop.w
 80059fa:	4607      	mov	r7, r0
 80059fc:	1c78      	adds	r0, r7, #1
 80059fe:	d1d6      	bne.n	80059ae <_vfiprintf_r+0x19a>
 8005a00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a02:	07d9      	lsls	r1, r3, #31
 8005a04:	d405      	bmi.n	8005a12 <_vfiprintf_r+0x1fe>
 8005a06:	89ab      	ldrh	r3, [r5, #12]
 8005a08:	059a      	lsls	r2, r3, #22
 8005a0a:	d402      	bmi.n	8005a12 <_vfiprintf_r+0x1fe>
 8005a0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a0e:	f7ff fdcf 	bl	80055b0 <__retarget_lock_release_recursive>
 8005a12:	89ab      	ldrh	r3, [r5, #12]
 8005a14:	065b      	lsls	r3, r3, #25
 8005a16:	f53f af1f 	bmi.w	8005858 <_vfiprintf_r+0x44>
 8005a1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a1c:	e71e      	b.n	800585c <_vfiprintf_r+0x48>
 8005a1e:	ab03      	add	r3, sp, #12
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	462a      	mov	r2, r5
 8005a24:	4b05      	ldr	r3, [pc, #20]	@ (8005a3c <_vfiprintf_r+0x228>)
 8005a26:	a904      	add	r1, sp, #16
 8005a28:	4630      	mov	r0, r6
 8005a2a:	f000 f879 	bl	8005b20 <_printf_i>
 8005a2e:	e7e4      	b.n	80059fa <_vfiprintf_r+0x1e6>
 8005a30:	080060d0 	.word	0x080060d0
 8005a34:	080060da 	.word	0x080060da
 8005a38:	00000000 	.word	0x00000000
 8005a3c:	080057ef 	.word	0x080057ef
 8005a40:	080060d6 	.word	0x080060d6

08005a44 <_printf_common>:
 8005a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a48:	4616      	mov	r6, r2
 8005a4a:	4698      	mov	r8, r3
 8005a4c:	688a      	ldr	r2, [r1, #8]
 8005a4e:	690b      	ldr	r3, [r1, #16]
 8005a50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a54:	4293      	cmp	r3, r2
 8005a56:	bfb8      	it	lt
 8005a58:	4613      	movlt	r3, r2
 8005a5a:	6033      	str	r3, [r6, #0]
 8005a5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a60:	4607      	mov	r7, r0
 8005a62:	460c      	mov	r4, r1
 8005a64:	b10a      	cbz	r2, 8005a6a <_printf_common+0x26>
 8005a66:	3301      	adds	r3, #1
 8005a68:	6033      	str	r3, [r6, #0]
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	0699      	lsls	r1, r3, #26
 8005a6e:	bf42      	ittt	mi
 8005a70:	6833      	ldrmi	r3, [r6, #0]
 8005a72:	3302      	addmi	r3, #2
 8005a74:	6033      	strmi	r3, [r6, #0]
 8005a76:	6825      	ldr	r5, [r4, #0]
 8005a78:	f015 0506 	ands.w	r5, r5, #6
 8005a7c:	d106      	bne.n	8005a8c <_printf_common+0x48>
 8005a7e:	f104 0a19 	add.w	sl, r4, #25
 8005a82:	68e3      	ldr	r3, [r4, #12]
 8005a84:	6832      	ldr	r2, [r6, #0]
 8005a86:	1a9b      	subs	r3, r3, r2
 8005a88:	42ab      	cmp	r3, r5
 8005a8a:	dc26      	bgt.n	8005ada <_printf_common+0x96>
 8005a8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a90:	6822      	ldr	r2, [r4, #0]
 8005a92:	3b00      	subs	r3, #0
 8005a94:	bf18      	it	ne
 8005a96:	2301      	movne	r3, #1
 8005a98:	0692      	lsls	r2, r2, #26
 8005a9a:	d42b      	bmi.n	8005af4 <_printf_common+0xb0>
 8005a9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005aa0:	4641      	mov	r1, r8
 8005aa2:	4638      	mov	r0, r7
 8005aa4:	47c8      	blx	r9
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	d01e      	beq.n	8005ae8 <_printf_common+0xa4>
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	6922      	ldr	r2, [r4, #16]
 8005aae:	f003 0306 	and.w	r3, r3, #6
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	bf02      	ittt	eq
 8005ab6:	68e5      	ldreq	r5, [r4, #12]
 8005ab8:	6833      	ldreq	r3, [r6, #0]
 8005aba:	1aed      	subeq	r5, r5, r3
 8005abc:	68a3      	ldr	r3, [r4, #8]
 8005abe:	bf0c      	ite	eq
 8005ac0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ac4:	2500      	movne	r5, #0
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	bfc4      	itt	gt
 8005aca:	1a9b      	subgt	r3, r3, r2
 8005acc:	18ed      	addgt	r5, r5, r3
 8005ace:	2600      	movs	r6, #0
 8005ad0:	341a      	adds	r4, #26
 8005ad2:	42b5      	cmp	r5, r6
 8005ad4:	d11a      	bne.n	8005b0c <_printf_common+0xc8>
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	e008      	b.n	8005aec <_printf_common+0xa8>
 8005ada:	2301      	movs	r3, #1
 8005adc:	4652      	mov	r2, sl
 8005ade:	4641      	mov	r1, r8
 8005ae0:	4638      	mov	r0, r7
 8005ae2:	47c8      	blx	r9
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d103      	bne.n	8005af0 <_printf_common+0xac>
 8005ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af0:	3501      	adds	r5, #1
 8005af2:	e7c6      	b.n	8005a82 <_printf_common+0x3e>
 8005af4:	18e1      	adds	r1, r4, r3
 8005af6:	1c5a      	adds	r2, r3, #1
 8005af8:	2030      	movs	r0, #48	@ 0x30
 8005afa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005afe:	4422      	add	r2, r4
 8005b00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b08:	3302      	adds	r3, #2
 8005b0a:	e7c7      	b.n	8005a9c <_printf_common+0x58>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	4622      	mov	r2, r4
 8005b10:	4641      	mov	r1, r8
 8005b12:	4638      	mov	r0, r7
 8005b14:	47c8      	blx	r9
 8005b16:	3001      	adds	r0, #1
 8005b18:	d0e6      	beq.n	8005ae8 <_printf_common+0xa4>
 8005b1a:	3601      	adds	r6, #1
 8005b1c:	e7d9      	b.n	8005ad2 <_printf_common+0x8e>
	...

08005b20 <_printf_i>:
 8005b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b24:	7e0f      	ldrb	r7, [r1, #24]
 8005b26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b28:	2f78      	cmp	r7, #120	@ 0x78
 8005b2a:	4691      	mov	r9, r2
 8005b2c:	4680      	mov	r8, r0
 8005b2e:	460c      	mov	r4, r1
 8005b30:	469a      	mov	sl, r3
 8005b32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b36:	d807      	bhi.n	8005b48 <_printf_i+0x28>
 8005b38:	2f62      	cmp	r7, #98	@ 0x62
 8005b3a:	d80a      	bhi.n	8005b52 <_printf_i+0x32>
 8005b3c:	2f00      	cmp	r7, #0
 8005b3e:	f000 80d2 	beq.w	8005ce6 <_printf_i+0x1c6>
 8005b42:	2f58      	cmp	r7, #88	@ 0x58
 8005b44:	f000 80b9 	beq.w	8005cba <_printf_i+0x19a>
 8005b48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b50:	e03a      	b.n	8005bc8 <_printf_i+0xa8>
 8005b52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b56:	2b15      	cmp	r3, #21
 8005b58:	d8f6      	bhi.n	8005b48 <_printf_i+0x28>
 8005b5a:	a101      	add	r1, pc, #4	@ (adr r1, 8005b60 <_printf_i+0x40>)
 8005b5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b60:	08005bb9 	.word	0x08005bb9
 8005b64:	08005bcd 	.word	0x08005bcd
 8005b68:	08005b49 	.word	0x08005b49
 8005b6c:	08005b49 	.word	0x08005b49
 8005b70:	08005b49 	.word	0x08005b49
 8005b74:	08005b49 	.word	0x08005b49
 8005b78:	08005bcd 	.word	0x08005bcd
 8005b7c:	08005b49 	.word	0x08005b49
 8005b80:	08005b49 	.word	0x08005b49
 8005b84:	08005b49 	.word	0x08005b49
 8005b88:	08005b49 	.word	0x08005b49
 8005b8c:	08005ccd 	.word	0x08005ccd
 8005b90:	08005bf7 	.word	0x08005bf7
 8005b94:	08005c87 	.word	0x08005c87
 8005b98:	08005b49 	.word	0x08005b49
 8005b9c:	08005b49 	.word	0x08005b49
 8005ba0:	08005cef 	.word	0x08005cef
 8005ba4:	08005b49 	.word	0x08005b49
 8005ba8:	08005bf7 	.word	0x08005bf7
 8005bac:	08005b49 	.word	0x08005b49
 8005bb0:	08005b49 	.word	0x08005b49
 8005bb4:	08005c8f 	.word	0x08005c8f
 8005bb8:	6833      	ldr	r3, [r6, #0]
 8005bba:	1d1a      	adds	r2, r3, #4
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6032      	str	r2, [r6, #0]
 8005bc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e09d      	b.n	8005d08 <_printf_i+0x1e8>
 8005bcc:	6833      	ldr	r3, [r6, #0]
 8005bce:	6820      	ldr	r0, [r4, #0]
 8005bd0:	1d19      	adds	r1, r3, #4
 8005bd2:	6031      	str	r1, [r6, #0]
 8005bd4:	0606      	lsls	r6, r0, #24
 8005bd6:	d501      	bpl.n	8005bdc <_printf_i+0xbc>
 8005bd8:	681d      	ldr	r5, [r3, #0]
 8005bda:	e003      	b.n	8005be4 <_printf_i+0xc4>
 8005bdc:	0645      	lsls	r5, r0, #25
 8005bde:	d5fb      	bpl.n	8005bd8 <_printf_i+0xb8>
 8005be0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005be4:	2d00      	cmp	r5, #0
 8005be6:	da03      	bge.n	8005bf0 <_printf_i+0xd0>
 8005be8:	232d      	movs	r3, #45	@ 0x2d
 8005bea:	426d      	negs	r5, r5
 8005bec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bf0:	4859      	ldr	r0, [pc, #356]	@ (8005d58 <_printf_i+0x238>)
 8005bf2:	230a      	movs	r3, #10
 8005bf4:	e011      	b.n	8005c1a <_printf_i+0xfa>
 8005bf6:	6821      	ldr	r1, [r4, #0]
 8005bf8:	6833      	ldr	r3, [r6, #0]
 8005bfa:	0608      	lsls	r0, r1, #24
 8005bfc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c00:	d402      	bmi.n	8005c08 <_printf_i+0xe8>
 8005c02:	0649      	lsls	r1, r1, #25
 8005c04:	bf48      	it	mi
 8005c06:	b2ad      	uxthmi	r5, r5
 8005c08:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c0a:	4853      	ldr	r0, [pc, #332]	@ (8005d58 <_printf_i+0x238>)
 8005c0c:	6033      	str	r3, [r6, #0]
 8005c0e:	bf14      	ite	ne
 8005c10:	230a      	movne	r3, #10
 8005c12:	2308      	moveq	r3, #8
 8005c14:	2100      	movs	r1, #0
 8005c16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c1a:	6866      	ldr	r6, [r4, #4]
 8005c1c:	60a6      	str	r6, [r4, #8]
 8005c1e:	2e00      	cmp	r6, #0
 8005c20:	bfa2      	ittt	ge
 8005c22:	6821      	ldrge	r1, [r4, #0]
 8005c24:	f021 0104 	bicge.w	r1, r1, #4
 8005c28:	6021      	strge	r1, [r4, #0]
 8005c2a:	b90d      	cbnz	r5, 8005c30 <_printf_i+0x110>
 8005c2c:	2e00      	cmp	r6, #0
 8005c2e:	d04b      	beq.n	8005cc8 <_printf_i+0x1a8>
 8005c30:	4616      	mov	r6, r2
 8005c32:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c36:	fb03 5711 	mls	r7, r3, r1, r5
 8005c3a:	5dc7      	ldrb	r7, [r0, r7]
 8005c3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c40:	462f      	mov	r7, r5
 8005c42:	42bb      	cmp	r3, r7
 8005c44:	460d      	mov	r5, r1
 8005c46:	d9f4      	bls.n	8005c32 <_printf_i+0x112>
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	d10b      	bne.n	8005c64 <_printf_i+0x144>
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	07df      	lsls	r7, r3, #31
 8005c50:	d508      	bpl.n	8005c64 <_printf_i+0x144>
 8005c52:	6923      	ldr	r3, [r4, #16]
 8005c54:	6861      	ldr	r1, [r4, #4]
 8005c56:	4299      	cmp	r1, r3
 8005c58:	bfde      	ittt	le
 8005c5a:	2330      	movle	r3, #48	@ 0x30
 8005c5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c64:	1b92      	subs	r2, r2, r6
 8005c66:	6122      	str	r2, [r4, #16]
 8005c68:	f8cd a000 	str.w	sl, [sp]
 8005c6c:	464b      	mov	r3, r9
 8005c6e:	aa03      	add	r2, sp, #12
 8005c70:	4621      	mov	r1, r4
 8005c72:	4640      	mov	r0, r8
 8005c74:	f7ff fee6 	bl	8005a44 <_printf_common>
 8005c78:	3001      	adds	r0, #1
 8005c7a:	d14a      	bne.n	8005d12 <_printf_i+0x1f2>
 8005c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c80:	b004      	add	sp, #16
 8005c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	f043 0320 	orr.w	r3, r3, #32
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	4833      	ldr	r0, [pc, #204]	@ (8005d5c <_printf_i+0x23c>)
 8005c90:	2778      	movs	r7, #120	@ 0x78
 8005c92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	6831      	ldr	r1, [r6, #0]
 8005c9a:	061f      	lsls	r7, r3, #24
 8005c9c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ca0:	d402      	bmi.n	8005ca8 <_printf_i+0x188>
 8005ca2:	065f      	lsls	r7, r3, #25
 8005ca4:	bf48      	it	mi
 8005ca6:	b2ad      	uxthmi	r5, r5
 8005ca8:	6031      	str	r1, [r6, #0]
 8005caa:	07d9      	lsls	r1, r3, #31
 8005cac:	bf44      	itt	mi
 8005cae:	f043 0320 	orrmi.w	r3, r3, #32
 8005cb2:	6023      	strmi	r3, [r4, #0]
 8005cb4:	b11d      	cbz	r5, 8005cbe <_printf_i+0x19e>
 8005cb6:	2310      	movs	r3, #16
 8005cb8:	e7ac      	b.n	8005c14 <_printf_i+0xf4>
 8005cba:	4827      	ldr	r0, [pc, #156]	@ (8005d58 <_printf_i+0x238>)
 8005cbc:	e7e9      	b.n	8005c92 <_printf_i+0x172>
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	f023 0320 	bic.w	r3, r3, #32
 8005cc4:	6023      	str	r3, [r4, #0]
 8005cc6:	e7f6      	b.n	8005cb6 <_printf_i+0x196>
 8005cc8:	4616      	mov	r6, r2
 8005cca:	e7bd      	b.n	8005c48 <_printf_i+0x128>
 8005ccc:	6833      	ldr	r3, [r6, #0]
 8005cce:	6825      	ldr	r5, [r4, #0]
 8005cd0:	6961      	ldr	r1, [r4, #20]
 8005cd2:	1d18      	adds	r0, r3, #4
 8005cd4:	6030      	str	r0, [r6, #0]
 8005cd6:	062e      	lsls	r6, r5, #24
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	d501      	bpl.n	8005ce0 <_printf_i+0x1c0>
 8005cdc:	6019      	str	r1, [r3, #0]
 8005cde:	e002      	b.n	8005ce6 <_printf_i+0x1c6>
 8005ce0:	0668      	lsls	r0, r5, #25
 8005ce2:	d5fb      	bpl.n	8005cdc <_printf_i+0x1bc>
 8005ce4:	8019      	strh	r1, [r3, #0]
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	6123      	str	r3, [r4, #16]
 8005cea:	4616      	mov	r6, r2
 8005cec:	e7bc      	b.n	8005c68 <_printf_i+0x148>
 8005cee:	6833      	ldr	r3, [r6, #0]
 8005cf0:	1d1a      	adds	r2, r3, #4
 8005cf2:	6032      	str	r2, [r6, #0]
 8005cf4:	681e      	ldr	r6, [r3, #0]
 8005cf6:	6862      	ldr	r2, [r4, #4]
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	f7fa fa70 	bl	80001e0 <memchr>
 8005d00:	b108      	cbz	r0, 8005d06 <_printf_i+0x1e6>
 8005d02:	1b80      	subs	r0, r0, r6
 8005d04:	6060      	str	r0, [r4, #4]
 8005d06:	6863      	ldr	r3, [r4, #4]
 8005d08:	6123      	str	r3, [r4, #16]
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d10:	e7aa      	b.n	8005c68 <_printf_i+0x148>
 8005d12:	6923      	ldr	r3, [r4, #16]
 8005d14:	4632      	mov	r2, r6
 8005d16:	4649      	mov	r1, r9
 8005d18:	4640      	mov	r0, r8
 8005d1a:	47d0      	blx	sl
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d0ad      	beq.n	8005c7c <_printf_i+0x15c>
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	079b      	lsls	r3, r3, #30
 8005d24:	d413      	bmi.n	8005d4e <_printf_i+0x22e>
 8005d26:	68e0      	ldr	r0, [r4, #12]
 8005d28:	9b03      	ldr	r3, [sp, #12]
 8005d2a:	4298      	cmp	r0, r3
 8005d2c:	bfb8      	it	lt
 8005d2e:	4618      	movlt	r0, r3
 8005d30:	e7a6      	b.n	8005c80 <_printf_i+0x160>
 8005d32:	2301      	movs	r3, #1
 8005d34:	4632      	mov	r2, r6
 8005d36:	4649      	mov	r1, r9
 8005d38:	4640      	mov	r0, r8
 8005d3a:	47d0      	blx	sl
 8005d3c:	3001      	adds	r0, #1
 8005d3e:	d09d      	beq.n	8005c7c <_printf_i+0x15c>
 8005d40:	3501      	adds	r5, #1
 8005d42:	68e3      	ldr	r3, [r4, #12]
 8005d44:	9903      	ldr	r1, [sp, #12]
 8005d46:	1a5b      	subs	r3, r3, r1
 8005d48:	42ab      	cmp	r3, r5
 8005d4a:	dcf2      	bgt.n	8005d32 <_printf_i+0x212>
 8005d4c:	e7eb      	b.n	8005d26 <_printf_i+0x206>
 8005d4e:	2500      	movs	r5, #0
 8005d50:	f104 0619 	add.w	r6, r4, #25
 8005d54:	e7f5      	b.n	8005d42 <_printf_i+0x222>
 8005d56:	bf00      	nop
 8005d58:	080060e1 	.word	0x080060e1
 8005d5c:	080060f2 	.word	0x080060f2

08005d60 <__swhatbuf_r>:
 8005d60:	b570      	push	{r4, r5, r6, lr}
 8005d62:	460c      	mov	r4, r1
 8005d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d68:	2900      	cmp	r1, #0
 8005d6a:	b096      	sub	sp, #88	@ 0x58
 8005d6c:	4615      	mov	r5, r2
 8005d6e:	461e      	mov	r6, r3
 8005d70:	da0d      	bge.n	8005d8e <__swhatbuf_r+0x2e>
 8005d72:	89a3      	ldrh	r3, [r4, #12]
 8005d74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005d78:	f04f 0100 	mov.w	r1, #0
 8005d7c:	bf14      	ite	ne
 8005d7e:	2340      	movne	r3, #64	@ 0x40
 8005d80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005d84:	2000      	movs	r0, #0
 8005d86:	6031      	str	r1, [r6, #0]
 8005d88:	602b      	str	r3, [r5, #0]
 8005d8a:	b016      	add	sp, #88	@ 0x58
 8005d8c:	bd70      	pop	{r4, r5, r6, pc}
 8005d8e:	466a      	mov	r2, sp
 8005d90:	f000 f87c 	bl	8005e8c <_fstat_r>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	dbec      	blt.n	8005d72 <__swhatbuf_r+0x12>
 8005d98:	9901      	ldr	r1, [sp, #4]
 8005d9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005d9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005da2:	4259      	negs	r1, r3
 8005da4:	4159      	adcs	r1, r3
 8005da6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005daa:	e7eb      	b.n	8005d84 <__swhatbuf_r+0x24>

08005dac <__smakebuf_r>:
 8005dac:	898b      	ldrh	r3, [r1, #12]
 8005dae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005db0:	079d      	lsls	r5, r3, #30
 8005db2:	4606      	mov	r6, r0
 8005db4:	460c      	mov	r4, r1
 8005db6:	d507      	bpl.n	8005dc8 <__smakebuf_r+0x1c>
 8005db8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	6123      	str	r3, [r4, #16]
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	6163      	str	r3, [r4, #20]
 8005dc4:	b003      	add	sp, #12
 8005dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dc8:	ab01      	add	r3, sp, #4
 8005dca:	466a      	mov	r2, sp
 8005dcc:	f7ff ffc8 	bl	8005d60 <__swhatbuf_r>
 8005dd0:	9f00      	ldr	r7, [sp, #0]
 8005dd2:	4605      	mov	r5, r0
 8005dd4:	4639      	mov	r1, r7
 8005dd6:	4630      	mov	r0, r6
 8005dd8:	f7ff fc66 	bl	80056a8 <_malloc_r>
 8005ddc:	b948      	cbnz	r0, 8005df2 <__smakebuf_r+0x46>
 8005dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005de2:	059a      	lsls	r2, r3, #22
 8005de4:	d4ee      	bmi.n	8005dc4 <__smakebuf_r+0x18>
 8005de6:	f023 0303 	bic.w	r3, r3, #3
 8005dea:	f043 0302 	orr.w	r3, r3, #2
 8005dee:	81a3      	strh	r3, [r4, #12]
 8005df0:	e7e2      	b.n	8005db8 <__smakebuf_r+0xc>
 8005df2:	89a3      	ldrh	r3, [r4, #12]
 8005df4:	6020      	str	r0, [r4, #0]
 8005df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dfa:	81a3      	strh	r3, [r4, #12]
 8005dfc:	9b01      	ldr	r3, [sp, #4]
 8005dfe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005e02:	b15b      	cbz	r3, 8005e1c <__smakebuf_r+0x70>
 8005e04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e08:	4630      	mov	r0, r6
 8005e0a:	f000 f851 	bl	8005eb0 <_isatty_r>
 8005e0e:	b128      	cbz	r0, 8005e1c <__smakebuf_r+0x70>
 8005e10:	89a3      	ldrh	r3, [r4, #12]
 8005e12:	f023 0303 	bic.w	r3, r3, #3
 8005e16:	f043 0301 	orr.w	r3, r3, #1
 8005e1a:	81a3      	strh	r3, [r4, #12]
 8005e1c:	89a3      	ldrh	r3, [r4, #12]
 8005e1e:	431d      	orrs	r5, r3
 8005e20:	81a5      	strh	r5, [r4, #12]
 8005e22:	e7cf      	b.n	8005dc4 <__smakebuf_r+0x18>

08005e24 <_putc_r>:
 8005e24:	b570      	push	{r4, r5, r6, lr}
 8005e26:	460d      	mov	r5, r1
 8005e28:	4614      	mov	r4, r2
 8005e2a:	4606      	mov	r6, r0
 8005e2c:	b118      	cbz	r0, 8005e36 <_putc_r+0x12>
 8005e2e:	6a03      	ldr	r3, [r0, #32]
 8005e30:	b90b      	cbnz	r3, 8005e36 <_putc_r+0x12>
 8005e32:	f7ff f9bd 	bl	80051b0 <__sinit>
 8005e36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e38:	07d8      	lsls	r0, r3, #31
 8005e3a:	d405      	bmi.n	8005e48 <_putc_r+0x24>
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	0599      	lsls	r1, r3, #22
 8005e40:	d402      	bmi.n	8005e48 <_putc_r+0x24>
 8005e42:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e44:	f7ff fbb3 	bl	80055ae <__retarget_lock_acquire_recursive>
 8005e48:	68a3      	ldr	r3, [r4, #8]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	60a3      	str	r3, [r4, #8]
 8005e50:	da05      	bge.n	8005e5e <_putc_r+0x3a>
 8005e52:	69a2      	ldr	r2, [r4, #24]
 8005e54:	4293      	cmp	r3, r2
 8005e56:	db12      	blt.n	8005e7e <_putc_r+0x5a>
 8005e58:	b2eb      	uxtb	r3, r5
 8005e5a:	2b0a      	cmp	r3, #10
 8005e5c:	d00f      	beq.n	8005e7e <_putc_r+0x5a>
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	1c5a      	adds	r2, r3, #1
 8005e62:	6022      	str	r2, [r4, #0]
 8005e64:	701d      	strb	r5, [r3, #0]
 8005e66:	b2ed      	uxtb	r5, r5
 8005e68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e6a:	07da      	lsls	r2, r3, #31
 8005e6c:	d405      	bmi.n	8005e7a <_putc_r+0x56>
 8005e6e:	89a3      	ldrh	r3, [r4, #12]
 8005e70:	059b      	lsls	r3, r3, #22
 8005e72:	d402      	bmi.n	8005e7a <_putc_r+0x56>
 8005e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e76:	f7ff fb9b 	bl	80055b0 <__retarget_lock_release_recursive>
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	bd70      	pop	{r4, r5, r6, pc}
 8005e7e:	4629      	mov	r1, r5
 8005e80:	4622      	mov	r2, r4
 8005e82:	4630      	mov	r0, r6
 8005e84:	f7ff fa85 	bl	8005392 <__swbuf_r>
 8005e88:	4605      	mov	r5, r0
 8005e8a:	e7ed      	b.n	8005e68 <_putc_r+0x44>

08005e8c <_fstat_r>:
 8005e8c:	b538      	push	{r3, r4, r5, lr}
 8005e8e:	4d07      	ldr	r5, [pc, #28]	@ (8005eac <_fstat_r+0x20>)
 8005e90:	2300      	movs	r3, #0
 8005e92:	4604      	mov	r4, r0
 8005e94:	4608      	mov	r0, r1
 8005e96:	4611      	mov	r1, r2
 8005e98:	602b      	str	r3, [r5, #0]
 8005e9a:	f7fb fbe6 	bl	800166a <_fstat>
 8005e9e:	1c43      	adds	r3, r0, #1
 8005ea0:	d102      	bne.n	8005ea8 <_fstat_r+0x1c>
 8005ea2:	682b      	ldr	r3, [r5, #0]
 8005ea4:	b103      	cbz	r3, 8005ea8 <_fstat_r+0x1c>
 8005ea6:	6023      	str	r3, [r4, #0]
 8005ea8:	bd38      	pop	{r3, r4, r5, pc}
 8005eaa:	bf00      	nop
 8005eac:	200006e0 	.word	0x200006e0

08005eb0 <_isatty_r>:
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	4d06      	ldr	r5, [pc, #24]	@ (8005ecc <_isatty_r+0x1c>)
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	4608      	mov	r0, r1
 8005eba:	602b      	str	r3, [r5, #0]
 8005ebc:	f7fb fbe5 	bl	800168a <_isatty>
 8005ec0:	1c43      	adds	r3, r0, #1
 8005ec2:	d102      	bne.n	8005eca <_isatty_r+0x1a>
 8005ec4:	682b      	ldr	r3, [r5, #0]
 8005ec6:	b103      	cbz	r3, 8005eca <_isatty_r+0x1a>
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	bd38      	pop	{r3, r4, r5, pc}
 8005ecc:	200006e0 	.word	0x200006e0

08005ed0 <_sbrk_r>:
 8005ed0:	b538      	push	{r3, r4, r5, lr}
 8005ed2:	4d06      	ldr	r5, [pc, #24]	@ (8005eec <_sbrk_r+0x1c>)
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	4608      	mov	r0, r1
 8005eda:	602b      	str	r3, [r5, #0]
 8005edc:	f7fb fbee 	bl	80016bc <_sbrk>
 8005ee0:	1c43      	adds	r3, r0, #1
 8005ee2:	d102      	bne.n	8005eea <_sbrk_r+0x1a>
 8005ee4:	682b      	ldr	r3, [r5, #0]
 8005ee6:	b103      	cbz	r3, 8005eea <_sbrk_r+0x1a>
 8005ee8:	6023      	str	r3, [r4, #0]
 8005eea:	bd38      	pop	{r3, r4, r5, pc}
 8005eec:	200006e0 	.word	0x200006e0

08005ef0 <_init>:
 8005ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ef2:	bf00      	nop
 8005ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ef6:	bc08      	pop	{r3}
 8005ef8:	469e      	mov	lr, r3
 8005efa:	4770      	bx	lr

08005efc <_fini>:
 8005efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efe:	bf00      	nop
 8005f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f02:	bc08      	pop	{r3}
 8005f04:	469e      	mov	lr, r3
 8005f06:	4770      	bx	lr
